
Robot_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b2  00800060  00006f62  00006ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800212  00800212  000071a8  2**0
                  ALLOC
  3 .stab         00007d10  00000000  00000000  000071a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003505  00000000  00000000  0000eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000123bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0001259d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  000127cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00015060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00016688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00017a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00017c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00017f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000189cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 df 14 	jmp	0x29be	; 0x29be <__vector_1>
       8:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__vector_2>
       c:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_8>
      24:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_9>
      28:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__vector_10>
      2c:	0c 94 a6 12 	jmp	0x254c	; 0x254c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	ff e6       	ldi	r31, 0x6F	; 111
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <main>
      8a:	0c 94 af 37 	jmp	0x6f5e	; 0x6f5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 37 	jmp	0x6e66	; 0x6e66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e0       	ldi	r26, 0x07	; 7
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 37 	jmp	0x6e9e	; 0x6e9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 37 	jmp	0x6e7e	; 0x6e7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 37 	jmp	0x6e7e	; 0x6e7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 37 	jmp	0x6e66	; 0x6e66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 37 	jmp	0x6e9e	; 0x6e9e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 57 37 	jmp	0x6eae	; 0x6eae <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3f 37 	jmp	0x6e7e	; 0x6e7e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3f 37 	jmp	0x6e7e	; 0x6e7e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3f 37 	jmp	0x6e7e	; 0x6e7e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 37 	jmp	0x6e7e	; 0x6e7e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 3c 37 	jmp	0x6e78	; 0x6e78 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 43 37 	jmp	0x6e86	; 0x6e86 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 5f 37 	jmp	0x6ebe	; 0x6ebe <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 57 37 	jmp	0x6eae	; 0x6eae <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e1 5f       	subi	r30, 0xF1	; 241
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <MCAL_UART_UARTInit>:
 */

#include "UART.h"
//#include "avr/interrupt.h"

void MCAL_UART_UARTInit(void) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* Set baud rate */
	UBRRH = (u8) (Baud_Rate >> Shift_8_bit);
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	10 82       	st	Z, r1
	UBRRL = (u8) Baud_Rate;
     f58:	e9 e2       	ldi	r30, 0x29	; 41
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	87 e6       	ldi	r24, 0x67	; 103
     f5e:	80 83       	st	Z, r24

	/* Enable RX and TX */
//	UCSRB = (1 << RXEN) | (1 << TXEN);
	SET_BIT(UCSRB,RXEN_PIN);
     f60:	aa e2       	ldi	r26, 0x2A	; 42
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ea e2       	ldi	r30, 0x2A	; 42
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 61       	ori	r24, 0x10	; 16
     f6c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN_PIN);
     f6e:	aa e2       	ldi	r26, 0x2A	; 42
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e2       	ldi	r30, 0x2A	; 42
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 60       	ori	r24, 0x08	; 8
     f7a:	8c 93       	st	X, r24

	/* Set frame format: 8data, 2stop bit */
//	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
	UCSRC = UCSRC_Size;
     f7c:	e0 e4       	ldi	r30, 0x40	; 64
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8e e8       	ldi	r24, 0x8E	; 142
     f82:	80 83       	st	Z, r24
	//Logical Error
//	SET_BIT(UCSRC,URSEL_PIN);
//	SET_BIT(UCSRC,USBS_PIN);
//	SET_BIT(UCSRC,UCSZ0_PIN);
//	SET_BIT(UCSRC,UCSZ1_PIN);
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <MCAL_UART_UARTTransmit>:

void MCAL_UART_UARTTransmit(u8 Loc_u8data) {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
//	while (!( UCSRA & (1 << UDRE_PIN)));
	while (GET_BIT(UCSRA,UDRE_PIN)==0);
     f96:	eb e2       	ldi	r30, 0x2B	; 43
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	82 95       	swap	r24
     f9e:	86 95       	lsr	r24
     fa0:	87 70       	andi	r24, 0x07	; 7
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	a1 f3       	breq	.-24     	; 0xf96 <MCAL_UART_UARTTransmit+0xc>

	/* Put data into buffer, sends the data */
	UDR = Loc_u8data;
     fae:	ec e2       	ldi	r30, 0x2C	; 44
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	80 83       	st	Z, r24

	/* Wait for data to be transmitted */
	while (GET_BIT(UCSRA,TXC_PIN)==0);
     fb6:	eb e2       	ldi	r30, 0x2B	; 43
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	82 95       	swap	r24
     fbe:	86 95       	lsr	r24
     fc0:	86 95       	lsr	r24
     fc2:	83 70       	andi	r24, 0x03	; 3
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	81 70       	andi	r24, 0x01	; 1
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	99 f3       	breq	.-26     	; 0xfb6 <MCAL_UART_UARTTransmit+0x2c>
	SET_BIT(UCSRA,TXC_PIN);
     fd0:	ab e2       	ldi	r26, 0x2B	; 43
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	eb e2       	ldi	r30, 0x2B	; 43
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	8c 93       	st	X, r24

}
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <MCAL_UART_UARTReceive>:
//		MCAL_UART_UARTTransmit(Loc_u8data[i]);
//	}
//
//}

void MCAL_UART_UARTReceive(u8* Loc_u8data) {
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <MCAL_UART_UARTReceive+0x6>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
//	while (!(UCSRA & (1 << RXC_PIN)));
	while (GET_BIT(UCSRA,RXC_PIN)==0);
     ff4:	eb e2       	ldi	r30, 0x2B	; 43
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 23       	and	r24, r24
     ffc:	dc f7       	brge	.-10     	; 0xff4 <MCAL_UART_UARTReceive+0xe>

	/* 	Save Received Data in Var-Loc_u8data */
	*Loc_u8data=UDR;
     ffe:	ec e2       	ldi	r30, 0x2C	; 44
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	e9 81       	ldd	r30, Y+1	; 0x01
    1006:	fa 81       	ldd	r31, Y+2	; 0x02
    1008:	80 83       	st	Z, r24
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <MCAL_T1_u8T1Init>:
 *  Created on: Oct 22, 2023
 *      Author: TOP_WORLD
 */
#include "Timer1.h"
void (*Gptr_3)(void)='\0';
u8 MCAL_T1_u8T1Init(u8 LOC_u8Timer1Mode) {
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <MCAL_T1_u8T1Init+0x6>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Timer1Mode <= FAST_PWM_OCR1A) {
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	80 31       	cpi	r24, 0x10	; 16
    1028:	08 f0       	brcs	.+2      	; 0x102c <MCAL_T1_u8T1Init+0x18>
    102a:	0f c2       	rjmp	.+1054   	; 0x144a <MCAL_T1_u8T1Init+0x436>
		if (LOC_u8Timer1Mode == NORMAL_MODE) {
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	88 23       	and	r24, r24
    1030:	f1 f4       	brne	.+60     	; 0x106e <MCAL_T1_u8T1Init+0x5a>
			CLR_BIT(TCCR1A, PIN0);
    1032:	af e4       	ldi	r26, 0x4F	; 79
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ef e4       	ldi	r30, 0x4F	; 79
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1040:	af e4       	ldi	r26, 0x4F	; 79
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ef e4       	ldi	r30, 0x4F	; 79
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8d 7f       	andi	r24, 0xFD	; 253
    104c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    104e:	ae e4       	ldi	r26, 0x4E	; 78
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ee e4       	ldi	r30, 0x4E	; 78
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	87 7f       	andi	r24, 0xF7	; 247
    105a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    105c:	ae e4       	ldi	r26, 0x4E	; 78
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ee e4       	ldi	r30, 0x4E	; 78
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7e       	andi	r24, 0xEF	; 239
    1068:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    106a:	19 82       	std	Y+1, r1	; 0x01
    106c:	ee c1       	rjmp	.+988    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_8bit) {
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	f1 f4       	brne	.+60     	; 0x10b0 <MCAL_T1_u8T1Init+0x9c>
			SET_BIT(TCCR1A, PIN0);
    1074:	af e4       	ldi	r26, 0x4F	; 79
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ef e4       	ldi	r30, 0x4F	; 79
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1082:	af e4       	ldi	r26, 0x4F	; 79
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ef e4       	ldi	r30, 0x4F	; 79
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1090:	ae e4       	ldi	r26, 0x4E	; 78
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	87 7f       	andi	r24, 0xF7	; 247
    109c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    109e:	ae e4       	ldi	r26, 0x4E	; 78
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ee e4       	ldi	r30, 0x4E	; 78
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7e       	andi	r24, 0xEF	; 239
    10aa:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    10ac:	19 82       	std	Y+1, r1	; 0x01
    10ae:	cd c1       	rjmp	.+922    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_9bit) {
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	f1 f4       	brne	.+60     	; 0x10f2 <MCAL_T1_u8T1Init+0xde>
			CLR_BIT(TCCR1A, PIN0);
    10b6:	af e4       	ldi	r26, 0x4F	; 79
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ef e4       	ldi	r30, 0x4F	; 79
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    10c4:	af e4       	ldi	r26, 0x4F	; 79
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ef e4       	ldi	r30, 0x4F	; 79
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	82 60       	ori	r24, 0x02	; 2
    10d0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    10d2:	ae e4       	ldi	r26, 0x4E	; 78
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e4       	ldi	r30, 0x4E	; 78
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	87 7f       	andi	r24, 0xF7	; 247
    10de:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7e       	andi	r24, 0xEF	; 239
    10ec:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    10ee:	19 82       	std	Y+1, r1	; 0x01
    10f0:	ac c1       	rjmp	.+856    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_10bit) {
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	f1 f4       	brne	.+60     	; 0x1134 <MCAL_T1_u8T1Init+0x120>
			SET_BIT(TCCR1A, PIN0);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1106:	af e4       	ldi	r26, 0x4F	; 79
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e4       	ldi	r30, 0x4F	; 79
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	87 7f       	andi	r24, 0xF7	; 247
    1120:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    1122:	ae e4       	ldi	r26, 0x4E	; 78
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ee e4       	ldi	r30, 0x4E	; 78
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7e       	andi	r24, 0xEF	; 239
    112e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1130:	19 82       	std	Y+1, r1	; 0x01
    1132:	8b c1       	rjmp	.+790    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_OCR1A) {
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	f1 f4       	brne	.+60     	; 0x1176 <MCAL_T1_u8T1Init+0x162>
			CLR_BIT(TCCR1A, PIN0);
    113a:	af e4       	ldi	r26, 0x4F	; 79
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ef e4       	ldi	r30, 0x4F	; 79
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1148:	af e4       	ldi	r26, 0x4F	; 79
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ef e4       	ldi	r30, 0x4F	; 79
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1156:	ae e4       	ldi	r26, 0x4E	; 78
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ee e4       	ldi	r30, 0x4E	; 78
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 60       	ori	r24, 0x08	; 8
    1162:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    1164:	ae e4       	ldi	r26, 0x4E	; 78
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ee e4       	ldi	r30, 0x4E	; 78
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	6a c1       	rjmp	.+724    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_8bit) {
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	f1 f4       	brne	.+60     	; 0x11b8 <MCAL_T1_u8T1Init+0x1a4>
			SET_BIT(TCCR1A, PIN0);
    117c:	af e4       	ldi	r26, 0x4F	; 79
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ef e4       	ldi	r30, 0x4F	; 79
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	81 60       	ori	r24, 0x01	; 1
    1188:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    118a:	af e4       	ldi	r26, 0x4F	; 79
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ef e4       	ldi	r30, 0x4F	; 79
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8d 7f       	andi	r24, 0xFD	; 253
    1196:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1198:	ae e4       	ldi	r26, 0x4E	; 78
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ee e4       	ldi	r30, 0x4E	; 78
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	88 60       	ori	r24, 0x08	; 8
    11a4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    11a6:	ae e4       	ldi	r26, 0x4E	; 78
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ee e4       	ldi	r30, 0x4E	; 78
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7e       	andi	r24, 0xEF	; 239
    11b2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	49 c1       	rjmp	.+658    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_9bit) {
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	86 30       	cpi	r24, 0x06	; 6
    11bc:	f1 f4       	brne	.+60     	; 0x11fa <MCAL_T1_u8T1Init+0x1e6>
			CLR_BIT(TCCR1A, PIN0);
    11be:	af e4       	ldi	r26, 0x4F	; 79
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ef e4       	ldi	r30, 0x4F	; 79
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8e 7f       	andi	r24, 0xFE	; 254
    11ca:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    11cc:	af e4       	ldi	r26, 0x4F	; 79
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ef e4       	ldi	r30, 0x4F	; 79
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	88 60       	ori	r24, 0x08	; 8
    11e6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8f 7e       	andi	r24, 0xEF	; 239
    11f4:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	28 c1       	rjmp	.+592    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_10bit) {
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	87 30       	cpi	r24, 0x07	; 7
    11fe:	f1 f4       	brne	.+60     	; 0x123c <MCAL_T1_u8T1Init+0x228>
			SET_BIT(TCCR1A, PIN0);
    1200:	af e4       	ldi	r26, 0x4F	; 79
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ef e4       	ldi	r30, 0x4F	; 79
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	81 60       	ori	r24, 0x01	; 1
    120c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    120e:	af e4       	ldi	r26, 0x4F	; 79
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ef e4       	ldi	r30, 0x4F	; 79
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	82 60       	ori	r24, 0x02	; 2
    121a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    121c:	ae e4       	ldi	r26, 0x4E	; 78
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ee e4       	ldi	r30, 0x4E	; 78
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    122a:	ae e4       	ldi	r26, 0x4E	; 78
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ee e4       	ldi	r30, 0x4E	; 78
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 7e       	andi	r24, 0xEF	; 239
    1236:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1238:	19 82       	std	Y+1, r1	; 0x01
    123a:	07 c1       	rjmp	.+526    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_ICR1) {
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	f1 f4       	brne	.+60     	; 0x127e <MCAL_T1_u8T1Init+0x26a>
			CLR_BIT(TCCR1A, PIN0);
    1242:	af e4       	ldi	r26, 0x4F	; 79
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	ef e4       	ldi	r30, 0x4F	; 79
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8e 7f       	andi	r24, 0xFE	; 254
    124e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1250:	af e4       	ldi	r26, 0x4F	; 79
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ef e4       	ldi	r30, 0x4F	; 79
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8d 7f       	andi	r24, 0xFD	; 253
    125c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    125e:	ae e4       	ldi	r26, 0x4E	; 78
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    126c:	ae e4       	ldi	r26, 0x4E	; 78
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ee e4       	ldi	r30, 0x4E	; 78
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 61       	ori	r24, 0x10	; 16
    1278:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	e6 c0       	rjmp	.+460    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_OCR1A) {
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	89 30       	cpi	r24, 0x09	; 9
    1282:	f1 f4       	brne	.+60     	; 0x12c0 <MCAL_T1_u8T1Init+0x2ac>
			SET_BIT(TCCR1A, PIN0);
    1284:	af e4       	ldi	r26, 0x4F	; 79
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ef e4       	ldi	r30, 0x4F	; 79
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    12a0:	ae e4       	ldi	r26, 0x4E	; 78
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ee e4       	ldi	r30, 0x4E	; 78
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	87 7f       	andi	r24, 0xF7	; 247
    12ac:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    12ae:	ae e4       	ldi	r26, 0x4E	; 78
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ee e4       	ldi	r30, 0x4E	; 78
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	c5 c0       	rjmp	.+394    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_ICR1) {
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	8a 30       	cpi	r24, 0x0A	; 10
    12c4:	f1 f4       	brne	.+60     	; 0x1302 <MCAL_T1_u8T1Init+0x2ee>
			CLR_BIT(TCCR1A, PIN0);
    12c6:	af e4       	ldi	r26, 0x4F	; 79
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ef e4       	ldi	r30, 0x4F	; 79
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    12d4:	af e4       	ldi	r26, 0x4F	; 79
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ef e4       	ldi	r30, 0x4F	; 79
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    12e2:	ae e4       	ldi	r26, 0x4E	; 78
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ee e4       	ldi	r30, 0x4E	; 78
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	87 7f       	andi	r24, 0xF7	; 247
    12ee:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    12f0:	ae e4       	ldi	r26, 0x4E	; 78
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ee e4       	ldi	r30, 0x4E	; 78
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 61       	ori	r24, 0x10	; 16
    12fc:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	a4 c0       	rjmp	.+328    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_OCR1A) {
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	8b 30       	cpi	r24, 0x0B	; 11
    1306:	f1 f4       	brne	.+60     	; 0x1344 <MCAL_T1_u8T1Init+0x330>
			SET_BIT(TCCR1A, PIN0);
    1308:	af e4       	ldi	r26, 0x4F	; 79
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ef e4       	ldi	r30, 0x4F	; 79
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1316:	af e4       	ldi	r26, 0x4F	; 79
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ef e4       	ldi	r30, 0x4F	; 79
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	82 60       	ori	r24, 0x02	; 2
    1322:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1324:	ae e4       	ldi	r26, 0x4E	; 78
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ee e4       	ldi	r30, 0x4E	; 78
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	87 7f       	andi	r24, 0xF7	; 247
    1330:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    1332:	ae e4       	ldi	r26, 0x4E	; 78
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ee e4       	ldi	r30, 0x4E	; 78
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 61       	ori	r24, 0x10	; 16
    133e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	83 c0       	rjmp	.+262    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_ICR1) {
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	8c 30       	cpi	r24, 0x0C	; 12
    1348:	f1 f4       	brne	.+60     	; 0x1386 <MCAL_T1_u8T1Init+0x372>
			CLR_BIT(TCCR1A, PIN0);
    134a:	af e4       	ldi	r26, 0x4F	; 79
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ef e4       	ldi	r30, 0x4F	; 79
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8e 7f       	andi	r24, 0xFE	; 254
    1356:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1358:	af e4       	ldi	r26, 0x4F	; 79
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ef e4       	ldi	r30, 0x4F	; 79
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8d 7f       	andi	r24, 0xFD	; 253
    1364:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1366:	ae e4       	ldi	r26, 0x4E	; 78
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	ee e4       	ldi	r30, 0x4E	; 78
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	88 60       	ori	r24, 0x08	; 8
    1372:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    1374:	ae e4       	ldi	r26, 0x4E	; 78
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ee e4       	ldi	r30, 0x4E	; 78
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 61       	ori	r24, 0x10	; 16
    1380:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	62 c0       	rjmp	.+196    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == REVERSED_MODE) {
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	8d 30       	cpi	r24, 0x0D	; 13
    138a:	f1 f4       	brne	.+60     	; 0x13c8 <MCAL_T1_u8T1Init+0x3b4>
			SET_BIT(TCCR1A, PIN0);
    138c:	af e4       	ldi	r26, 0x4F	; 79
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ef e4       	ldi	r30, 0x4F	; 79
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    139a:	af e4       	ldi	r26, 0x4F	; 79
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	ef e4       	ldi	r30, 0x4F	; 79
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	8d 7f       	andi	r24, 0xFD	; 253
    13a6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    13a8:	ae e4       	ldi	r26, 0x4E	; 78
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ee e4       	ldi	r30, 0x4E	; 78
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	88 60       	ori	r24, 0x08	; 8
    13b4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    13b6:	ae e4       	ldi	r26, 0x4E	; 78
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ee e4       	ldi	r30, 0x4E	; 78
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 61       	ori	r24, 0x10	; 16
    13c2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	41 c0       	rjmp	.+130    	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_ICR1) {
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	8e 30       	cpi	r24, 0x0E	; 14
    13cc:	f1 f4       	brne	.+60     	; 0x140a <MCAL_T1_u8T1Init+0x3f6>
			CLR_BIT(TCCR1A, PIN0);
    13ce:	af e4       	ldi	r26, 0x4F	; 79
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ef e4       	ldi	r30, 0x4F	; 79
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8e 7f       	andi	r24, 0xFE	; 254
    13da:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    13dc:	af e4       	ldi	r26, 0x4F	; 79
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	ef e4       	ldi	r30, 0x4F	; 79
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    13ea:	ae e4       	ldi	r26, 0x4E	; 78
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ee e4       	ldi	r30, 0x4E	; 78
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    13f8:	ae e4       	ldi	r26, 0x4E	; 78
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ee e4       	ldi	r30, 0x4E	; 78
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 61       	ori	r24, 0x10	; 16
    1404:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1406:	19 82       	std	Y+1, r1	; 0x01
    1408:	20 c0       	rjmp	.+64     	; 0x144a <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_OCR1A) {
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	8f 30       	cpi	r24, 0x0F	; 15
    140e:	e9 f4       	brne	.+58     	; 0x144a <MCAL_T1_u8T1Init+0x436>
			SET_BIT(TCCR1A, PIN0);
    1410:	af e4       	ldi	r26, 0x4F	; 79
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ef e4       	ldi	r30, 0x4F	; 79
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	81 60       	ori	r24, 0x01	; 1
    141c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    141e:	af e4       	ldi	r26, 0x4F	; 79
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ef e4       	ldi	r30, 0x4F	; 79
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	82 60       	ori	r24, 0x02	; 2
    142a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    142c:	ae e4       	ldi	r26, 0x4E	; 78
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ee e4       	ldi	r30, 0x4E	; 78
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	88 60       	ori	r24, 0x08	; 8
    1438:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    143a:	ae e4       	ldi	r26, 0x4E	; 78
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ee e4       	ldi	r30, 0x4E	; 78
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 61       	ori	r24, 0x10	; 16
    1446:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1448:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <MCAL_T1_u8T1Prescaler>:
u8 MCAL_T1_u8T1Prescaler(u8 LOC_u8Clock_Selection, f32 *LOC_pfl32TickTime) {
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <MCAL_T1_u8T1Prescaler+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <MCAL_T1_u8T1Prescaler+0x8>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	7c 83       	std	Y+4, r23	; 0x04
    1466:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Clock_Selection <= EXTERNAL_RISING_EDGE) {
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	08 f0       	brcs	.+2      	; 0x1474 <MCAL_T1_u8T1Prescaler+0x1e>
    1472:	01 c1       	rjmp	.+514    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		if (LOC_u8Clock_Selection == COUNTER_STOP) {
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	88 23       	and	r24, r24
    1478:	b9 f4       	brne	.+46     	; 0x14a8 <MCAL_T1_u8T1Prescaler+0x52>
			CLR_BIT(TCCR1B, PIN0);
    147a:	ae e4       	ldi	r26, 0x4E	; 78
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ee e4       	ldi	r30, 0x4E	; 78
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8e 7f       	andi	r24, 0xFE	; 254
    1486:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    1488:	ae e4       	ldi	r26, 0x4E	; 78
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ee e4       	ldi	r30, 0x4E	; 78
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8d 7f       	andi	r24, 0xFD	; 253
    1494:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    1496:	ae e4       	ldi	r26, 0x4E	; 78
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ee e4       	ldi	r30, 0x4E	; 78
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8b 7f       	andi	r24, 0xFB	; 251
    14a2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	e7 c0       	rjmp	.+462    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_0) {
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	09 f5       	brne	.+66     	; 0x14f0 <MCAL_T1_u8T1Prescaler+0x9a>
			SET_BIT(TCCR1B, PIN0);
    14ae:	ae e4       	ldi	r26, 0x4E	; 78
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ee e4       	ldi	r30, 0x4E	; 78
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    14bc:	ae e4       	ldi	r26, 0x4E	; 78
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ee e4       	ldi	r30, 0x4E	; 78
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8d 7f       	andi	r24, 0xFD	; 253
    14c8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    14ca:	ae e4       	ldi	r26, 0x4E	; 78
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ee e4       	ldi	r30, 0x4E	; 78
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8b 7f       	andi	r24, 0xFB	; 251
    14d6:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING0 / (f32) CPU_FREQUNCY;
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	8d eb       	ldi	r24, 0xBD	; 189
    14de:	97 e3       	ldi	r25, 0x37	; 55
    14e0:	a6 e8       	ldi	r26, 0x86	; 134
    14e2:	b3 e3       	ldi	r27, 0x33	; 51
    14e4:	80 83       	st	Z, r24
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	a2 83       	std	Z+2, r26	; 0x02
    14ea:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    14ec:	19 82       	std	Y+1, r1	; 0x01
    14ee:	c3 c0       	rjmp	.+390    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_8) {
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	09 f5       	brne	.+66     	; 0x1538 <MCAL_T1_u8T1Prescaler+0xe2>
			CLR_BIT(TCCR1B, PIN0);
    14f6:	ae e4       	ldi	r26, 0x4E	; 78
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ee e4       	ldi	r30, 0x4E	; 78
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8e 7f       	andi	r24, 0xFE	; 254
    1502:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    1504:	ae e4       	ldi	r26, 0x4E	; 78
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ee e4       	ldi	r30, 0x4E	; 78
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    1512:	ae e4       	ldi	r26, 0x4E	; 78
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ee e4       	ldi	r30, 0x4E	; 78
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8b 7f       	andi	r24, 0xFB	; 251
    151e:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING8 / (f32) CPU_FREQUNCY;
    1520:	eb 81       	ldd	r30, Y+3	; 0x03
    1522:	fc 81       	ldd	r31, Y+4	; 0x04
    1524:	8d eb       	ldi	r24, 0xBD	; 189
    1526:	97 e3       	ldi	r25, 0x37	; 55
    1528:	a6 e0       	ldi	r26, 0x06	; 6
    152a:	b5 e3       	ldi	r27, 0x35	; 53
    152c:	80 83       	st	Z, r24
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	a2 83       	std	Z+2, r26	; 0x02
    1532:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1534:	19 82       	std	Y+1, r1	; 0x01
    1536:	9f c0       	rjmp	.+318    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_64) {
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	09 f5       	brne	.+66     	; 0x1580 <MCAL_T1_u8T1Prescaler+0x12a>
			SET_BIT(TCCR1B, PIN0);
    153e:	ae e4       	ldi	r26, 0x4E	; 78
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ee e4       	ldi	r30, 0x4E	; 78
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	81 60       	ori	r24, 0x01	; 1
    154a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    154c:	ae e4       	ldi	r26, 0x4E	; 78
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ee e4       	ldi	r30, 0x4E	; 78
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	82 60       	ori	r24, 0x02	; 2
    1558:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8b 7f       	andi	r24, 0xFB	; 251
    1566:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING64 / (f32) CPU_FREQUNCY;
    1568:	eb 81       	ldd	r30, Y+3	; 0x03
    156a:	fc 81       	ldd	r31, Y+4	; 0x04
    156c:	8d eb       	ldi	r24, 0xBD	; 189
    156e:	97 e3       	ldi	r25, 0x37	; 55
    1570:	a6 e8       	ldi	r26, 0x86	; 134
    1572:	b6 e3       	ldi	r27, 0x36	; 54
    1574:	80 83       	st	Z, r24
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	a2 83       	std	Z+2, r26	; 0x02
    157a:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    157c:	19 82       	std	Y+1, r1	; 0x01
    157e:	7b c0       	rjmp	.+246    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_256) {
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	09 f5       	brne	.+66     	; 0x15c8 <MCAL_T1_u8T1Prescaler+0x172>
			CLR_BIT(TCCR1B, PIN0);
    1586:	ae e4       	ldi	r26, 0x4E	; 78
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ee e4       	ldi	r30, 0x4E	; 78
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8e 7f       	andi	r24, 0xFE	; 254
    1592:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    1594:	ae e4       	ldi	r26, 0x4E	; 78
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ee e4       	ldi	r30, 0x4E	; 78
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8d 7f       	andi	r24, 0xFD	; 253
    15a0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    15a2:	ae e4       	ldi	r26, 0x4E	; 78
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ee e4       	ldi	r30, 0x4E	; 78
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	84 60       	ori	r24, 0x04	; 4
    15ae:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING256 / (f32) CPU_FREQUNCY;
    15b0:	eb 81       	ldd	r30, Y+3	; 0x03
    15b2:	fc 81       	ldd	r31, Y+4	; 0x04
    15b4:	8d eb       	ldi	r24, 0xBD	; 189
    15b6:	97 e3       	ldi	r25, 0x37	; 55
    15b8:	a6 e8       	ldi	r26, 0x86	; 134
    15ba:	b7 e3       	ldi	r27, 0x37	; 55
    15bc:	80 83       	st	Z, r24
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	a2 83       	std	Z+2, r26	; 0x02
    15c2:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    15c4:	19 82       	std	Y+1, r1	; 0x01
    15c6:	57 c0       	rjmp	.+174    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_1024) {
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	85 30       	cpi	r24, 0x05	; 5
    15cc:	09 f5       	brne	.+66     	; 0x1610 <MCAL_T1_u8T1Prescaler+0x1ba>
			SET_BIT(TCCR1B, PIN0);
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	81 60       	ori	r24, 0x01	; 1
    15da:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    15dc:	ae e4       	ldi	r26, 0x4E	; 78
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ee e4       	ldi	r30, 0x4E	; 78
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8d 7f       	andi	r24, 0xFD	; 253
    15e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    15ea:	ae e4       	ldi	r26, 0x4E	; 78
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ee e4       	ldi	r30, 0x4E	; 78
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	84 60       	ori	r24, 0x04	; 4
    15f6:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING1024 / (f32) CPU_FREQUNCY;
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	8d eb       	ldi	r24, 0xBD	; 189
    15fe:	97 e3       	ldi	r25, 0x37	; 55
    1600:	a6 e8       	ldi	r26, 0x86	; 134
    1602:	b8 e3       	ldi	r27, 0x38	; 56
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	33 c0       	rjmp	.+102    	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_FALLING_EDGE) {
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	86 30       	cpi	r24, 0x06	; 6
    1614:	b9 f4       	brne	.+46     	; 0x1644 <MCAL_T1_u8T1Prescaler+0x1ee>
			CLR_BIT(TCCR1B, PIN0);
    1616:	ae e4       	ldi	r26, 0x4E	; 78
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ee e4       	ldi	r30, 0x4E	; 78
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    1624:	ae e4       	ldi	r26, 0x4E	; 78
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ee e4       	ldi	r30, 0x4E	; 78
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    1632:	ae e4       	ldi	r26, 0x4E	; 78
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ee e4       	ldi	r30, 0x4E	; 78
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1640:	19 82       	std	Y+1, r1	; 0x01
    1642:	19 c0       	rjmp	.+50     	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_RISING_EDGE) {
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	87 30       	cpi	r24, 0x07	; 7
    1648:	b1 f4       	brne	.+44     	; 0x1676 <MCAL_T1_u8T1Prescaler+0x220>
			SET_BIT(TCCR1B, PIN0);
    164a:	ae e4       	ldi	r26, 0x4E	; 78
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e4       	ldi	r30, 0x4E	; 78
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	81 60       	ori	r24, 0x01	; 1
    1656:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    1658:	ae e4       	ldi	r26, 0x4E	; 78
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ee e4       	ldi	r30, 0x4E	; 78
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	82 60       	ori	r24, 0x02	; 2
    1664:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    1666:	ae e4       	ldi	r26, 0x4E	; 78
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	ee e4       	ldi	r30, 0x4E	; 78
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	84 60       	ori	r24, 0x04	; 4
    1672:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1674:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <MCAL_T1_u8T1CompareOutputMode>:
//Fast MODE PWM & PHASE CORRECT
u8 MCAL_T1_u8T1CompareOutputMode(u8 LOC_u8OutputMode, u8 LOC_u8Channel) {
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <MCAL_T1_u8T1CompareOutputMode+0x6>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8OutputMode <= INVERTING_MODE && LOC_u8Channel <= CHENNEL_B) {
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <MCAL_T1_u8T1CompareOutputMode+0x1c>
    16a0:	72 c0       	rjmp	.+228    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <MCAL_T1_u8T1CompareOutputMode+0x24>
    16a8:	6e c0       	rjmp	.+220    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
		if (LOC_u8Channel == CHENNEL_A) {
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	88 23       	and	r24, r24
    16ae:	a9 f5       	brne	.+106    	; 0x171a <MCAL_T1_u8T1CompareOutputMode+0x94>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	88 23       	and	r24, r24
    16b4:	b9 f4       	brne	.+46     	; 0x16e4 <MCAL_T1_u8T1CompareOutputMode+0x5e>
				CLR_BIT(TCCR1A, PIN6);
    16b6:	af e4       	ldi	r26, 0x4F	; 79
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ef e4       	ldi	r30, 0x4F	; 79
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8f 7b       	andi	r24, 0xBF	; 191
    16c2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN7);
    16c4:	af e4       	ldi	r26, 0x4F	; 79
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef e4       	ldi	r30, 0x4F	; 79
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN5);
    16d2:	a1 e3       	ldi	r26, 0x31	; 49
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e1 e3       	ldi	r30, 0x31	; 49
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 62       	ori	r24, 0x20	; 32
    16de:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	51 c0       	rjmp	.+162    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	09 f0       	breq	.+2      	; 0x16ec <MCAL_T1_u8T1CompareOutputMode+0x66>
    16ea:	4d c0       	rjmp	.+154    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, PIN6);
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 64       	ori	r24, 0x40	; 64
    16f8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN7);
    16fa:	af e4       	ldi	r26, 0x4F	; 79
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ef e4       	ldi	r30, 0x4F	; 79
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 68       	ori	r24, 0x80	; 128
    1706:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN5);
    1708:	a1 e3       	ldi	r26, 0x31	; 49
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e1 e3       	ldi	r30, 0x31	; 49
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1716:	19 82       	std	Y+1, r1	; 0x01
    1718:	36 c0       	rjmp	.+108    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else {
				//NOTHING
			}
		} else if (LOC_u8Channel == CHENNEL_B) {
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	99 f5       	brne	.+102    	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 23       	and	r24, r24
    1724:	b9 f4       	brne	.+46     	; 0x1754 <MCAL_T1_u8T1CompareOutputMode+0xce>
				CLR_BIT(TCCR1A, PIN4);
    1726:	af e4       	ldi	r26, 0x4F	; 79
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ef e4       	ldi	r30, 0x4F	; 79
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8f 7e       	andi	r24, 0xEF	; 239
    1732:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN5);
    1734:	af e4       	ldi	r26, 0x4F	; 79
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ef e4       	ldi	r30, 0x4F	; 79
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 62       	ori	r24, 0x20	; 32
    1740:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN4);
    1742:	a1 e3       	ldi	r26, 0x31	; 49
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e1 e3       	ldi	r30, 0x31	; 49
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 61       	ori	r24, 0x10	; 16
    174e:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1750:	19 82       	std	Y+1, r1	; 0x01
    1752:	19 c0       	rjmp	.+50     	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	b1 f4       	brne	.+44     	; 0x1786 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, PIN4);
    175a:	af e4       	ldi	r26, 0x4F	; 79
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ef e4       	ldi	r30, 0x4F	; 79
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 61       	ori	r24, 0x10	; 16
    1766:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN5);
    1768:	af e4       	ldi	r26, 0x4F	; 79
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ef e4       	ldi	r30, 0x4F	; 79
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 62       	ori	r24, 0x20	; 32
    1774:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN4);
    1776:	a1 e3       	ldi	r26, 0x31	; 49
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e1 e3       	ldi	r30, 0x31	; 49
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1784:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1786:	89 81       	ldd	r24, Y+1	; 0x01
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <MCAL_T1_voidNoiseCancller>:
//NOISE CANCLLER
void MCAL_T1_voidNoiseCancller(void) {
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, PIN7);
    179c:	ae e4       	ldi	r26, 0x4E	; 78
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ee e4       	ldi	r30, 0x4E	; 78
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 68       	ori	r24, 0x80	; 128
    17a8:	8c 93       	st	X, r24
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <MCAL_T1_voidSetTCNT1Value>:
//Set TCNT1 Value
void MCAL_T1_voidSetTCNT1Value(u16 LOC_u16Value) {
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <MCAL_T1_voidSetTCNT1Value+0x6>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		TCNT1 = LOC_u16Value;
    17be:	ec e4       	ldi	r30, 0x4C	; 76
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <MCAL_T1_voidGetTCNT1Value>:
//GIT TCNT1
void MCAL_T1_voidGetTCNT1Value(u16 *LOC_pu16Value) {
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <MCAL_T1_voidGetTCNT1Value+0x6>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	41 f0       	breq	.+16     	; 0x17fa <MCAL_T1_voidGetTCNT1Value+0x26>
		*LOC_pu16Value = TCNT1;
    17ea:	ec e4       	ldi	r30, 0x4C	; 76
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
	}
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <MCAL_T1_voidSetOCR1AValue>:
//Set OCR1A
void MCAL_T1_voidSetOCR1AValue(u16 LOC_u16Value) {
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <MCAL_T1_voidSetOCR1AValue+0x6>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1A = LOC_u16Value;
    1812:	ea e4       	ldi	r30, 0x4A	; 74
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <MCAL_T1_voidSetOCR1BValue>:
//SET OCR1B
void MCAL_T1_voidSetOCR1BValue(u16 LOC_u16Value) {
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <MCAL_T1_voidSetOCR1BValue+0x6>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1B = LOC_u16Value;
    1836:	e8 e4       	ldi	r30, 0x48	; 72
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <MCAL_T1_voidSetICR1Value>:
//SET ICR1
void MCAL_T1_voidSetICR1Value(u16 LOC_u16Value) {
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <MCAL_T1_voidSetICR1Value+0x6>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		ICR1 = LOC_u16Value;
    185a:	e6 e4       	ldi	r30, 0x46	; 70
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <MCAL_T1_voidGetICR1Value>:
//Get ICR1
void MCAL_T1_voidGetICR1Value(u16 *LOC_pu16Value) {
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <MCAL_T1_voidGetICR1Value+0x6>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	41 f0       	breq	.+16     	; 0x1896 <MCAL_T1_voidGetICR1Value+0x26>
		*LOC_pu16Value =ICR1;
    1886:	e6 e4       	ldi	r30, 0x46	; 70
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	e9 81       	ldd	r30, Y+1	; 0x01
    1890:	fa 81       	ldd	r31, Y+2	; 0x02
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <MCAL_T1_voidTCNT1_GIEEnable>:
//TCNT1 PIE
void MCAL_T1_voidTCNT1_GIEEnable(void) {
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    18a8:	af e5       	ldi	r26, 0x5F	; 95
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ef e5       	ldi	r30, 0x5F	; 95
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 68       	ori	r24, 0x80	; 128
    18b4:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN2);
    18b6:	a9 e5       	ldi	r26, 0x59	; 89
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e9 e5       	ldi	r30, 0x59	; 89
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	84 60       	ori	r24, 0x04	; 4
    18c2:	8c 93       	st	X, r24
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <MCAL_T1_voidTCNT1_GIEDisable>:
void MCAL_T1_voidTCNT1_GIEDisable(void) {
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN2);
    18d2:	a9 e5       	ldi	r26, 0x59	; 89
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e9 e5       	ldi	r30, 0x59	; 89
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8b 7f       	andi	r24, 0xFB	; 251
    18de:	8c 93       	st	X, r24
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <MCAL_T1_voidOCR1B_GIEEnable>:
//OCR1B PIE
void MCAL_T1_voidOCR1B_GIEEnable(void) {
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    18ee:	af e5       	ldi	r26, 0x5F	; 95
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ef e5       	ldi	r30, 0x5F	; 95
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN3);
    18fc:	a9 e5       	ldi	r26, 0x59	; 89
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e9 e5       	ldi	r30, 0x59	; 89
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	88 60       	ori	r24, 0x08	; 8
    1908:	8c 93       	st	X, r24
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <MCAL_T1_voidOCR1B_GIEDisable>:
void MCAL_T1_voidOCR1B_GIEDisable(void) {
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN3);
    1918:	a9 e5       	ldi	r26, 0x59	; 89
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e9 e5       	ldi	r30, 0x59	; 89
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	87 7f       	andi	r24, 0xF7	; 247
    1924:	8c 93       	st	X, r24
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <MCAL_T1_voidOCR1A_GIEEnable>:
//OCR1A PIE
void MCAL_T1_voidOCR1A_GIEEnable(void) {
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    1934:	af e5       	ldi	r26, 0x5F	; 95
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ef e5       	ldi	r30, 0x5F	; 95
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN4);
    1942:	a9 e5       	ldi	r26, 0x59	; 89
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e9 e5       	ldi	r30, 0x59	; 89
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 61       	ori	r24, 0x10	; 16
    194e:	8c 93       	st	X, r24
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <MCAL_T1_voidOCR1A_GIEDisable>:
void MCAL_T1_voidOCR1A_GIEDisable(void) {
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN4);
    195e:	a9 e5       	ldi	r26, 0x59	; 89
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e9 e5       	ldi	r30, 0x59	; 89
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 7e       	andi	r24, 0xEF	; 239
    196a:	8c 93       	st	X, r24
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <MCAL_T1_voidICR1_GIEEnable>:
//ICR1 PIE
void MCAL_T1_voidICR1_GIEEnable(void) {
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    197a:	af e5       	ldi	r26, 0x5F	; 95
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ef e5       	ldi	r30, 0x5F	; 95
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 68       	ori	r24, 0x80	; 128
    1986:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN5);
    1988:	a9 e5       	ldi	r26, 0x59	; 89
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e9 e5       	ldi	r30, 0x59	; 89
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 62       	ori	r24, 0x20	; 32
    1994:	8c 93       	st	X, r24
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <MCAL_T1_voidICR1_GIEDisable>:
void MCAL_T1_voidICR1_GIEDisable(void) {
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN5);
    19a4:	a9 e5       	ldi	r26, 0x59	; 89
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e9 e5       	ldi	r30, 0x59	; 89
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7d       	andi	r24, 0xDF	; 223
    19b0:	8c 93       	st	X, r24
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <MCAL_T1_u8T1DelayNormalMode>:

u8 MCAL_T1_u8T1DelayNormalMode(u8 LOC_u8Clock_Selection,
		f32 LOC_f32NumOFSecond, u16 *LOC_pu8StartValue, u16 *LOC_pu16Counter) {
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	66 97       	sbiw	r28, 0x16	; 22
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	8e 87       	std	Y+14, r24	; 0x0e
    19d2:	4f 87       	std	Y+15, r20	; 0x0f
    19d4:	58 8b       	std	Y+16, r21	; 0x10
    19d6:	69 8b       	std	Y+17, r22	; 0x11
    19d8:	7a 8b       	std	Y+18, r23	; 0x12
    19da:	3c 8b       	std	Y+20, r19	; 0x14
    19dc:	2b 8b       	std	Y+19, r18	; 0x13
    19de:	1e 8b       	std	Y+22, r17	; 0x16
    19e0:	0d 8b       	std	Y+21, r16	; 0x15
	u8 LOC_u8ReturnValue = E_NOT_OK;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 87       	std	Y+9, r24	; 0x09
	f32 TickTime = NUMBER_0;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e0       	ldi	r26, 0x00	; 0
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	8a 87       	std	Y+10, r24	; 0x0a
    19f0:	9b 87       	std	Y+11, r25	; 0x0b
    19f2:	ac 87       	std	Y+12, r26	; 0x0c
    19f4:	bd 87       	std	Y+13, r27	; 0x0d
	u32 N = NUMBER_0;
    19f6:	1d 82       	std	Y+5, r1	; 0x05
    19f8:	1e 82       	std	Y+6, r1	; 0x06
    19fa:	1f 82       	std	Y+7, r1	; 0x07
    19fc:	18 86       	std	Y+8, r1	; 0x08
	u16 counter = NUMBER_0;
    19fe:	1c 82       	std	Y+4, r1	; 0x04
    1a00:	1b 82       	std	Y+3, r1	; 0x03
	u16 Reminder = NUMBER_0;
    1a02:	1a 82       	std	Y+2, r1	; 0x02
    1a04:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1a06:	9e 01       	movw	r18, r28
    1a08:	26 5f       	subi	r18, 0xF6	; 246
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a0e:	b9 01       	movw	r22, r18
    1a10:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCAL_T1_u8T1Prescaler>
	if (LOC_f32NumOFSecond <= 0 || LOC_f32NumOFSecond > 0) {
    1a14:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a16:	78 89       	ldd	r23, Y+16	; 0x10
    1a18:	89 89       	ldd	r24, Y+17	; 0x11
    1a1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	6c f4       	brge	.+26     	; 0x1a46 <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1a2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a2e:	78 89       	ldd	r23, Y+16	; 0x10
    1a30:	89 89       	ldd	r24, Y+17	; 0x11
    1a32:	9a 89       	ldd	r25, Y+18	; 0x12
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	0c f0       	brlt	.+2      	; 0x1a46 <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1a44:	6b c0       	rjmp	.+214    	; 0x1b1c <MCAL_T1_u8T1DelayNormalMode+0x164>
		N = LOC_f32NumOFSecond / (f32) TickTime;
    1a46:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a48:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a4a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a4c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a4e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a50:	78 89       	ldd	r23, Y+16	; 0x10
    1a52:	89 89       	ldd	r24, Y+17	; 0x11
    1a54:	9a 89       	ldd	r25, Y+18	; 0x12
    1a56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	af 83       	std	Y+7, r26	; 0x07
    1a70:	b8 87       	std	Y+8, r27	; 0x08
		Reminder = N % OVER_FLOW_COUNT;
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	af 81       	ldd	r26, Y+7	; 0x07
    1a78:	b8 85       	ldd	r27, Y+8	; 0x08
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 11 37 	call	0x6e22	; 0x6e22 <__udivmodsi4>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu8StartValue = Reminder;
    1a92:	eb 89       	ldd	r30, Y+19	; 0x13
    1a94:	fc 89       	ldd	r31, Y+20	; 0x14
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
		if (Reminder == NUMBER_0) {
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	d9 f4       	brne	.+54     	; 0x1adc <MCAL_T1_u8T1DelayNormalMode+0x124>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <MCAL_T1_voidSetTCNT1Value>
			counter = N / OVER_FLOW_COUNT;
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	af 81       	ldd	r26, Y+7	; 0x07
    1ab4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ab6:	2f ef       	ldi	r18, 0xFF	; 255
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 11 37 	call	0x6e22	; 0x6e22 <__udivmodsi4>
    1ac6:	da 01       	movw	r26, r20
    1ac8:	c9 01       	movw	r24, r18
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1ace:	ed 89       	ldd	r30, Y+21	; 0x15
    1ad0:	fe 89       	ldd	r31, Y+22	; 0x16
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	1f c0       	rjmp	.+62     	; 0x1b1a <MCAL_T1_u8T1DelayNormalMode+0x162>
		} else if (Reminder != NUMBER_0) {
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	d9 f0       	breq	.+54     	; 0x1b1a <MCAL_T1_u8T1DelayNormalMode+0x162>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <MCAL_T1_voidSetTCNT1Value>
			counter = ((N / OVER_FLOW_COUNT) + NUMBER_1);
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	af 81       	ldd	r26, Y+7	; 0x07
    1af2:	b8 85       	ldd	r27, Y+8	; 0x08
    1af4:	2f ef       	ldi	r18, 0xFF	; 255
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 11 37 	call	0x6e22	; 0x6e22 <__udivmodsi4>
    1b04:	da 01       	movw	r26, r20
    1b06:	c9 01       	movw	r24, r18
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1b0e:	ed 89       	ldd	r30, Y+21	; 0x15
    1b10:	fe 89       	ldd	r31, Y+22	; 0x16
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
		} else {
			//NOTHING
		}
		LOC_u8ReturnValue = E_OK;
    1b1a:	19 86       	std	Y+9, r1	; 0x09
	}
	return LOC_u8ReturnValue;
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09

}
    1b1e:	66 96       	adiw	r28, 0x16	; 22
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <MCAL_T1_voidDelayCTCMode>:

void MCAL_T1_voidDelayCTCMode(u8 LOC_u8Clock_Selection,
		f32 LOC_fl32NumOFSecond, u16 *LOC_pu16Counter) {
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	61 97       	sbiw	r28, 0x11	; 17
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	8b 87       	std	Y+11, r24	; 0x0b
    1b4a:	4c 87       	std	Y+12, r20	; 0x0c
    1b4c:	5d 87       	std	Y+13, r21	; 0x0d
    1b4e:	6e 87       	std	Y+14, r22	; 0x0e
    1b50:	7f 87       	std	Y+15, r23	; 0x0f
    1b52:	39 8b       	std	Y+17, r19	; 0x11
    1b54:	28 8b       	std	Y+16, r18	; 0x10
	f32 TickTime = NUMBER_0;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e0       	ldi	r26, 0x00	; 0
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	8f 83       	std	Y+7, r24	; 0x07
    1b60:	98 87       	std	Y+8, r25	; 0x08
    1b62:	a9 87       	std	Y+9, r26	; 0x09
    1b64:	ba 87       	std	Y+10, r27	; 0x0a
	f32 N = NUMBER_0;
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	8b 83       	std	Y+3, r24	; 0x03
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	ad 83       	std	Y+5, r26	; 0x05
    1b74:	be 83       	std	Y+6, r27	; 0x06
	u16 counter = NUMBER_0;
    1b76:	1a 82       	std	Y+2, r1	; 0x02
    1b78:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1b7a:	9e 01       	movw	r18, r28
    1b7c:	29 5f       	subi	r18, 0xF9	; 249
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b82:	b9 01       	movw	r22, r18
    1b84:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_voidSetOCR1AValue(CTC_DELAY_CONST);
    1b88:	87 ec       	ldi	r24, 0xC7	; 199
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 02 0c 	call	0x1804	; 0x1804 <MCAL_T1_voidSetOCR1AValue>
	if (LOC_fl32NumOFSecond <= 0 || LOC_fl32NumOFSecond > 0) {
    1b90:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b92:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b96:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	64 f4       	brge	.+24     	; 0x1bc0 <MCAL_T1_voidDelayCTCMode+0x8c>
    1ba8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1baa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	64 f5       	brge	.+88     	; 0x1c18 <MCAL_T1_voidDelayCTCMode+0xe4>
		N = ((CTC_DELAY_CONST + NUMBER_1) * TickTime);
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc2:	98 85       	ldd	r25, Y+8	; 0x08
    1bc4:	a9 85       	ldd	r26, Y+9	; 0x09
    1bc6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	48 e4       	ldi	r20, 0x48	; 72
    1bd2:	53 e4       	ldi	r21, 0x43	; 67
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	ad 83       	std	Y+5, r26	; 0x05
    1be2:	be 83       	std	Y+6, r27	; 0x06
		counter = (LOC_fl32NumOFSecond / N);
    1be4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1be6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1be8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	4d 81       	ldd	r20, Y+5	; 0x05
    1bf2:	5e 81       	ldd	r21, Y+6	; 0x06
    1bf4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu16Counter = counter;
    1c0c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c0e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
	} else {
		//NOTING
	}
}
    1c18:	61 96       	adiw	r28, 0x11	; 17
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <MCAL_T1_voidSetTriggerEdge>:
//ICU EDGE
void MCAL_T1_voidSetTriggerEdge(u8 LOC_u8TriggerEdge) {
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8TriggerEdge <= RISING_EDGE) {
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	a8 f4       	brcc	.+42     	; 0x1c66 <MCAL_T1_voidSetTriggerEdge+0x3c>
		if (LOC_u8TriggerEdge == RISING_EDGE) {
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	41 f4       	brne	.+16     	; 0x1c52 <MCAL_T1_voidSetTriggerEdge+0x28>
			SET_BIT(TCCR1B, PIN6);
    1c42:	ae e4       	ldi	r26, 0x4E	; 78
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ee e4       	ldi	r30, 0x4E	; 78
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 64       	ori	r24, 0x40	; 64
    1c4e:	8c 93       	st	X, r24
    1c50:	0a c0       	rjmp	.+20     	; 0x1c66 <MCAL_T1_voidSetTriggerEdge+0x3c>
		} else if (LOC_u8TriggerEdge == FALLING_EDGE) {
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	88 23       	and	r24, r24
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <MCAL_T1_voidSetTriggerEdge+0x3c>
			CLR_BIT(TCCR1B, PIN6);
    1c58:	ae e4       	ldi	r26, 0x4E	; 78
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ee e4       	ldi	r30, 0x4E	; 78
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 7b       	andi	r24, 0xBF	; 191
    1c64:	8c 93       	st	X, r24
			//NOTHING
		}
	} else {
		//NOTHING
	}
}
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <MCAL_T1_u8T1_Callback>:
u8 MCAL_T1_u8T1_Callback(void (*ptr)(void)) {
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <MCAL_T1_u8T1_Callback+0x6>
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0') {
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	39 f0       	breq	.+14     	; 0x1c98 <MCAL_T1_u8T1_Callback+0x2a>
		Gptr_3 = ptr;
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	90 93 13 02 	sts	0x0213, r25
    1c92:	80 93 12 02 	sts	0x0212, r24
		LOC_u8ReturnValue = E_OK;
    1c96:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_u8ReturnValue;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1cd0:	80 91 12 02 	lds	r24, 0x0212
    1cd4:	90 91 13 02 	lds	r25, 0x0213
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <__vector_9+0x40>
		Gptr_3();
    1cdc:	e0 91 12 02 	lds	r30, 0x0212
    1ce0:	f0 91 13 02 	lds	r31, 0x0213
    1ce4:	09 95       	icall
	}
}
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	bf 91       	pop	r27
    1cf0:	af 91       	pop	r26
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	7f 91       	pop	r23
    1cf8:	6f 91       	pop	r22
    1cfa:	5f 91       	pop	r21
    1cfc:	4f 91       	pop	r20
    1cfe:	3f 91       	pop	r19
    1d00:	2f 91       	pop	r18
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <TIMER1_COMPA_vect>:
ISR(TIMER1_COMPA_vect) {
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1d36:	80 91 12 02 	lds	r24, 0x0212
    1d3a:	90 91 13 02 	lds	r25, 0x0213
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <TIMER1_COMPA_vect+0x40>
		Gptr_3();
    1d42:	e0 91 12 02 	lds	r30, 0x0212
    1d46:	f0 91 13 02 	lds	r31, 0x0213
    1d4a:	09 95       	icall
	}
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <__vector_8>:
ISR(TIMER1_COMPB_vect) {
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1d9c:	80 91 12 02 	lds	r24, 0x0212
    1da0:	90 91 13 02 	lds	r25, 0x0213
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	29 f0       	breq	.+10     	; 0x1db2 <__vector_8+0x40>
		Gptr_3();
    1da8:	e0 91 12 02 	lds	r30, 0x0212
    1dac:	f0 91 13 02 	lds	r31, 0x0213
    1db0:	09 95       	icall
	}
}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__vector_6>:
ISR(TIMER1_CAPT_vect) {
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	11 24       	eor	r1, r1
    1de2:	2f 93       	push	r18
    1de4:	3f 93       	push	r19
    1de6:	4f 93       	push	r20
    1de8:	5f 93       	push	r21
    1dea:	6f 93       	push	r22
    1dec:	7f 93       	push	r23
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    1df6:	ef 93       	push	r30
    1df8:	ff 93       	push	r31
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1e02:	80 91 12 02 	lds	r24, 0x0212
    1e06:	90 91 13 02 	lds	r25, 0x0213
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <__vector_6+0x40>
		Gptr_3();
    1e0e:	e0 91 12 02 	lds	r30, 0x0212
    1e12:	f0 91 13 02 	lds	r31, 0x0213
    1e16:	09 95       	icall
	}
}
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <MCAL_T1_FPWM_10bitRES>:

void MCAL_T1_FPWM_10bitRES(u8 copy_u8Channel, u8 copy_u8Duty) {
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <MCAL_T1_FPWM_10bitRES+0xa>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <MCAL_T1_FPWM_10bitRES+0xc>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <MCAL_T1_FPWM_10bitRES+0xe>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	6e 83       	std	Y+6, r22	; 0x06
	f32 LOC_fl32tickTime = 0;
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	ab 83       	std	Y+3, r26	; 0x03
    1e62:	bc 83       	std	Y+4, r27	; 0x04
	//Set Mode
	MCAL_T1_u8T1Init(PWM_PHASE_CORRECT_10bit);
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	0e 94 0a 08 	call	0x1014	; 0x1014 <MCAL_T1_u8T1Init>
	//Select Prescaler
	MCAL_T1_u8T1Prescaler(PRESCALLING_64, &LOC_fl32tickTime);
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	9e 01       	movw	r18, r28
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	b9 01       	movw	r22, r18
    1e74:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE, copy_u8Channel);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e7c:	0e 94 43 0b 	call	0x1686	; 0x1686 <MCAL_T1_u8T1CompareOutputMode>
	if (copy_u8Channel == CHENNEL_A) {
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	88 23       	and	r24, r24
    1e84:	19 f5       	brne	.+70     	; 0x1ecc <MCAL_T1_FPWM_10bitRES+0x8e>
		OCR1A = copy_u8Duty * 10.23;
    1e86:	0a e4       	ldi	r16, 0x4A	; 74
    1e88:	10 e0       	ldi	r17, 0x00	; 0
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	aa 27       	eor	r26, r26
    1e92:	97 fd       	sbrc	r25, 7
    1e94:	a0 95       	com	r26
    1e96:	ba 2f       	mov	r27, r26
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	24 e1       	ldi	r18, 0x14	; 20
    1eaa:	3e ea       	ldi	r19, 0xAE	; 174
    1eac:	43 e2       	ldi	r20, 0x23	; 35
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	80 83       	st	Z, r24
    1eca:	25 c0       	rjmp	.+74     	; 0x1f16 <MCAL_T1_FPWM_10bitRES+0xd8>
	} else if (copy_u8Channel == CHENNEL_B) {
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	11 f5       	brne	.+68     	; 0x1f16 <MCAL_T1_FPWM_10bitRES+0xd8>
		OCR1B = copy_u8Duty * 10.23;
    1ed2:	08 e4       	ldi	r16, 0x48	; 72
    1ed4:	10 e0       	ldi	r17, 0x00	; 0
    1ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	aa 27       	eor	r26, r26
    1ede:	97 fd       	sbrc	r25, 7
    1ee0:	a0 95       	com	r26
    1ee2:	ba 2f       	mov	r27, r26
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	24 e1       	ldi	r18, 0x14	; 20
    1ef6:	3e ea       	ldi	r19, 0xAE	; 174
    1ef8:	43 e2       	ldi	r20, 0x23	; 35
    1efa:	51 e4       	ldi	r21, 0x41	; 65
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	f8 01       	movw	r30, r16
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24

	} else {
		//NOTHING
	}
}
    1f16:	26 96       	adiw	r28, 0x06	; 6
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	08 95       	ret

00001f2c <MCAL_Timer0_Init>:
void (*Gptr3)(void)= '\0' ;
f32 Glob_TickTime;
u16 Start = 0;
u16 Counter = 0;

void MCAL_Timer0_Init(u8 Loc_u8Mode, u8 Loc_u8Prescaller,u8 Loc_u8OC0Mode) {
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <MCAL_Timer0_Init+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <MCAL_Timer0_Init+0x8>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	6b 83       	std	Y+3, r22	; 0x03
    1f3c:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);
    1f42:	af e5       	ldi	r26, 0x5F	; 95
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ef e5       	ldi	r30, 0x5F	; 95
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 68       	ori	r24, 0x80	; 128
    1f4e:	8c 93       	st	X, r24
	if (Loc_u8Mode == Normal_Mode) {
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	88 23       	and	r24, r24
    1f54:	b1 f4       	brne	.+44     	; 0x1f82 <MCAL_Timer0_Init+0x56>
		CLR_BIT(TCCR0, 3);
    1f56:	a3 e5       	ldi	r26, 0x53	; 83
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e3 e5       	ldi	r30, 0x53	; 83
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	87 7f       	andi	r24, 0xF7	; 247
    1f62:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1f64:	a3 e5       	ldi	r26, 0x53	; 83
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e3 e5       	ldi	r30, 0x53	; 83
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8f 7b       	andi	r24, 0xBF	; 191
    1f70:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 0);
    1f72:	a9 e5       	ldi	r26, 0x59	; 89
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e9 e5       	ldi	r30, 0x59	; 89
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	81 60       	ori	r24, 0x01	; 1
    1f7e:	8c 93       	st	X, r24
    1f80:	35 c0       	rjmp	.+106    	; 0x1fec <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == CTC_Mode) {
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	b1 f4       	brne	.+44     	; 0x1fb4 <MCAL_Timer0_Init+0x88>
		SET_BIT(TCCR0, 3);
    1f88:	a3 e5       	ldi	r26, 0x53	; 83
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e3 e5       	ldi	r30, 0x53	; 83
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1f96:	a3 e5       	ldi	r26, 0x53	; 83
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8f 7b       	andi	r24, 0xBF	; 191
    1fa2:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 1);
    1fa4:	a9 e5       	ldi	r26, 0x59	; 89
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e9 e5       	ldi	r30, 0x59	; 89
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	82 60       	ori	r24, 0x02	; 2
    1fb0:	8c 93       	st	X, r24
    1fb2:	1c c0       	rjmp	.+56     	; 0x1fec <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == PWM_Mode) {
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	79 f4       	brne	.+30     	; 0x1fd8 <MCAL_Timer0_Init+0xac>
		CLR_BIT(TCCR0, 3);
    1fba:	a3 e5       	ldi	r26, 0x53	; 83
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e3 e5       	ldi	r30, 0x53	; 83
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	87 7f       	andi	r24, 0xF7	; 247
    1fc6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    1fc8:	a3 e5       	ldi	r26, 0x53	; 83
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e3 e5       	ldi	r30, 0x53	; 83
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 64       	ori	r24, 0x40	; 64
    1fd4:	8c 93       	st	X, r24
    1fd6:	0a c0       	rjmp	.+20     	; 0x1fec <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == FastPWM_Mode) {
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	83 30       	cpi	r24, 0x03	; 3
    1fdc:	39 f4       	brne	.+14     	; 0x1fec <MCAL_Timer0_Init+0xc0>
//		SET_BIT(TCCR0, 3);
//		SET_BIT(TCCR0, 6);
		SET_BIT(TIMSK, 1);
    1fde:	a9 e5       	ldi	r26, 0x59	; 89
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e9 e5       	ldi	r30, 0x59	; 89
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	82 60       	ori	r24, 0x02	; 2
    1fea:	8c 93       	st	X, r24
	}
	if (Loc_u8Prescaller == NoPrescaller) {
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	88 23       	and	r24, r24
    1ff0:	b9 f4       	brne	.+46     	; 0x2020 <MCAL_Timer0_Init+0xf4>
		CLR_BIT(TCCR0, 0);
    1ff2:	a3 e5       	ldi	r26, 0x53	; 83
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e3 e5       	ldi	r30, 0x53	; 83
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8e 7f       	andi	r24, 0xFE	; 254
    1ffe:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2000:	a3 e5       	ldi	r26, 0x53	; 83
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e3 e5       	ldi	r30, 0x53	; 83
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8d 7f       	andi	r24, 0xFD	; 253
    200c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    200e:	a3 e5       	ldi	r26, 0x53	; 83
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e3 e5       	ldi	r30, 0x53	; 83
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8b 7f       	andi	r24, 0xFB	; 251
    201a:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	f1 c0       	rjmp	.+482    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1) {
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	19 f5       	brne	.+70     	; 0x206c <MCAL_Timer0_Init+0x140>
		SET_BIT(TCCR0, 0);
    2026:	a3 e5       	ldi	r26, 0x53	; 83
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e3 e5       	ldi	r30, 0x53	; 83
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2034:	a3 e5       	ldi	r26, 0x53	; 83
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e3 e5       	ldi	r30, 0x53	; 83
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8d 7f       	andi	r24, 0xFD	; 253
    2040:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    2042:	a3 e5       	ldi	r26, 0x53	; 83
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e3 e5       	ldi	r30, 0x53	; 83
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8b 7f       	andi	r24, 0xFB	; 251
    204e:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1_Value / (f32) CPU_Frequancy;
    2050:	8d eb       	ldi	r24, 0xBD	; 189
    2052:	97 e3       	ldi	r25, 0x37	; 55
    2054:	a6 e8       	ldi	r26, 0x86	; 134
    2056:	b3 e3       	ldi	r27, 0x33	; 51
    2058:	80 93 36 02 	sts	0x0236, r24
    205c:	90 93 37 02 	sts	0x0237, r25
    2060:	a0 93 38 02 	sts	0x0238, r26
    2064:	b0 93 39 02 	sts	0x0239, r27
		LOC_u8ReturnValue = E_OK;
    2068:	19 82       	std	Y+1, r1	; 0x01
    206a:	cb c0       	rjmp	.+406    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_8) {
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	82 30       	cpi	r24, 0x02	; 2
    2070:	19 f5       	brne	.+70     	; 0x20b8 <MCAL_Timer0_Init+0x18c>
		CLR_BIT(TCCR0, 0);
    2072:	a3 e5       	ldi	r26, 0x53	; 83
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e3 e5       	ldi	r30, 0x53	; 83
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8e 7f       	andi	r24, 0xFE	; 254
    207e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    2080:	a3 e5       	ldi	r26, 0x53	; 83
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e3 e5       	ldi	r30, 0x53	; 83
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	82 60       	ori	r24, 0x02	; 2
    208c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    208e:	a3 e5       	ldi	r26, 0x53	; 83
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e3 e5       	ldi	r30, 0x53	; 83
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8b 7f       	andi	r24, 0xFB	; 251
    209a:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller8_Value / (f32) CPU_Frequancy;
    209c:	8d eb       	ldi	r24, 0xBD	; 189
    209e:	97 e3       	ldi	r25, 0x37	; 55
    20a0:	a6 e0       	ldi	r26, 0x06	; 6
    20a2:	b5 e3       	ldi	r27, 0x35	; 53
    20a4:	80 93 36 02 	sts	0x0236, r24
    20a8:	90 93 37 02 	sts	0x0237, r25
    20ac:	a0 93 38 02 	sts	0x0238, r26
    20b0:	b0 93 39 02 	sts	0x0239, r27
		LOC_u8ReturnValue = E_OK;
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	a5 c0       	rjmp	.+330    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_64) {
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	83 30       	cpi	r24, 0x03	; 3
    20bc:	19 f5       	brne	.+70     	; 0x2104 <MCAL_Timer0_Init+0x1d8>
		SET_BIT(TCCR0, 0);
    20be:	a3 e5       	ldi	r26, 0x53	; 83
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e3 e5       	ldi	r30, 0x53	; 83
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	81 60       	ori	r24, 0x01	; 1
    20ca:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    20cc:	a3 e5       	ldi	r26, 0x53	; 83
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e3 e5       	ldi	r30, 0x53	; 83
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	82 60       	ori	r24, 0x02	; 2
    20d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    20da:	a3 e5       	ldi	r26, 0x53	; 83
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e5       	ldi	r30, 0x53	; 83
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8b 7f       	andi	r24, 0xFB	; 251
    20e6:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller64_Value / (f32) CPU_Frequancy;
    20e8:	8d eb       	ldi	r24, 0xBD	; 189
    20ea:	97 e3       	ldi	r25, 0x37	; 55
    20ec:	a6 e8       	ldi	r26, 0x86	; 134
    20ee:	b6 e3       	ldi	r27, 0x36	; 54
    20f0:	80 93 36 02 	sts	0x0236, r24
    20f4:	90 93 37 02 	sts	0x0237, r25
    20f8:	a0 93 38 02 	sts	0x0238, r26
    20fc:	b0 93 39 02 	sts	0x0239, r27
		LOC_u8ReturnValue = E_OK;
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	7f c0       	rjmp	.+254    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_256) {
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	19 f5       	brne	.+70     	; 0x2150 <MCAL_Timer0_Init+0x224>
		CLR_BIT(TCCR0, 0);
    210a:	a3 e5       	ldi	r26, 0x53	; 83
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e3 e5       	ldi	r30, 0x53	; 83
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8e 7f       	andi	r24, 0xFE	; 254
    2116:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2118:	a3 e5       	ldi	r26, 0x53	; 83
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e3 e5       	ldi	r30, 0x53	; 83
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8d 7f       	andi	r24, 0xFD	; 253
    2124:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2126:	a3 e5       	ldi	r26, 0x53	; 83
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e3 e5       	ldi	r30, 0x53	; 83
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	84 60       	ori	r24, 0x04	; 4
    2132:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller256_Value / (f32) CPU_Frequancy;
    2134:	8d eb       	ldi	r24, 0xBD	; 189
    2136:	97 e3       	ldi	r25, 0x37	; 55
    2138:	a6 e8       	ldi	r26, 0x86	; 134
    213a:	b7 e3       	ldi	r27, 0x37	; 55
    213c:	80 93 36 02 	sts	0x0236, r24
    2140:	90 93 37 02 	sts	0x0237, r25
    2144:	a0 93 38 02 	sts	0x0238, r26
    2148:	b0 93 39 02 	sts	0x0239, r27
		LOC_u8ReturnValue = E_OK;
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	59 c0       	rjmp	.+178    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1024) {
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	85 30       	cpi	r24, 0x05	; 5
    2154:	19 f5       	brne	.+70     	; 0x219c <MCAL_Timer0_Init+0x270>
		SET_BIT(TCCR0, 0);
    2156:	a3 e5       	ldi	r26, 0x53	; 83
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e3 e5       	ldi	r30, 0x53	; 83
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	81 60       	ori	r24, 0x01	; 1
    2162:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2164:	a3 e5       	ldi	r26, 0x53	; 83
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e3 e5       	ldi	r30, 0x53	; 83
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8d 7f       	andi	r24, 0xFD	; 253
    2170:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2172:	a3 e5       	ldi	r26, 0x53	; 83
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e3 e5       	ldi	r30, 0x53	; 83
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	84 60       	ori	r24, 0x04	; 4
    217e:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1024_Value / (f32) CPU_Frequancy;
    2180:	8d eb       	ldi	r24, 0xBD	; 189
    2182:	97 e3       	ldi	r25, 0x37	; 55
    2184:	a6 e8       	ldi	r26, 0x86	; 134
    2186:	b8 e3       	ldi	r27, 0x38	; 56
    2188:	80 93 36 02 	sts	0x0236, r24
    218c:	90 93 37 02 	sts	0x0237, r25
    2190:	a0 93 38 02 	sts	0x0238, r26
    2194:	b0 93 39 02 	sts	0x0239, r27
		LOC_u8ReturnValue = E_OK;
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	33 c0       	rjmp	.+102    	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_falling_edge) {
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	86 30       	cpi	r24, 0x06	; 6
    21a0:	b9 f4       	brne	.+46     	; 0x21d0 <MCAL_Timer0_Init+0x2a4>
		CLR_BIT(TCCR0, 0);
    21a2:	a3 e5       	ldi	r26, 0x53	; 83
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e3 e5       	ldi	r30, 0x53	; 83
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8e 7f       	andi	r24, 0xFE	; 254
    21ae:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    21b0:	a3 e5       	ldi	r26, 0x53	; 83
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e3 e5       	ldi	r30, 0x53	; 83
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	82 60       	ori	r24, 0x02	; 2
    21bc:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e3 e5       	ldi	r30, 0x53	; 83
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	84 60       	ori	r24, 0x04	; 4
    21ca:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    21cc:	19 82       	std	Y+1, r1	; 0x01
    21ce:	19 c0       	rjmp	.+50     	; 0x2202 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_rising_edge) {
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	87 30       	cpi	r24, 0x07	; 7
    21d4:	b1 f4       	brne	.+44     	; 0x2202 <MCAL_Timer0_Init+0x2d6>
		SET_BIT(TCCR0, 0);
    21d6:	a3 e5       	ldi	r26, 0x53	; 83
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e3 e5       	ldi	r30, 0x53	; 83
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	81 60       	ori	r24, 0x01	; 1
    21e2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    21e4:	a3 e5       	ldi	r26, 0x53	; 83
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e3 e5       	ldi	r30, 0x53	; 83
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	82 60       	ori	r24, 0x02	; 2
    21f0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    21f2:	a3 e5       	ldi	r26, 0x53	; 83
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e3 e5       	ldi	r30, 0x53	; 83
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	84 60       	ori	r24, 0x04	; 4
    21fe:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    2200:	19 82       	std	Y+1, r1	; 0x01
	} else {
		//NOTHING
	}
	if (Loc_u8OC0Mode == Disconnected) {
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	88 23       	and	r24, r24
    2206:	79 f4       	brne	.+30     	; 0x2226 <MCAL_Timer0_Init+0x2fa>
			CLR_BIT(TCCR0, 4);
    2208:	a3 e5       	ldi	r26, 0x53	; 83
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e3 e5       	ldi	r30, 0x53	; 83
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8f 7e       	andi	r24, 0xEF	; 239
    2214:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    2216:	a3 e5       	ldi	r26, 0x53	; 83
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e3 e5       	ldi	r30, 0x53	; 83
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 7d       	andi	r24, 0xDF	; 223
    2222:	8c 93       	st	X, r24
    2224:	43 c0       	rjmp	.+134    	; 0x22ac <MCAL_Timer0_Init+0x380>
		} else if (Loc_u8OC0Mode == Reserved) {
    2226:	8c 81       	ldd	r24, Y+4	; 0x04
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	79 f4       	brne	.+30     	; 0x224a <MCAL_Timer0_Init+0x31e>
			SET_BIT(TCCR0, 4);
    222c:	a3 e5       	ldi	r26, 0x53	; 83
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e3 e5       	ldi	r30, 0x53	; 83
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	80 61       	ori	r24, 0x10	; 16
    2238:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8f 7d       	andi	r24, 0xDF	; 223
    2246:	8c 93       	st	X, r24
    2248:	31 c0       	rjmp	.+98     	; 0x22ac <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Non_Inverted) {
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	b1 f4       	brne	.+44     	; 0x227c <MCAL_Timer0_Init+0x350>
			SET_BIT(TCCR0, 5);
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 62       	ori	r24, 0x20	; 32
    225c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 4);
    225e:	a3 e5       	ldi	r26, 0x53	; 83
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e3 e5       	ldi	r30, 0x53	; 83
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8f 7e       	andi	r24, 0xEF	; 239
    226a:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    226c:	a7 e3       	ldi	r26, 0x37	; 55
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e7 e3       	ldi	r30, 0x37	; 55
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	88 60       	ori	r24, 0x08	; 8
    2278:	8c 93       	st	X, r24
    227a:	18 c0       	rjmp	.+48     	; 0x22ac <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Inverted) {
    227c:	8c 81       	ldd	r24, Y+4	; 0x04
    227e:	83 30       	cpi	r24, 0x03	; 3
    2280:	a9 f4       	brne	.+42     	; 0x22ac <MCAL_Timer0_Init+0x380>
			SET_BIT(TCCR0, 4);
    2282:	a3 e5       	ldi	r26, 0x53	; 83
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e3 e5       	ldi	r30, 0x53	; 83
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	80 61       	ori	r24, 0x10	; 16
    228e:	8c 93       	st	X, r24
			SET_BIT(TCCR0, 5);
    2290:	a3 e5       	ldi	r26, 0x53	; 83
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e3 e5       	ldi	r30, 0x53	; 83
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	80 62       	ori	r24, 0x20	; 32
    229c:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    229e:	a7 e3       	ldi	r26, 0x37	; 55
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e7 e3       	ldi	r30, 0x37	; 55
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	88 60       	ori	r24, 0x08	; 8
    22aa:	8c 93       	st	X, r24
		}
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <MCAL_Timer0_SetPreloadValue>:
void MCAL_Timer0_SetPreloadValue(u8 Loc_u8Value) {
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	0f 92       	push	r0
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Loc_u8Value;
    22c6:	e2 e5       	ldi	r30, 0x52	; 82
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	80 83       	st	Z, r24
}
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <MCAL_Timer0_SetCompareValue>:
void MCAL_Timer0_SetCompareValue(u8 Loc_u8Value) {
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	0f 92       	push	r0
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Loc_u8Value;
    22e2:	ec e5       	ldi	r30, 0x5C	; 92
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	80 83       	st	Z, r24
}
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <MCAL_Timer0_EnableNormalMode>:
void MCAL_Timer0_EnableNormalMode() {
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 0);
    22fa:	a9 e5       	ldi	r26, 0x59	; 89
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e9 e5       	ldi	r30, 0x59	; 89
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	81 60       	ori	r24, 0x01	; 1
    2306:	8c 93       	st	X, r24
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <MCAL_Timer0_DisableNormalMode>:
void MCAL_Timer0_DisableNormalMode() {
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 0);
    2316:	a9 e5       	ldi	r26, 0x59	; 89
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e9 e5       	ldi	r30, 0x59	; 89
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8e 7f       	andi	r24, 0xFE	; 254
    2322:	8c 93       	st	X, r24
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <MCAL_Timer0_EnableCTCMode>:
void MCAL_Timer0_EnableCTCMode() {
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 1);
    2332:	a9 e5       	ldi	r26, 0x59	; 89
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e9 e5       	ldi	r30, 0x59	; 89
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	82 60       	ori	r24, 0x02	; 2
    233e:	8c 93       	st	X, r24
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <MCAL_Timer0_DisableCTCMode>:
void MCAL_Timer0_DisableCTCMode() {
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 1);
    234e:	a9 e5       	ldi	r26, 0x59	; 89
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e9 e5       	ldi	r30, 0x59	; 89
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8d 7f       	andi	r24, 0xFD	; 253
    235a:	8c 93       	st	X, r24
}
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <MCAL_Timer0_Delayms_NormalMode>:

void MCAL_Timer0_Delayms_NormalMode(u32 Loc_u32MilliSeconds) {
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	28 97       	sbiw	r28, 0x08	; 8
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	6d 83       	std	Y+5, r22	; 0x05
    2378:	7e 83       	std	Y+6, r23	; 0x06
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
	u32 N = 0;
    237e:	19 82       	std	Y+1, r1	; 0x01
    2380:	1a 82       	std	Y+2, r1	; 0x02
    2382:	1b 82       	std	Y+3, r1	; 0x03
    2384:	1c 82       	std	Y+4, r1	; 0x04
	N = (Loc_u32MilliSeconds / 1000.0) / (f32) Glob_TickTime;
    2386:	6d 81       	ldd	r22, Y+5	; 0x05
    2388:	7e 81       	ldd	r23, Y+6	; 0x06
    238a:	8f 81       	ldd	r24, Y+7	; 0x07
    238c:	98 85       	ldd	r25, Y+8	; 0x08
    238e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a e7       	ldi	r20, 0x7A	; 122
    23a0:	54 e4       	ldi	r21, 0x44	; 68
    23a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	20 91 36 02 	lds	r18, 0x0236
    23ae:	30 91 37 02 	lds	r19, 0x0237
    23b2:	40 91 38 02 	lds	r20, 0x0238
    23b6:	50 91 39 02 	lds	r21, 0x0239
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	ab 83       	std	Y+3, r26	; 0x03
    23d8:	bc 83       	std	Y+4, r27	; 0x04
	Start = N % 256;
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	90 70       	andi	r25, 0x00	; 0
    23e0:	90 93 19 02 	sts	0x0219, r25
    23e4:	80 93 18 02 	sts	0x0218, r24
	if (Start == 0) {
    23e8:	80 91 18 02 	lds	r24, 0x0218
    23ec:	90 91 19 02 	lds	r25, 0x0219
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	99 f4       	brne	.+38     	; 0x241a <MCAL_Timer0_Delayms_NormalMode+0xb8>
		MCAL_Timer0_SetPreloadValue(Start);
    23f4:	80 91 18 02 	lds	r24, 0x0218
    23f8:	90 91 19 02 	lds	r25, 0x0219
    23fc:	0e 94 5d 11 	call	0x22ba	; 0x22ba <MCAL_Timer0_SetPreloadValue>
		Counter = N / 256;
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	ab 81       	ldd	r26, Y+3	; 0x03
    2406:	bc 81       	ldd	r27, Y+4	; 0x04
    2408:	89 2f       	mov	r24, r25
    240a:	9a 2f       	mov	r25, r26
    240c:	ab 2f       	mov	r26, r27
    240e:	bb 27       	eor	r27, r27
    2410:	90 93 1b 02 	sts	0x021B, r25
    2414:	80 93 1a 02 	sts	0x021A, r24
    2418:	19 c0       	rjmp	.+50     	; 0x244c <MCAL_Timer0_Delayms_NormalMode+0xea>
	} else if (Start != 0) {
    241a:	80 91 18 02 	lds	r24, 0x0218
    241e:	90 91 19 02 	lds	r25, 0x0219
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	99 f0       	breq	.+38     	; 0x244c <MCAL_Timer0_Delayms_NormalMode+0xea>
		MCAL_Timer0_SetPreloadValue(Start);
    2426:	80 91 18 02 	lds	r24, 0x0218
    242a:	90 91 19 02 	lds	r25, 0x0219
    242e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <MCAL_Timer0_SetPreloadValue>
		Counter = ((N / 256) + 1);
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	ab 81       	ldd	r26, Y+3	; 0x03
    2438:	bc 81       	ldd	r27, Y+4	; 0x04
    243a:	89 2f       	mov	r24, r25
    243c:	9a 2f       	mov	r25, r26
    243e:	ab 2f       	mov	r26, r27
    2440:	bb 27       	eor	r27, r27
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	90 93 1b 02 	sts	0x021B, r25
    2448:	80 93 1a 02 	sts	0x021A, r24
	} else {
		//NOTHING
	}
}
    244c:	28 96       	adiw	r28, 0x08	; 8
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <MCAL_Timer0_Delayms_CTCMode>:
void MCAL_Timer0_Delayms_CTCMode(u32 Loc_u32MilliSeconds) {
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	29 97       	sbiw	r28, 0x09	; 9
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	6e 83       	std	Y+6, r22	; 0x06
    2474:	7f 83       	std	Y+7, r23	; 0x07
    2476:	88 87       	std	Y+8, r24	; 0x08
    2478:	99 87       	std	Y+9, r25	; 0x09
	u8 LOC_u8ReturnValue = E_NOT_OK;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	8d 83       	std	Y+5, r24	; 0x05
	f32 N = 0;
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e0       	ldi	r26, 0x00	; 0
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	ab 83       	std	Y+3, r26	; 0x03
    248c:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_Timer0_SetCompareValue(CompareStartValue);
    248e:	87 ec       	ldi	r24, 0xC7	; 199
    2490:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <MCAL_Timer0_SetCompareValue>
	N = ((CompareStartValue + 1) * Glob_TickTime);
    2494:	80 91 36 02 	lds	r24, 0x0236
    2498:	90 91 37 02 	lds	r25, 0x0237
    249c:	a0 91 38 02 	lds	r26, 0x0238
    24a0:	b0 91 39 02 	lds	r27, 0x0239
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	48 e4       	ldi	r20, 0x48	; 72
    24ae:	53 e4       	ldi	r21, 0x43	; 67
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	ab 83       	std	Y+3, r26	; 0x03
    24be:	bc 83       	std	Y+4, r27	; 0x04
	Counter = ((Loc_u32MilliSeconds/1000.0) / N);
    24c0:	6e 81       	ldd	r22, Y+6	; 0x06
    24c2:	7f 81       	ldd	r23, Y+7	; 0x07
    24c4:	88 85       	ldd	r24, Y+8	; 0x08
    24c6:	99 85       	ldd	r25, Y+9	; 0x09
    24c8:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a e7       	ldi	r20, 0x7A	; 122
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	29 81       	ldd	r18, Y+1	; 0x01
    24ea:	3a 81       	ldd	r19, Y+2	; 0x02
    24ec:	4b 81       	ldd	r20, Y+3	; 0x03
    24ee:	5c 81       	ldd	r21, Y+4	; 0x04
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	90 93 1b 02 	sts	0x021B, r25
    2508:	80 93 1a 02 	sts	0x021A, r24

	LOC_u8ReturnValue = E_OK;
    250c:	1d 82       	std	Y+5, r1	; 0x05
}
    250e:	29 96       	adiw	r28, 0x09	; 9
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <MCAL_Timer0_CallBack>:

void MCAL_Timer0_CallBack(void (*ptr)(void)) {
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <MCAL_Timer0_CallBack+0x6>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	31 f0       	breq	.+12     	; 0x2542 <MCAL_Timer0_CallBack+0x22>
		Gptr3 = ptr;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	90 93 17 02 	sts	0x0217, r25
    253e:	80 93 16 02 	sts	0x0216, r24
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <__vector_11>:

ISR(TIMER0_OVF_vect) {
    254c:	1f 92       	push	r1
    254e:	0f 92       	push	r0
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	0f 92       	push	r0
    2554:	11 24       	eor	r1, r1
    2556:	2f 93       	push	r18
    2558:	3f 93       	push	r19
    255a:	4f 93       	push	r20
    255c:	5f 93       	push	r21
    255e:	6f 93       	push	r22
    2560:	7f 93       	push	r23
    2562:	8f 93       	push	r24
    2564:	9f 93       	push	r25
    2566:	af 93       	push	r26
    2568:	bf 93       	push	r27
    256a:	ef 93       	push	r30
    256c:	ff 93       	push	r31
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    2576:	80 91 16 02 	lds	r24, 0x0216
    257a:	90 91 17 02 	lds	r25, 0x0217
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	29 f0       	breq	.+10     	; 0x258c <__vector_11+0x40>
		Gptr3();
    2582:	e0 91 16 02 	lds	r30, 0x0216
    2586:	f0 91 17 02 	lds	r31, 0x0217
    258a:	09 95       	icall
	Glob_u16OvfCounter++;
    258c:	80 91 14 02 	lds	r24, 0x0214
    2590:	90 91 15 02 	lds	r25, 0x0215
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	90 93 15 02 	sts	0x0215, r25
    259a:	80 93 14 02 	sts	0x0214, r24
}
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	ff 91       	pop	r31
    25a4:	ef 91       	pop	r30
    25a6:	bf 91       	pop	r27
    25a8:	af 91       	pop	r26
    25aa:	9f 91       	pop	r25
    25ac:	8f 91       	pop	r24
    25ae:	7f 91       	pop	r23
    25b0:	6f 91       	pop	r22
    25b2:	5f 91       	pop	r21
    25b4:	4f 91       	pop	r20
    25b6:	3f 91       	pop	r19
    25b8:	2f 91       	pop	r18
    25ba:	0f 90       	pop	r0
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	0f 90       	pop	r0
    25c0:	1f 90       	pop	r1
    25c2:	18 95       	reti

000025c4 <__vector_10>:
ISR(TIMER0_COMP_vect) {
    25c4:	1f 92       	push	r1
    25c6:	0f 92       	push	r0
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	0f 92       	push	r0
    25cc:	11 24       	eor	r1, r1
    25ce:	2f 93       	push	r18
    25d0:	3f 93       	push	r19
    25d2:	4f 93       	push	r20
    25d4:	5f 93       	push	r21
    25d6:	6f 93       	push	r22
    25d8:	7f 93       	push	r23
    25da:	8f 93       	push	r24
    25dc:	9f 93       	push	r25
    25de:	af 93       	push	r26
    25e0:	bf 93       	push	r27
    25e2:	ef 93       	push	r30
    25e4:	ff 93       	push	r31
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    25ee:	80 91 16 02 	lds	r24, 0x0216
    25f2:	90 91 17 02 	lds	r25, 0x0217
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	29 f0       	breq	.+10     	; 0x2604 <__vector_10+0x40>
		Gptr3();
    25fa:	e0 91 16 02 	lds	r30, 0x0216
    25fe:	f0 91 17 02 	lds	r31, 0x0217
    2602:	09 95       	icall
}
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	ff 91       	pop	r31
    260a:	ef 91       	pop	r30
    260c:	bf 91       	pop	r27
    260e:	af 91       	pop	r26
    2610:	9f 91       	pop	r25
    2612:	8f 91       	pop	r24
    2614:	7f 91       	pop	r23
    2616:	6f 91       	pop	r22
    2618:	5f 91       	pop	r21
    261a:	4f 91       	pop	r20
    261c:	3f 91       	pop	r19
    261e:	2f 91       	pop	r18
    2620:	0f 90       	pop	r0
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	0f 90       	pop	r0
    2626:	1f 90       	pop	r1
    2628:	18 95       	reti

0000262a <MCAL_Interrupt_u8SetRegister>:

void (*Gptr0)(void)= '\0' ;
void (*Gptr1)(void)= '\0' ;
void (*Gptr2)(void)= '\0' ;

void MCAL_Interrupt_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <MCAL_Interrupt_u8SetRegister+0x6>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	8f 3f       	cpi	r24, 0xFF	; 255
    263c:	09 f5       	brne	.+66     	; 0x2680 <MCAL_Interrupt_u8SetRegister+0x56>
		if (Loc_u8PortID == Sreg) {
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	88 23       	and	r24, r24
    2642:	29 f4       	brne	.+10     	; 0x264e <MCAL_Interrupt_u8SetRegister+0x24>
			SREG = PORT_OUTPUT;
    2644:	ef e5       	ldi	r30, 0x5F	; 95
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	8f ef       	ldi	r24, 0xFF	; 255
    264a:	80 83       	st	Z, r24
    264c:	57 c0       	rjmp	.+174    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	29 f4       	brne	.+10     	; 0x265e <MCAL_Interrupt_u8SetRegister+0x34>
			GICR = PORT_OUTPUT;
    2654:	eb e5       	ldi	r30, 0x5B	; 91
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	80 83       	st	Z, r24
    265c:	4f c0       	rjmp	.+158    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	29 f4       	brne	.+10     	; 0x266e <MCAL_Interrupt_u8SetRegister+0x44>
			MCUCR = PORT_OUTPUT;
    2664:	e5 e5       	ldi	r30, 0x55	; 85
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	8f ef       	ldi	r24, 0xFF	; 255
    266a:	80 83       	st	Z, r24
    266c:	47 c0       	rjmp	.+142    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	83 30       	cpi	r24, 0x03	; 3
    2672:	09 f0       	breq	.+2      	; 0x2676 <MCAL_Interrupt_u8SetRegister+0x4c>
    2674:	43 c0       	rjmp	.+134    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_OUTPUT;
    2676:	e4 e5       	ldi	r30, 0x54	; 84
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	80 83       	st	Z, r24
    267e:	3e c0       	rjmp	.+124    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	88 23       	and	r24, r24
    2684:	e1 f4       	brne	.+56     	; 0x26be <MCAL_Interrupt_u8SetRegister+0x94>
		if (Loc_u8PortID == Sreg) {
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	88 23       	and	r24, r24
    268a:	21 f4       	brne	.+8      	; 0x2694 <MCAL_Interrupt_u8SetRegister+0x6a>
			SREG = PORT_INPUT;
    268c:	ef e5       	ldi	r30, 0x5F	; 95
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	10 82       	st	Z, r1
    2692:	34 c0       	rjmp	.+104    	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	21 f4       	brne	.+8      	; 0x26a2 <MCAL_Interrupt_u8SetRegister+0x78>
			GICR = PORT_INPUT;
    269a:	eb e5       	ldi	r30, 0x5B	; 91
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	10 82       	st	Z, r1
    26a0:	2d c0       	rjmp	.+90     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	21 f4       	brne	.+8      	; 0x26b0 <MCAL_Interrupt_u8SetRegister+0x86>
			MCUCR = PORT_INPUT;
    26a8:	e5 e5       	ldi	r30, 0x55	; 85
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	10 82       	st	Z, r1
    26ae:	26 c0       	rjmp	.+76     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	83 30       	cpi	r24, 0x03	; 3
    26b4:	19 f5       	brne	.+70     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_INPUT;
    26b6:	e4 e5       	ldi	r30, 0x54	; 84
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	10 82       	st	Z, r1
    26bc:	1f c0       	rjmp	.+62     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Sreg) {
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	88 23       	and	r24, r24
    26c2:	29 f4       	brne	.+10     	; 0x26ce <MCAL_Interrupt_u8SetRegister+0xa4>
			SREG = Loc_u8PortValue;
    26c4:	ef e5       	ldi	r30, 0x5F	; 95
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	80 83       	st	Z, r24
    26cc:	17 c0       	rjmp	.+46     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	29 f4       	brne	.+10     	; 0x26de <MCAL_Interrupt_u8SetRegister+0xb4>
			GICR = Loc_u8PortValue;
    26d4:	eb e5       	ldi	r30, 0x5B	; 91
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	80 83       	st	Z, r24
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	29 f4       	brne	.+10     	; 0x26ee <MCAL_Interrupt_u8SetRegister+0xc4>
			MCUCR = Loc_u8PortValue;
    26e4:	e5 e5       	ldi	r30, 0x55	; 85
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	80 83       	st	Z, r24
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	83 30       	cpi	r24, 0x03	; 3
    26f2:	21 f4       	brne	.+8      	; 0x26fc <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = Loc_u8PortValue;
    26f4:	e4 e5       	ldi	r30, 0x54	; 84
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	80 83       	st	Z, r24
		}
	}
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <MCAL_Interrupt_u8SetRegisterPin>:

void MCAL_Interrupt_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <MCAL_Interrupt_u8SetRegisterPin+0x6>
    270c:	0f 92       	push	r0
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	6a 83       	std	Y+2, r22	; 0x02
    2716:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	09 f0       	breq	.+2      	; 0x2720 <MCAL_Interrupt_u8SetRegisterPin+0x1a>
    271e:	5d c0       	rjmp	.+186    	; 0x27da <MCAL_Interrupt_u8SetRegisterPin+0xd4>
		if (Loc_u8PortID == Sreg) {
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 23       	and	r24, r24
    2724:	a1 f4       	brne	.+40     	; 0x274e <MCAL_Interrupt_u8SetRegisterPin+0x48>
			SET_BIT(SREG, Loc_u8PinID);
    2726:	af e5       	ldi	r26, 0x5F	; 95
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ef e5       	ldi	r30, 0x5F	; 95
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	48 2f       	mov	r20, r24
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	02 2e       	mov	r0, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <MCAL_Interrupt_u8SetRegisterPin+0x3e>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <MCAL_Interrupt_u8SetRegisterPin+0x3a>
    2748:	84 2b       	or	r24, r20
    274a:	8c 93       	st	X, r24
    274c:	a9 c0       	rjmp	.+338    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	a1 f4       	brne	.+40     	; 0x277c <MCAL_Interrupt_u8SetRegisterPin+0x76>
			SET_BIT(GICR, Loc_u8PinID);
    2754:	ab e5       	ldi	r26, 0x5B	; 91
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	eb e5       	ldi	r30, 0x5B	; 91
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	48 2f       	mov	r20, r24
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 2e       	mov	r0, r18
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <MCAL_Interrupt_u8SetRegisterPin+0x6c>
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	0a 94       	dec	r0
    2774:	e2 f7       	brpl	.-8      	; 0x276e <MCAL_Interrupt_u8SetRegisterPin+0x68>
    2776:	84 2b       	or	r24, r20
    2778:	8c 93       	st	X, r24
    277a:	92 c0       	rjmp	.+292    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	a1 f4       	brne	.+40     	; 0x27aa <MCAL_Interrupt_u8SetRegisterPin+0xa4>
			SET_BIT(MCUCR, Loc_u8PinID);
    2782:	a5 e5       	ldi	r26, 0x55	; 85
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e5 e5       	ldi	r30, 0x55	; 85
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	48 2f       	mov	r20, r24
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	02 2e       	mov	r0, r18
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <MCAL_Interrupt_u8SetRegisterPin+0x9a>
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	0a 94       	dec	r0
    27a2:	e2 f7       	brpl	.-8      	; 0x279c <MCAL_Interrupt_u8SetRegisterPin+0x96>
    27a4:	84 2b       	or	r24, r20
    27a6:	8c 93       	st	X, r24
    27a8:	7b c0       	rjmp	.+246    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <MCAL_Interrupt_u8SetRegisterPin+0xac>
    27b0:	77 c0       	rjmp	.+238    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			SET_BIT(MCUCSR, Loc_u8PinID);
    27b2:	a4 e5       	ldi	r26, 0x54	; 84
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e4 e5       	ldi	r30, 0x54	; 84
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	48 2f       	mov	r20, r24
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	02 2e       	mov	r0, r18
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <MCAL_Interrupt_u8SetRegisterPin+0xca>
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	0a 94       	dec	r0
    27d2:	e2 f7       	brpl	.-8      	; 0x27cc <MCAL_Interrupt_u8SetRegisterPin+0xc6>
    27d4:	84 2b       	or	r24, r20
    27d6:	8c 93       	st	X, r24
    27d8:	63 c0       	rjmp	.+198    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	88 23       	and	r24, r24
    27de:	09 f0       	breq	.+2      	; 0x27e2 <MCAL_Interrupt_u8SetRegisterPin+0xdc>
    27e0:	5f c0       	rjmp	.+190    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		if (Loc_u8PortID == Sreg) {
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	88 23       	and	r24, r24
    27e6:	a9 f4       	brne	.+42     	; 0x2812 <MCAL_Interrupt_u8SetRegisterPin+0x10c>
			CLR_BIT(SREG, Loc_u8PinID);
    27e8:	af e5       	ldi	r26, 0x5F	; 95
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ef e5       	ldi	r30, 0x5F	; 95
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	48 2f       	mov	r20, r24
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	02 2e       	mov	r0, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <MCAL_Interrupt_u8SetRegisterPin+0x100>
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	0a 94       	dec	r0
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <MCAL_Interrupt_u8SetRegisterPin+0xfc>
    280a:	80 95       	com	r24
    280c:	84 23       	and	r24, r20
    280e:	8c 93       	st	X, r24
    2810:	47 c0       	rjmp	.+142    	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	a9 f4       	brne	.+42     	; 0x2842 <MCAL_Interrupt_u8SetRegisterPin+0x13c>
			CLR_BIT(GICR, Loc_u8PinID);
    2818:	ab e5       	ldi	r26, 0x5B	; 91
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	eb e5       	ldi	r30, 0x5B	; 91
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	48 2f       	mov	r20, r24
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	28 2f       	mov	r18, r24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	02 2e       	mov	r0, r18
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <MCAL_Interrupt_u8SetRegisterPin+0x130>
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	0a 94       	dec	r0
    2838:	e2 f7       	brpl	.-8      	; 0x2832 <MCAL_Interrupt_u8SetRegisterPin+0x12c>
    283a:	80 95       	com	r24
    283c:	84 23       	and	r24, r20
    283e:	8c 93       	st	X, r24
    2840:	2f c0       	rjmp	.+94     	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	a9 f4       	brne	.+42     	; 0x2872 <MCAL_Interrupt_u8SetRegisterPin+0x16c>
			CLR_BIT(MCUCR, Loc_u8PinID);
    2848:	a5 e5       	ldi	r26, 0x55	; 85
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e5 e5       	ldi	r30, 0x55	; 85
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	48 2f       	mov	r20, r24
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	02 2e       	mov	r0, r18
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <MCAL_Interrupt_u8SetRegisterPin+0x160>
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	0a 94       	dec	r0
    2868:	e2 f7       	brpl	.-8      	; 0x2862 <MCAL_Interrupt_u8SetRegisterPin+0x15c>
    286a:	80 95       	com	r24
    286c:	84 23       	and	r24, r20
    286e:	8c 93       	st	X, r24
    2870:	17 c0       	rjmp	.+46     	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	83 30       	cpi	r24, 0x03	; 3
    2876:	a1 f4       	brne	.+40     	; 0x28a0 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			CLR_BIT(MCUCSR, Loc_u8PinID);
    2878:	a4 e5       	ldi	r26, 0x54	; 84
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e4 e5       	ldi	r30, 0x54	; 84
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	48 2f       	mov	r20, r24
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 2e       	mov	r0, r18
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <MCAL_Interrupt_u8SetRegisterPin+0x190>
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	0a 94       	dec	r0
    2898:	e2 f7       	brpl	.-8      	; 0x2892 <MCAL_Interrupt_u8SetRegisterPin+0x18c>
    289a:	80 95       	com	r24
    289c:	84 23       	and	r24, r20
    289e:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <MCAL_Interrupt_EXIT_CallBack_0>:

void MCAL_Interrupt_EXIT_CallBack_0(void (*ptr)(void)) {
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <MCAL_Interrupt_EXIT_CallBack_0+0x6>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	9a 83       	std	Y+2, r25	; 0x02
    28b8:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	31 f0       	breq	.+12     	; 0x28ce <MCAL_Interrupt_EXIT_CallBack_0+0x22>
		Gptr0 = ptr;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	9a 81       	ldd	r25, Y+2	; 0x02
    28c6:	90 93 1d 02 	sts	0x021D, r25
    28ca:	80 93 1c 02 	sts	0x021C, r24
}
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <MCAL_Interrupt_EXIT_CallBack_1>:
void MCAL_Interrupt_EXIT_CallBack_1(void (*ptr)(void)) {
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <MCAL_Interrupt_EXIT_CallBack_1+0x6>
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	31 f0       	breq	.+12     	; 0x28fa <MCAL_Interrupt_EXIT_CallBack_1+0x22>
		Gptr1 = ptr;
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	90 93 1f 02 	sts	0x021F, r25
    28f6:	80 93 1e 02 	sts	0x021E, r24
}
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <MCAL_Interrupt_EXIT_CallBack_2>:
void MCAL_Interrupt_EXIT_CallBack_2(void (*ptr)(void)) {
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <MCAL_Interrupt_EXIT_CallBack_2+0x6>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	31 f0       	breq	.+12     	; 0x2926 <MCAL_Interrupt_EXIT_CallBack_2+0x22>
		Gptr2 = ptr;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	90 93 21 02 	sts	0x0221, r25
    2922:	80 93 20 02 	sts	0x0220, r24
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <MCAL_Interrupt_EnableGIE>:

void MCAL_Interrupt_EnableGIE(u8 Loc_u8value) {
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	0f 92       	push	r0
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8value == Enable) {
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	31 f4       	brne	.+12     	; 0x294e <MCAL_Interrupt_EnableGIE+0x1e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	67 e0       	ldi	r22, 0x07	; 7
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
    294c:	08 c0       	rjmp	.+16     	; 0x295e <MCAL_Interrupt_EnableGIE+0x2e>
	} else if (Loc_u8value == Disable) {
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	88 23       	and	r24, r24
    2952:	29 f4       	brne	.+10     	; 0x295e <MCAL_Interrupt_EnableGIE+0x2e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_Low);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	67 e0       	ldi	r22, 0x07	; 7
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	}
}
    295e:	0f 90       	pop	r0
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <MCAL_Interrupt_InterruptRisingInit>:

void MCAL_Interrupt_InterruptRisingInit() {
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	66 e0       	ldi	r22, 0x06	; 6
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_High);
    2978:	82 e0       	ldi	r24, 0x02	; 2
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	61 e0       	ldi	r22, 0x01	; 1
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
}
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <MCAL_Interrupt_InterruptFallingInit>:
void MCAL_Interrupt_InterruptFallingInit() {
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	66 e0       	ldi	r22, 0x06	; 6
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_Low);
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	0e 94 83 13 	call	0x2706	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin>
}
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <__vector_1>:

ISR(VECT_INT0) {
    29be:	1f 92       	push	r1
    29c0:	0f 92       	push	r0
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	0f 92       	push	r0
    29c6:	11 24       	eor	r1, r1
    29c8:	2f 93       	push	r18
    29ca:	3f 93       	push	r19
    29cc:	4f 93       	push	r20
    29ce:	5f 93       	push	r21
    29d0:	6f 93       	push	r22
    29d2:	7f 93       	push	r23
    29d4:	8f 93       	push	r24
    29d6:	9f 93       	push	r25
    29d8:	af 93       	push	r26
    29da:	bf 93       	push	r27
    29dc:	ef 93       	push	r30
    29de:	ff 93       	push	r31
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	if (Gptr0 != '\0')
    29e8:	80 91 1c 02 	lds	r24, 0x021C
    29ec:	90 91 1d 02 	lds	r25, 0x021D
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	29 f0       	breq	.+10     	; 0x29fe <__vector_1+0x40>
		Gptr0();
    29f4:	e0 91 1c 02 	lds	r30, 0x021C
    29f8:	f0 91 1d 02 	lds	r31, 0x021D
    29fc:	09 95       	icall
}
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	ff 91       	pop	r31
    2a04:	ef 91       	pop	r30
    2a06:	bf 91       	pop	r27
    2a08:	af 91       	pop	r26
    2a0a:	9f 91       	pop	r25
    2a0c:	8f 91       	pop	r24
    2a0e:	7f 91       	pop	r23
    2a10:	6f 91       	pop	r22
    2a12:	5f 91       	pop	r21
    2a14:	4f 91       	pop	r20
    2a16:	3f 91       	pop	r19
    2a18:	2f 91       	pop	r18
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

00002a24 <__vector_2>:
ISR(VECT_INT1) {
    2a24:	1f 92       	push	r1
    2a26:	0f 92       	push	r0
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	0f 92       	push	r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	2f 93       	push	r18
    2a30:	3f 93       	push	r19
    2a32:	4f 93       	push	r20
    2a34:	5f 93       	push	r21
    2a36:	6f 93       	push	r22
    2a38:	7f 93       	push	r23
    2a3a:	8f 93       	push	r24
    2a3c:	9f 93       	push	r25
    2a3e:	af 93       	push	r26
    2a40:	bf 93       	push	r27
    2a42:	ef 93       	push	r30
    2a44:	ff 93       	push	r31
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
	if (Gptr1 != '\0')
    2a4e:	80 91 1e 02 	lds	r24, 0x021E
    2a52:	90 91 1f 02 	lds	r25, 0x021F
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	29 f0       	breq	.+10     	; 0x2a64 <__vector_2+0x40>
		Gptr1();
    2a5a:	e0 91 1e 02 	lds	r30, 0x021E
    2a5e:	f0 91 1f 02 	lds	r31, 0x021F
    2a62:	09 95       	icall
}
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	ff 91       	pop	r31
    2a6a:	ef 91       	pop	r30
    2a6c:	bf 91       	pop	r27
    2a6e:	af 91       	pop	r26
    2a70:	9f 91       	pop	r25
    2a72:	8f 91       	pop	r24
    2a74:	7f 91       	pop	r23
    2a76:	6f 91       	pop	r22
    2a78:	5f 91       	pop	r21
    2a7a:	4f 91       	pop	r20
    2a7c:	3f 91       	pop	r19
    2a7e:	2f 91       	pop	r18
    2a80:	0f 90       	pop	r0
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	0f 90       	pop	r0
    2a86:	1f 90       	pop	r1
    2a88:	18 95       	reti

00002a8a <__vector_3>:
ISR(VECT_INT2) {
    2a8a:	1f 92       	push	r1
    2a8c:	0f 92       	push	r0
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	0f 92       	push	r0
    2a92:	11 24       	eor	r1, r1
    2a94:	2f 93       	push	r18
    2a96:	3f 93       	push	r19
    2a98:	4f 93       	push	r20
    2a9a:	5f 93       	push	r21
    2a9c:	6f 93       	push	r22
    2a9e:	7f 93       	push	r23
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	af 93       	push	r26
    2aa6:	bf 93       	push	r27
    2aa8:	ef 93       	push	r30
    2aaa:	ff 93       	push	r31
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
	if (Gptr2 != '\0')
    2ab4:	80 91 20 02 	lds	r24, 0x0220
    2ab8:	90 91 21 02 	lds	r25, 0x0221
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	29 f0       	breq	.+10     	; 0x2aca <__vector_3+0x40>
		Gptr2();
    2ac0:	e0 91 20 02 	lds	r30, 0x0220
    2ac4:	f0 91 21 02 	lds	r31, 0x0221
    2ac8:	09 95       	icall
}
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	ff 91       	pop	r31
    2ad0:	ef 91       	pop	r30
    2ad2:	bf 91       	pop	r27
    2ad4:	af 91       	pop	r26
    2ad6:	9f 91       	pop	r25
    2ad8:	8f 91       	pop	r24
    2ada:	7f 91       	pop	r23
    2adc:	6f 91       	pop	r22
    2ade:	5f 91       	pop	r21
    2ae0:	4f 91       	pop	r20
    2ae2:	3f 91       	pop	r19
    2ae4:	2f 91       	pop	r18
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <MCAL_DIO_u8SetPortDirection>:
 *      Author: Mohamed
 */

#include "DIO.h"

STD_Type MCAL_DIO_u8SetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection) {
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <MCAL_DIO_u8SetPortDirection+0x6>
    2af6:	0f 92       	push	r0
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortDirection <= PORT_OUTPUT) {
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	84 30       	cpi	r24, 0x04	; 4
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <MCAL_DIO_u8SetPortDirection+0x1c>
    2b0a:	6e c0       	rjmp	.+220    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
		if (Loc_u8PortDirection == PORT_OUTPUT) {
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b10:	29 f5       	brne	.+74     	; 0x2b5c <MCAL_DIO_u8SetPortDirection+0x6c>
			if (Loc_u8PortID == PortA) {
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	88 23       	and	r24, r24
    2b16:	31 f4       	brne	.+12     	; 0x2b24 <MCAL_DIO_u8SetPortDirection+0x34>
				DDRA = PORT_OUTPUT;
    2b18:	ea e3       	ldi	r30, 0x3A	; 58
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	8f ef       	ldi	r24, 0xFF	; 255
    2b1e:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b20:	19 82       	std	Y+1, r1	; 0x01
    2b22:	62 c0       	rjmp	.+196    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	81 30       	cpi	r24, 0x01	; 1
    2b28:	31 f4       	brne	.+12     	; 0x2b36 <MCAL_DIO_u8SetPortDirection+0x46>
				DDRB = PORT_OUTPUT;
    2b2a:	e7 e3       	ldi	r30, 0x37	; 55
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	8f ef       	ldi	r24, 0xFF	; 255
    2b30:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b32:	19 82       	std	Y+1, r1	; 0x01
    2b34:	59 c0       	rjmp	.+178    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	31 f4       	brne	.+12     	; 0x2b48 <MCAL_DIO_u8SetPortDirection+0x58>
				DDRC = PORT_OUTPUT;
    2b3c:	e4 e3       	ldi	r30, 0x34	; 52
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	8f ef       	ldi	r24, 0xFF	; 255
    2b42:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b44:	19 82       	std	Y+1, r1	; 0x01
    2b46:	50 c0       	rjmp	.+160    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	83 30       	cpi	r24, 0x03	; 3
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <MCAL_DIO_u8SetPortDirection+0x60>
    2b4e:	4c c0       	rjmp	.+152    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_OUTPUT;
    2b50:	e1 e3       	ldi	r30, 0x31	; 49
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	8f ef       	ldi	r24, 0xFF	; 255
    2b56:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b58:	19 82       	std	Y+1, r1	; 0x01
    2b5a:	46 c0       	rjmp	.+140    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortDirection == PORT_INPUT) {
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	88 23       	and	r24, r24
    2b60:	01 f5       	brne	.+64     	; 0x2ba2 <MCAL_DIO_u8SetPortDirection+0xb2>
			if (Loc_u8PortID == PortA) {
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	88 23       	and	r24, r24
    2b66:	29 f4       	brne	.+10     	; 0x2b72 <MCAL_DIO_u8SetPortDirection+0x82>
				DDRA = PORT_INPUT;
    2b68:	ea e3       	ldi	r30, 0x3A	; 58
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b6e:	19 82       	std	Y+1, r1	; 0x01
    2b70:	3b c0       	rjmp	.+118    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	29 f4       	brne	.+10     	; 0x2b82 <MCAL_DIO_u8SetPortDirection+0x92>
				DDRB = PORT_INPUT;
    2b78:	e7 e3       	ldi	r30, 0x37	; 55
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b7e:	19 82       	std	Y+1, r1	; 0x01
    2b80:	33 c0       	rjmp	.+102    	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	82 30       	cpi	r24, 0x02	; 2
    2b86:	29 f4       	brne	.+10     	; 0x2b92 <MCAL_DIO_u8SetPortDirection+0xa2>
				DDRC = PORT_INPUT;
    2b88:	e4 e3       	ldi	r30, 0x34	; 52
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b8e:	19 82       	std	Y+1, r1	; 0x01
    2b90:	2b c0       	rjmp	.+86     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	41 f5       	brne	.+80     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_INPUT;
    2b98:	e1 e3       	ldi	r30, 0x31	; 49
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2b9e:	19 82       	std	Y+1, r1	; 0x01
    2ba0:	23 c0       	rjmp	.+70     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	88 23       	and	r24, r24
    2ba6:	31 f4       	brne	.+12     	; 0x2bb4 <MCAL_DIO_u8SetPortDirection+0xc4>
				DDRA = Loc_u8PortDirection;
    2ba8:	ea e3       	ldi	r30, 0x3A	; 58
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
    2bb2:	1a c0       	rjmp	.+52     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	31 f4       	brne	.+12     	; 0x2bc6 <MCAL_DIO_u8SetPortDirection+0xd6>
				DDRB = Loc_u8PortDirection;
    2bba:	e7 e3       	ldi	r30, 0x37	; 55
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2bc2:	19 82       	std	Y+1, r1	; 0x01
    2bc4:	11 c0       	rjmp	.+34     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	82 30       	cpi	r24, 0x02	; 2
    2bca:	31 f4       	brne	.+12     	; 0x2bd8 <MCAL_DIO_u8SetPortDirection+0xe8>
				DDRC = Loc_u8PortDirection;
    2bcc:	e4 e3       	ldi	r30, 0x34	; 52
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2bd4:	19 82       	std	Y+1, r1	; 0x01
    2bd6:	08 c0       	rjmp	.+16     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	83 30       	cpi	r24, 0x03	; 3
    2bdc:	29 f4       	brne	.+10     	; 0x2be8 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = Loc_u8PortDirection;
    2bde:	e1 e3       	ldi	r30, 0x31	; 49
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2be6:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <MCAL_DIO_u8SetPinDirection>:

STD_Type MCAL_DIO_u8SetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinDirection) {
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <MCAL_DIO_u8SetPinDirection+0x6>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <MCAL_DIO_u8SetPinDirection+0x8>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	8a 83       	std	Y+2, r24	; 0x02
    2c04:	6b 83       	std	Y+3, r22	; 0x03
    2c06:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	84 30       	cpi	r24, 0x04	; 4
    2c10:	08 f0       	brcs	.+2      	; 0x2c14 <MCAL_DIO_u8SetPinDirection+0x1e>
    2c12:	d4 c0       	rjmp	.+424    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	88 30       	cpi	r24, 0x08	; 8
    2c18:	08 f0       	brcs	.+2      	; 0x2c1c <MCAL_DIO_u8SetPinDirection+0x26>
    2c1a:	d0 c0       	rjmp	.+416    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
    2c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1e:	82 30       	cpi	r24, 0x02	; 2
    2c20:	08 f0       	brcs	.+2      	; 0x2c24 <MCAL_DIO_u8SetPinDirection+0x2e>
    2c22:	cc c0       	rjmp	.+408    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			&& Loc_u8PinDirection <= Pin_High) {
		if (Loc_u8PinDirection == Pin_High) {
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <MCAL_DIO_u8SetPinDirection+0x36>
    2c2a:	61 c0       	rjmp	.+194    	; 0x2cee <MCAL_DIO_u8SetPinDirection+0xf8>
			if (Loc_u8PortID == PortA) {
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	88 23       	and	r24, r24
    2c30:	a9 f4       	brne	.+42     	; 0x2c5c <MCAL_DIO_u8SetPinDirection+0x66>
				SET_BIT(DDRA, Loc_u8PinID);
    2c32:	aa e3       	ldi	r26, 0x3A	; 58
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	ea e3       	ldi	r30, 0x3A	; 58
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	48 2f       	mov	r20, r24
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	02 2e       	mov	r0, r18
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <MCAL_DIO_u8SetPinDirection+0x5a>
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	0a 94       	dec	r0
    2c52:	e2 f7       	brpl	.-8      	; 0x2c4c <MCAL_DIO_u8SetPinDirection+0x56>
    2c54:	84 2b       	or	r24, r20
    2c56:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2c58:	19 82       	std	Y+1, r1	; 0x01
    2c5a:	b0 c0       	rjmp	.+352    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	a9 f4       	brne	.+42     	; 0x2c8c <MCAL_DIO_u8SetPinDirection+0x96>
				SET_BIT(DDRB, Loc_u8PinID);
    2c62:	a7 e3       	ldi	r26, 0x37	; 55
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e7 e3       	ldi	r30, 0x37	; 55
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	48 2f       	mov	r20, r24
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	02 2e       	mov	r0, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <MCAL_DIO_u8SetPinDirection+0x8a>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	0a 94       	dec	r0
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <MCAL_DIO_u8SetPinDirection+0x86>
    2c84:	84 2b       	or	r24, r20
    2c86:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2c88:	19 82       	std	Y+1, r1	; 0x01
    2c8a:	98 c0       	rjmp	.+304    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	82 30       	cpi	r24, 0x02	; 2
    2c90:	a9 f4       	brne	.+42     	; 0x2cbc <MCAL_DIO_u8SetPinDirection+0xc6>
				SET_BIT(DDRC, Loc_u8PinID);
    2c92:	a4 e3       	ldi	r26, 0x34	; 52
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	e4 e3       	ldi	r30, 0x34	; 52
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	48 2f       	mov	r20, r24
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	28 2f       	mov	r18, r24
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	02 2e       	mov	r0, r18
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <MCAL_DIO_u8SetPinDirection+0xba>
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	0a 94       	dec	r0
    2cb2:	e2 f7       	brpl	.-8      	; 0x2cac <MCAL_DIO_u8SetPinDirection+0xb6>
    2cb4:	84 2b       	or	r24, r20
    2cb6:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2cb8:	19 82       	std	Y+1, r1	; 0x01
    2cba:	80 c0       	rjmp	.+256    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	83 30       	cpi	r24, 0x03	; 3
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <MCAL_DIO_u8SetPinDirection+0xce>
    2cc2:	7c c0       	rjmp	.+248    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
				SET_BIT(DDRD, Loc_u8PinID);
    2cc4:	a1 e3       	ldi	r26, 0x31	; 49
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e1 e3       	ldi	r30, 0x31	; 49
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	48 2f       	mov	r20, r24
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	02 2e       	mov	r0, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <MCAL_DIO_u8SetPinDirection+0xec>
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	0a 94       	dec	r0
    2ce4:	e2 f7       	brpl	.-8      	; 0x2cde <MCAL_DIO_u8SetPinDirection+0xe8>
    2ce6:	84 2b       	or	r24, r20
    2ce8:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2cea:	19 82       	std	Y+1, r1	; 0x01
    2cec:	67 c0       	rjmp	.+206    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinDirection == Pin_Low) {
    2cee:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf0:	88 23       	and	r24, r24
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <MCAL_DIO_u8SetPinDirection+0x100>
    2cf4:	63 c0       	rjmp	.+198    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			if (Loc_u8PortID == PortA) {
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	88 23       	and	r24, r24
    2cfa:	b1 f4       	brne	.+44     	; 0x2d28 <MCAL_DIO_u8SetPinDirection+0x132>
				CLR_BIT(DDRA, Loc_u8PinID);
    2cfc:	aa e3       	ldi	r26, 0x3A	; 58
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	ea e3       	ldi	r30, 0x3A	; 58
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	48 2f       	mov	r20, r24
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	02 2e       	mov	r0, r18
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <MCAL_DIO_u8SetPinDirection+0x124>
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	0a 94       	dec	r0
    2d1c:	e2 f7       	brpl	.-8      	; 0x2d16 <MCAL_DIO_u8SetPinDirection+0x120>
    2d1e:	80 95       	com	r24
    2d20:	84 23       	and	r24, r20
    2d22:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d24:	19 82       	std	Y+1, r1	; 0x01
    2d26:	4a c0       	rjmp	.+148    	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	b1 f4       	brne	.+44     	; 0x2d5a <MCAL_DIO_u8SetPinDirection+0x164>
				CLR_BIT(DDRB, Loc_u8PinID);
    2d2e:	a7 e3       	ldi	r26, 0x37	; 55
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e7 e3       	ldi	r30, 0x37	; 55
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	48 2f       	mov	r20, r24
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	02 2e       	mov	r0, r18
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <MCAL_DIO_u8SetPinDirection+0x156>
    2d48:	88 0f       	add	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	0a 94       	dec	r0
    2d4e:	e2 f7       	brpl	.-8      	; 0x2d48 <MCAL_DIO_u8SetPinDirection+0x152>
    2d50:	80 95       	com	r24
    2d52:	84 23       	and	r24, r20
    2d54:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d56:	19 82       	std	Y+1, r1	; 0x01
    2d58:	31 c0       	rjmp	.+98     	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	b1 f4       	brne	.+44     	; 0x2d8c <MCAL_DIO_u8SetPinDirection+0x196>
				CLR_BIT(DDRC, Loc_u8PinID);
    2d60:	a4 e3       	ldi	r26, 0x34	; 52
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e4 e3       	ldi	r30, 0x34	; 52
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	48 2f       	mov	r20, r24
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	02 2e       	mov	r0, r18
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <MCAL_DIO_u8SetPinDirection+0x188>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	0a 94       	dec	r0
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <MCAL_DIO_u8SetPinDirection+0x184>
    2d82:	80 95       	com	r24
    2d84:	84 23       	and	r24, r20
    2d86:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d88:	19 82       	std	Y+1, r1	; 0x01
    2d8a:	18 c0       	rjmp	.+48     	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	83 30       	cpi	r24, 0x03	; 3
    2d90:	a9 f4       	brne	.+42     	; 0x2dbc <MCAL_DIO_u8SetPinDirection+0x1c6>
				CLR_BIT(DDRD, Loc_u8PinID);
    2d92:	a1 e3       	ldi	r26, 0x31	; 49
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e1 e3       	ldi	r30, 0x31	; 49
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	48 2f       	mov	r20, r24
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	02 2e       	mov	r0, r18
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <MCAL_DIO_u8SetPinDirection+0x1ba>
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	0a 94       	dec	r0
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <MCAL_DIO_u8SetPinDirection+0x1b6>
    2db4:	80 95       	com	r24
    2db6:	84 23       	and	r24, r20
    2db8:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2dba:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01

}
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <MCAL_DIO_u8SetPortValue>:

STD_Type MCAL_DIO_u8SetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <MCAL_DIO_u8SetPortValue+0x6>
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	8a 83       	std	Y+2, r24	; 0x02
    2dda:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortValue <= PORT_OUTPUT) {
    2de0:	8a 81       	ldd	r24, Y+2	; 0x02
    2de2:	84 30       	cpi	r24, 0x04	; 4
    2de4:	08 f0       	brcs	.+2      	; 0x2de8 <MCAL_DIO_u8SetPortValue+0x1c>
    2de6:	6e c0       	rjmp	.+220    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
		if (Loc_u8PortValue == PORT_OUTPUT) {
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	8f 3f       	cpi	r24, 0xFF	; 255
    2dec:	29 f5       	brne	.+74     	; 0x2e38 <MCAL_DIO_u8SetPortValue+0x6c>
			if (Loc_u8PortID == PortA) {
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	88 23       	and	r24, r24
    2df2:	31 f4       	brne	.+12     	; 0x2e00 <MCAL_DIO_u8SetPortValue+0x34>
				PORTA = PORT_OUTPUT;
    2df4:	eb e3       	ldi	r30, 0x3B	; 59
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	8f ef       	ldi	r24, 0xFF	; 255
    2dfa:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2dfc:	19 82       	std	Y+1, r1	; 0x01
    2dfe:	62 c0       	rjmp	.+196    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	31 f4       	brne	.+12     	; 0x2e12 <MCAL_DIO_u8SetPortValue+0x46>
				PORTB = PORT_OUTPUT;
    2e06:	e8 e3       	ldi	r30, 0x38	; 56
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	8f ef       	ldi	r24, 0xFF	; 255
    2e0c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e0e:	19 82       	std	Y+1, r1	; 0x01
    2e10:	59 c0       	rjmp	.+178    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	31 f4       	brne	.+12     	; 0x2e24 <MCAL_DIO_u8SetPortValue+0x58>
				PORTC = PORT_OUTPUT;
    2e18:	e5 e3       	ldi	r30, 0x35	; 53
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	8f ef       	ldi	r24, 0xFF	; 255
    2e1e:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e20:	19 82       	std	Y+1, r1	; 0x01
    2e22:	50 c0       	rjmp	.+160    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	83 30       	cpi	r24, 0x03	; 3
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <MCAL_DIO_u8SetPortValue+0x60>
    2e2a:	4c c0       	rjmp	.+152    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_OUTPUT;
    2e2c:	e2 e3       	ldi	r30, 0x32	; 50
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e34:	19 82       	std	Y+1, r1	; 0x01
    2e36:	46 c0       	rjmp	.+140    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortValue == PORT_INPUT) {
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	88 23       	and	r24, r24
    2e3c:	01 f5       	brne	.+64     	; 0x2e7e <MCAL_DIO_u8SetPortValue+0xb2>
			if (Loc_u8PortID == PortA) {
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	88 23       	and	r24, r24
    2e42:	29 f4       	brne	.+10     	; 0x2e4e <MCAL_DIO_u8SetPortValue+0x82>
				PORTA = PORT_INPUT;
    2e44:	eb e3       	ldi	r30, 0x3B	; 59
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e4a:	19 82       	std	Y+1, r1	; 0x01
    2e4c:	3b c0       	rjmp	.+118    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	29 f4       	brne	.+10     	; 0x2e5e <MCAL_DIO_u8SetPortValue+0x92>
				PORTB = PORT_INPUT;
    2e54:	e8 e3       	ldi	r30, 0x38	; 56
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e5a:	19 82       	std	Y+1, r1	; 0x01
    2e5c:	33 c0       	rjmp	.+102    	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	82 30       	cpi	r24, 0x02	; 2
    2e62:	29 f4       	brne	.+10     	; 0x2e6e <MCAL_DIO_u8SetPortValue+0xa2>
				PORTC = PORT_INPUT;
    2e64:	e5 e3       	ldi	r30, 0x35	; 53
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e6a:	19 82       	std	Y+1, r1	; 0x01
    2e6c:	2b c0       	rjmp	.+86     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	83 30       	cpi	r24, 0x03	; 3
    2e72:	41 f5       	brne	.+80     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_INPUT;
    2e74:	e2 e3       	ldi	r30, 0x32	; 50
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2e7a:	19 82       	std	Y+1, r1	; 0x01
    2e7c:	23 c0       	rjmp	.+70     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	88 23       	and	r24, r24
    2e82:	31 f4       	brne	.+12     	; 0x2e90 <MCAL_DIO_u8SetPortValue+0xc4>
				PORTA = Loc_u8PortValue;
    2e84:	eb e3       	ldi	r30, 0x3B	; 59
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e8c:	19 82       	std	Y+1, r1	; 0x01
    2e8e:	1a c0       	rjmp	.+52     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	31 f4       	brne	.+12     	; 0x2ea2 <MCAL_DIO_u8SetPortValue+0xd6>
				PORTB = Loc_u8PortValue;
    2e96:	e8 e3       	ldi	r30, 0x38	; 56
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2e9e:	19 82       	std	Y+1, r1	; 0x01
    2ea0:	11 c0       	rjmp	.+34     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	31 f4       	brne	.+12     	; 0x2eb4 <MCAL_DIO_u8SetPortValue+0xe8>
				PORTC = Loc_u8PortValue;
    2ea8:	e5 e3       	ldi	r30, 0x35	; 53
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2eb0:	19 82       	std	Y+1, r1	; 0x01
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	83 30       	cpi	r24, 0x03	; 3
    2eb8:	29 f4       	brne	.+10     	; 0x2ec4 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = Loc_u8PortValue;
    2eba:	e2 e3       	ldi	r30, 0x32	; 50
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2ec2:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <MCAL_DIO_u8SetPinValue>:

STD_Type MCAL_DIO_u8SetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <MCAL_DIO_u8SetPinValue+0x6>
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <MCAL_DIO_u8SetPinValue+0x8>
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	8a 83       	std	Y+2, r24	; 0x02
    2ee0:	6b 83       	std	Y+3, r22	; 0x03
    2ee2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <MCAL_DIO_u8SetPinValue+0x1e>
    2eee:	d4 c0       	rjmp	.+424    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	88 30       	cpi	r24, 0x08	; 8
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <MCAL_DIO_u8SetPinValue+0x26>
    2ef6:	d0 c0       	rjmp	.+416    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
    2ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	08 f0       	brcs	.+2      	; 0x2f00 <MCAL_DIO_u8SetPinValue+0x2e>
    2efe:	cc c0       	rjmp	.+408    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			&& Loc_u8PinValue <= Pin_High) {
		if (Loc_u8PinValue == Pin_High) {
    2f00:	8c 81       	ldd	r24, Y+4	; 0x04
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <MCAL_DIO_u8SetPinValue+0x36>
    2f06:	61 c0       	rjmp	.+194    	; 0x2fca <MCAL_DIO_u8SetPinValue+0xf8>
			if (Loc_u8PortID == PortA) {
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	88 23       	and	r24, r24
    2f0c:	a9 f4       	brne	.+42     	; 0x2f38 <MCAL_DIO_u8SetPinValue+0x66>
				SET_BIT(PORTA, Loc_u8PinID);
    2f0e:	ab e3       	ldi	r26, 0x3B	; 59
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	eb e3       	ldi	r30, 0x3B	; 59
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	48 2f       	mov	r20, r24
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	02 2e       	mov	r0, r18
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <MCAL_DIO_u8SetPinValue+0x5a>
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	0a 94       	dec	r0
    2f2e:	e2 f7       	brpl	.-8      	; 0x2f28 <MCAL_DIO_u8SetPinValue+0x56>
    2f30:	84 2b       	or	r24, r20
    2f32:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f34:	19 82       	std	Y+1, r1	; 0x01
    2f36:	b0 c0       	rjmp	.+352    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	81 30       	cpi	r24, 0x01	; 1
    2f3c:	a9 f4       	brne	.+42     	; 0x2f68 <MCAL_DIO_u8SetPinValue+0x96>
				SET_BIT(PORTB, Loc_u8PinID);
    2f3e:	a8 e3       	ldi	r26, 0x38	; 56
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e8 e3       	ldi	r30, 0x38	; 56
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	48 2f       	mov	r20, r24
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	02 2e       	mov	r0, r18
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <MCAL_DIO_u8SetPinValue+0x8a>
    2f58:	88 0f       	add	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	0a 94       	dec	r0
    2f5e:	e2 f7       	brpl	.-8      	; 0x2f58 <MCAL_DIO_u8SetPinValue+0x86>
    2f60:	84 2b       	or	r24, r20
    2f62:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f64:	19 82       	std	Y+1, r1	; 0x01
    2f66:	98 c0       	rjmp	.+304    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	82 30       	cpi	r24, 0x02	; 2
    2f6c:	a9 f4       	brne	.+42     	; 0x2f98 <MCAL_DIO_u8SetPinValue+0xc6>
				SET_BIT(PORTC, Loc_u8PinID);
    2f6e:	a5 e3       	ldi	r26, 0x35	; 53
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	e5 e3       	ldi	r30, 0x35	; 53
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	48 2f       	mov	r20, r24
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	28 2f       	mov	r18, r24
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	02 2e       	mov	r0, r18
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <MCAL_DIO_u8SetPinValue+0xba>
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	0a 94       	dec	r0
    2f8e:	e2 f7       	brpl	.-8      	; 0x2f88 <MCAL_DIO_u8SetPinValue+0xb6>
    2f90:	84 2b       	or	r24, r20
    2f92:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f94:	19 82       	std	Y+1, r1	; 0x01
    2f96:	80 c0       	rjmp	.+256    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	83 30       	cpi	r24, 0x03	; 3
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <MCAL_DIO_u8SetPinValue+0xce>
    2f9e:	7c c0       	rjmp	.+248    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
				SET_BIT(PORTD, Loc_u8PinID);
    2fa0:	a2 e3       	ldi	r26, 0x32	; 50
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e2 e3       	ldi	r30, 0x32	; 50
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	48 2f       	mov	r20, r24
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	02 2e       	mov	r0, r18
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <MCAL_DIO_u8SetPinValue+0xec>
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	0a 94       	dec	r0
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <MCAL_DIO_u8SetPinValue+0xe8>
    2fc2:	84 2b       	or	r24, r20
    2fc4:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2fc6:	19 82       	std	Y+1, r1	; 0x01
    2fc8:	67 c0       	rjmp	.+206    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinValue == Pin_Low) {
    2fca:	8c 81       	ldd	r24, Y+4	; 0x04
    2fcc:	88 23       	and	r24, r24
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <MCAL_DIO_u8SetPinValue+0x100>
    2fd0:	63 c0       	rjmp	.+198    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			if (Loc_u8PortID == PortA) {
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	88 23       	and	r24, r24
    2fd6:	b1 f4       	brne	.+44     	; 0x3004 <MCAL_DIO_u8SetPinValue+0x132>
				CLR_BIT(PORTA, Loc_u8PinID);
    2fd8:	ab e3       	ldi	r26, 0x3B	; 59
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	eb e3       	ldi	r30, 0x3B	; 59
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	48 2f       	mov	r20, r24
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	02 2e       	mov	r0, r18
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <MCAL_DIO_u8SetPinValue+0x124>
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	0a 94       	dec	r0
    2ff8:	e2 f7       	brpl	.-8      	; 0x2ff2 <MCAL_DIO_u8SetPinValue+0x120>
    2ffa:	80 95       	com	r24
    2ffc:	84 23       	and	r24, r20
    2ffe:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3000:	19 82       	std	Y+1, r1	; 0x01
    3002:	4a c0       	rjmp	.+148    	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	b1 f4       	brne	.+44     	; 0x3036 <MCAL_DIO_u8SetPinValue+0x164>
				CLR_BIT(PORTB, Loc_u8PinID);
    300a:	a8 e3       	ldi	r26, 0x38	; 56
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e8 e3       	ldi	r30, 0x38	; 56
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	48 2f       	mov	r20, r24
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	02 2e       	mov	r0, r18
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <MCAL_DIO_u8SetPinValue+0x156>
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	0a 94       	dec	r0
    302a:	e2 f7       	brpl	.-8      	; 0x3024 <MCAL_DIO_u8SetPinValue+0x152>
    302c:	80 95       	com	r24
    302e:	84 23       	and	r24, r20
    3030:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3032:	19 82       	std	Y+1, r1	; 0x01
    3034:	31 c0       	rjmp	.+98     	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	b1 f4       	brne	.+44     	; 0x3068 <MCAL_DIO_u8SetPinValue+0x196>
				CLR_BIT(PORTC, Loc_u8PinID);
    303c:	a5 e3       	ldi	r26, 0x35	; 53
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e5 e3       	ldi	r30, 0x35	; 53
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	48 2f       	mov	r20, r24
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	02 2e       	mov	r0, r18
    3054:	02 c0       	rjmp	.+4      	; 0x305a <MCAL_DIO_u8SetPinValue+0x188>
    3056:	88 0f       	add	r24, r24
    3058:	99 1f       	adc	r25, r25
    305a:	0a 94       	dec	r0
    305c:	e2 f7       	brpl	.-8      	; 0x3056 <MCAL_DIO_u8SetPinValue+0x184>
    305e:	80 95       	com	r24
    3060:	84 23       	and	r24, r20
    3062:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3064:	19 82       	std	Y+1, r1	; 0x01
    3066:	18 c0       	rjmp	.+48     	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	83 30       	cpi	r24, 0x03	; 3
    306c:	a9 f4       	brne	.+42     	; 0x3098 <MCAL_DIO_u8SetPinValue+0x1c6>
				CLR_BIT(PORTD, Loc_u8PinID);
    306e:	a2 e3       	ldi	r26, 0x32	; 50
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	e2 e3       	ldi	r30, 0x32	; 50
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	48 2f       	mov	r20, r24
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	02 2e       	mov	r0, r18
    3086:	02 c0       	rjmp	.+4      	; 0x308c <MCAL_DIO_u8SetPinValue+0x1ba>
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	0a 94       	dec	r0
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <MCAL_DIO_u8SetPinValue+0x1b6>
    3090:	80 95       	com	r24
    3092:	84 23       	and	r24, r20
    3094:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3096:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3098:	89 81       	ldd	r24, Y+1	; 0x01

}
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <MCAL_DIO_u8SGetPortValue>:

STD_Type MCAL_DIO_u8SGetPortValue(u8 Loc_u8PortID, u8* Loc_u8PortValue) {
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <MCAL_DIO_u8SGetPortValue+0x6>
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <MCAL_DIO_u8SGetPortValue+0x8>
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	8a 83       	std	Y+2, r24	; 0x02
    30b6:	7c 83       	std	Y+4, r23	; 0x04
    30b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	84 30       	cpi	r24, 0x04	; 4
    30c2:	58 f5       	brcc	.+86     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		if (Loc_u8PortID == PortA) {
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	88 23       	and	r24, r24
    30c8:	41 f4       	brne	.+16     	; 0x30da <MCAL_DIO_u8SGetPortValue+0x32>
			*Loc_u8PortValue = PORTA;
    30ca:	eb e3       	ldi	r30, 0x3B	; 59
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	eb 81       	ldd	r30, Y+3	; 0x03
    30d2:	fc 81       	ldd	r31, Y+4	; 0x04
    30d4:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    30d6:	19 82       	std	Y+1, r1	; 0x01
    30d8:	20 c0       	rjmp	.+64     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortB) {
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	41 f4       	brne	.+16     	; 0x30f0 <MCAL_DIO_u8SGetPortValue+0x48>
			*Loc_u8PortValue = PORTB;
    30e0:	e8 e3       	ldi	r30, 0x38	; 56
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	eb 81       	ldd	r30, Y+3	; 0x03
    30e8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ea:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    30ec:	19 82       	std	Y+1, r1	; 0x01
    30ee:	15 c0       	rjmp	.+42     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortC) {
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	82 30       	cpi	r24, 0x02	; 2
    30f4:	41 f4       	brne	.+16     	; 0x3106 <MCAL_DIO_u8SGetPortValue+0x5e>
			*Loc_u8PortValue = PORTC;
    30f6:	e5 e3       	ldi	r30, 0x35	; 53
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	eb 81       	ldd	r30, Y+3	; 0x03
    30fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3100:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3102:	19 82       	std	Y+1, r1	; 0x01
    3104:	0a c0       	rjmp	.+20     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortD) {
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	39 f4       	brne	.+14     	; 0x311a <MCAL_DIO_u8SGetPortValue+0x72>
			*Loc_u8PortValue = PORTD;
    310c:	e2 e3       	ldi	r30, 0x32	; 50
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	eb 81       	ldd	r30, Y+3	; 0x03
    3114:	fc 81       	ldd	r31, Y+4	; 0x04
    3116:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3118:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    311a:	89 81       	ldd	r24, Y+1	; 0x01
}
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <MCAL_DIO_u8GetPinValue>:

STD_Type MCAL_DIO_u8GetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8* Loc_u8PinValue) {
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <MCAL_DIO_u8GetPinValue+0x6>
    3130:	00 d0       	rcall	.+0      	; 0x3132 <MCAL_DIO_u8GetPinValue+0x8>
    3132:	0f 92       	push	r0
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	8a 83       	std	Y+2, r24	; 0x02
    313a:	6b 83       	std	Y+3, r22	; 0x03
    313c:	5d 83       	std	Y+5, r21	; 0x05
    313e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	84 30       	cpi	r24, 0x04	; 4
    3148:	08 f0       	brcs	.+2      	; 0x314c <MCAL_DIO_u8GetPinValue+0x22>
    314a:	63 c0       	rjmp	.+198    	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
    314c:	8b 81       	ldd	r24, Y+3	; 0x03
    314e:	88 30       	cpi	r24, 0x08	; 8
    3150:	08 f0       	brcs	.+2      	; 0x3154 <MCAL_DIO_u8GetPinValue+0x2a>
    3152:	5f c0       	rjmp	.+190    	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		if (Loc_u8PortID == PortA) {
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	88 23       	and	r24, r24
    3158:	a9 f4       	brne	.+42     	; 0x3184 <MCAL_DIO_u8GetPinValue+0x5a>
			*Loc_u8PinValue = GET_BIT(PINA, Loc_u8PinID);
    315a:	e9 e3       	ldi	r30, 0x39	; 57
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a9 01       	movw	r20, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <MCAL_DIO_u8GetPinValue+0x48>
    316e:	55 95       	asr	r21
    3170:	47 95       	ror	r20
    3172:	8a 95       	dec	r24
    3174:	e2 f7       	brpl	.-8      	; 0x316e <MCAL_DIO_u8GetPinValue+0x44>
    3176:	ca 01       	movw	r24, r20
    3178:	81 70       	andi	r24, 0x01	; 1
    317a:	ec 81       	ldd	r30, Y+4	; 0x04
    317c:	fd 81       	ldd	r31, Y+5	; 0x05
    317e:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3180:	19 82       	std	Y+1, r1	; 0x01
    3182:	47 c0       	rjmp	.+142    	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortB) {
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	a9 f4       	brne	.+42     	; 0x31b4 <MCAL_DIO_u8GetPinValue+0x8a>
			*Loc_u8PinValue = GET_BIT(PINB, Loc_u8PinID);
    318a:	e6 e3       	ldi	r30, 0x36	; 54
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	28 2f       	mov	r18, r24
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a9 01       	movw	r20, r18
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <MCAL_DIO_u8GetPinValue+0x78>
    319e:	55 95       	asr	r21
    31a0:	47 95       	ror	r20
    31a2:	8a 95       	dec	r24
    31a4:	e2 f7       	brpl	.-8      	; 0x319e <MCAL_DIO_u8GetPinValue+0x74>
    31a6:	ca 01       	movw	r24, r20
    31a8:	81 70       	andi	r24, 0x01	; 1
    31aa:	ec 81       	ldd	r30, Y+4	; 0x04
    31ac:	fd 81       	ldd	r31, Y+5	; 0x05
    31ae:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    31b0:	19 82       	std	Y+1, r1	; 0x01
    31b2:	2f c0       	rjmp	.+94     	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortC) {
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	82 30       	cpi	r24, 0x02	; 2
    31b8:	a9 f4       	brne	.+42     	; 0x31e4 <MCAL_DIO_u8GetPinValue+0xba>
			*Loc_u8PinValue = GET_BIT(PINC, Loc_u8PinID);
    31ba:	e3 e3       	ldi	r30, 0x33	; 51
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	88 2f       	mov	r24, r24
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a9 01       	movw	r20, r18
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <MCAL_DIO_u8GetPinValue+0xa8>
    31ce:	55 95       	asr	r21
    31d0:	47 95       	ror	r20
    31d2:	8a 95       	dec	r24
    31d4:	e2 f7       	brpl	.-8      	; 0x31ce <MCAL_DIO_u8GetPinValue+0xa4>
    31d6:	ca 01       	movw	r24, r20
    31d8:	81 70       	andi	r24, 0x01	; 1
    31da:	ec 81       	ldd	r30, Y+4	; 0x04
    31dc:	fd 81       	ldd	r31, Y+5	; 0x05
    31de:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    31e0:	19 82       	std	Y+1, r1	; 0x01
    31e2:	17 c0       	rjmp	.+46     	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortD) {
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	83 30       	cpi	r24, 0x03	; 3
    31e8:	a1 f4       	brne	.+40     	; 0x3212 <MCAL_DIO_u8GetPinValue+0xe8>
			*Loc_u8PinValue = GET_BIT(PIND, Loc_u8PinID);
    31ea:	e0 e3       	ldi	r30, 0x30	; 48
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	28 2f       	mov	r18, r24
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a9 01       	movw	r20, r18
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <MCAL_DIO_u8GetPinValue+0xd8>
    31fe:	55 95       	asr	r21
    3200:	47 95       	ror	r20
    3202:	8a 95       	dec	r24
    3204:	e2 f7       	brpl	.-8      	; 0x31fe <MCAL_DIO_u8GetPinValue+0xd4>
    3206:	ca 01       	movw	r24, r20
    3208:	81 70       	andi	r24, 0x01	; 1
    320a:	ec 81       	ldd	r30, Y+4	; 0x04
    320c:	fd 81       	ldd	r31, Y+5	; 0x05
    320e:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3210:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3212:	89 81       	ldd	r24, Y+1	; 0x01
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <MCAL_DIO_u8TogglePortValue>:

STD_Type MCAL_DIO_u8TogglePortValue(u8 Loc_u8PortID) {
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <MCAL_DIO_u8TogglePortValue+0x6>
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Return_Value = E_NOT_OK;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	84 30       	cpi	r24, 0x04	; 4
    3238:	78 f5       	brcc	.+94     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		if (Loc_u8PortID == PortA) {
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	88 23       	and	r24, r24
    323e:	49 f4       	brne	.+18     	; 0x3252 <MCAL_DIO_u8TogglePortValue+0x2e>
			PORTA = ~PORTA;
    3240:	ab e3       	ldi	r26, 0x3B	; 59
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	eb e3       	ldi	r30, 0x3B	; 59
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 95       	com	r24
    324c:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    324e:	19 82       	std	Y+1, r1	; 0x01
    3250:	23 c0       	rjmp	.+70     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortB) {
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	81 30       	cpi	r24, 0x01	; 1
    3256:	49 f4       	brne	.+18     	; 0x326a <MCAL_DIO_u8TogglePortValue+0x46>
			PORTB = ~PORTB;
    3258:	a8 e3       	ldi	r26, 0x38	; 56
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e8 e3       	ldi	r30, 0x38	; 56
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	80 95       	com	r24
    3264:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3266:	19 82       	std	Y+1, r1	; 0x01
    3268:	17 c0       	rjmp	.+46     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortC) {
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	82 30       	cpi	r24, 0x02	; 2
    326e:	49 f4       	brne	.+18     	; 0x3282 <MCAL_DIO_u8TogglePortValue+0x5e>
			PORTC = ~PORTC;
    3270:	a5 e3       	ldi	r26, 0x35	; 53
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e5 e3       	ldi	r30, 0x35	; 53
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	80 95       	com	r24
    327c:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    327e:	19 82       	std	Y+1, r1	; 0x01
    3280:	0b c0       	rjmp	.+22     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortD) {
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	83 30       	cpi	r24, 0x03	; 3
    3286:	41 f4       	brne	.+16     	; 0x3298 <MCAL_DIO_u8TogglePortValue+0x74>
			PORTD = ~PORTD;
    3288:	a2 e3       	ldi	r26, 0x32	; 50
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	e2 e3       	ldi	r30, 0x32	; 50
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	80 95       	com	r24
    3294:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3296:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3298:	89 81       	ldd	r24, Y+1	; 0x01
}
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	cf 91       	pop	r28
    32a0:	df 91       	pop	r29
    32a2:	08 95       	ret

000032a4 <MCAL_DIO_u8TogglePinValue>:

STD_Type MCAL_DIO_u8TogglePinValue(u8 Loc_u8PortID, u8 Loc_u8PinID) {
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <MCAL_DIO_u8TogglePinValue+0x6>
    32aa:	0f 92       	push	r0
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	8a 83       	std	Y+2, r24	; 0x02
    32b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	84 30       	cpi	r24, 0x04	; 4
    32bc:	08 f0       	brcs	.+2      	; 0x32c0 <MCAL_DIO_u8TogglePinValue+0x1c>
    32be:	63 c0       	rjmp	.+198    	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	88 30       	cpi	r24, 0x08	; 8
    32c4:	08 f0       	brcs	.+2      	; 0x32c8 <MCAL_DIO_u8TogglePinValue+0x24>
    32c6:	5f c0       	rjmp	.+190    	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		if (Loc_u8PortID == PortA) {
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	88 23       	and	r24, r24
    32cc:	a9 f4       	brne	.+42     	; 0x32f8 <MCAL_DIO_u8TogglePinValue+0x54>
			TOGGLE_BIT(PORTA, Loc_u8PinID);
    32ce:	ab e3       	ldi	r26, 0x3B	; 59
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	eb e3       	ldi	r30, 0x3B	; 59
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	48 2f       	mov	r20, r24
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	02 2e       	mov	r0, r18
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <MCAL_DIO_u8TogglePinValue+0x48>
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	0a 94       	dec	r0
    32ee:	e2 f7       	brpl	.-8      	; 0x32e8 <MCAL_DIO_u8TogglePinValue+0x44>
    32f0:	84 27       	eor	r24, r20
    32f2:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    32f4:	19 82       	std	Y+1, r1	; 0x01
    32f6:	47 c0       	rjmp	.+142    	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortB) {
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	81 30       	cpi	r24, 0x01	; 1
    32fc:	a9 f4       	brne	.+42     	; 0x3328 <MCAL_DIO_u8TogglePinValue+0x84>
			TOGGLE_BIT(PORTB, Loc_u8PinID);
    32fe:	a8 e3       	ldi	r26, 0x38	; 56
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e8 e3       	ldi	r30, 0x38	; 56
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	48 2f       	mov	r20, r24
    330a:	8b 81       	ldd	r24, Y+3	; 0x03
    330c:	28 2f       	mov	r18, r24
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	02 2e       	mov	r0, r18
    3316:	02 c0       	rjmp	.+4      	; 0x331c <MCAL_DIO_u8TogglePinValue+0x78>
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	0a 94       	dec	r0
    331e:	e2 f7       	brpl	.-8      	; 0x3318 <MCAL_DIO_u8TogglePinValue+0x74>
    3320:	84 27       	eor	r24, r20
    3322:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3324:	19 82       	std	Y+1, r1	; 0x01
    3326:	2f c0       	rjmp	.+94     	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortC) {
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	a9 f4       	brne	.+42     	; 0x3358 <MCAL_DIO_u8TogglePinValue+0xb4>
			TOGGLE_BIT(PORTC, Loc_u8PinID);
    332e:	a5 e3       	ldi	r26, 0x35	; 53
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e5 e3       	ldi	r30, 0x35	; 53
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	48 2f       	mov	r20, r24
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	02 2e       	mov	r0, r18
    3346:	02 c0       	rjmp	.+4      	; 0x334c <MCAL_DIO_u8TogglePinValue+0xa8>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	0a 94       	dec	r0
    334e:	e2 f7       	brpl	.-8      	; 0x3348 <MCAL_DIO_u8TogglePinValue+0xa4>
    3350:	84 27       	eor	r24, r20
    3352:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3354:	19 82       	std	Y+1, r1	; 0x01
    3356:	17 c0       	rjmp	.+46     	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortD) {
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	83 30       	cpi	r24, 0x03	; 3
    335c:	a1 f4       	brne	.+40     	; 0x3386 <MCAL_DIO_u8TogglePinValue+0xe2>
			TOGGLE_BIT(PORTD, Loc_u8PinID);
    335e:	a2 e3       	ldi	r26, 0x32	; 50
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e2 e3       	ldi	r30, 0x32	; 50
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	48 2f       	mov	r20, r24
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	02 2e       	mov	r0, r18
    3376:	02 c0       	rjmp	.+4      	; 0x337c <MCAL_DIO_u8TogglePinValue+0xd8>
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	0a 94       	dec	r0
    337e:	e2 f7       	brpl	.-8      	; 0x3378 <MCAL_DIO_u8TogglePinValue+0xd4>
    3380:	84 27       	eor	r24, r20
    3382:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3384:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3386:	89 81       	ldd	r24, Y+1	; 0x01
}
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <HAL_Ultrasonic_Sensor_voidInit>:
volatile f32 Glob_f32Distance = NUM0;
volatile u16 Glob_u16StartTime = NUM0, Glob_u16EndTime = NUM0, Glob_u16TimeDiff = NUM0;
volatile u16 Glob_u16OvfCounterStart, Glob_16OvfCounterEnd;
extern volatile u16 Glob_u16OvfCounter;

void HAL_Ultrasonic_Sensor_voidInit(void) {
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPinDirection(ECHO_PORT, ECHO_PIN, Pin_Low);      //
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	62 e0       	ldi	r22, 0x02	; 2
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(TRIG_PORT, TRIG_PIN, Pin_High);  //  trigger
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	66 e0       	ldi	r22, 0x06	; 6
    33aa:	41 e0       	ldi	r20, 0x01	; 1
    33ac:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_Interrupt_EXIT_CallBack_0(HAL_Ultrasonic_Sensor_voidInterrupt); // external interrupt call back
    33b0:	82 e6       	ldi	r24, 0x62	; 98
    33b2:	9b e1       	ldi	r25, 0x1B	; 27
    33b4:	0e 94 56 14 	call	0x28ac	; 0x28ac <MCAL_Interrupt_EXIT_CallBack_0>
	SET_BIT(SREG,Pin7);
    33b8:	af e5       	ldi	r26, 0x5F	; 95
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	ef e5       	ldi	r30, 0x5F	; 95
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	80 68       	ori	r24, 0x80	; 128
    33c4:	8c 93       	st	X, r24
	MCAL_Timer0_Init(Normal_Mode,Prescaller_64,'\0');
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	63 e0       	ldi	r22, 0x03	; 3
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MCAL_Timer0_Init>
	MCAL_Timer0_SetPreloadValue(113);
    33d0:	81 e7       	ldi	r24, 0x71	; 113
    33d2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <MCAL_Timer0_SetPreloadValue>
}
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <HAL_Ultrasonic_Sensor_voidTrigger>:

void HAL_Ultrasonic_Sensor_voidTrigger(void) {
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	68 97       	sbiw	r28, 0x18	; 24
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_High);    // high
    33f0:	83 e0       	ldi	r24, 0x03	; 3
    33f2:	66 e0       	ldi	r22, 0x06	; 6
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	a0 e2       	ldi	r26, 0x20	; 32
    3400:	b1 e4       	ldi	r27, 0x41	; 65
    3402:	8d 8b       	std	Y+21, r24	; 0x15
    3404:	9e 8b       	std	Y+22, r25	; 0x16
    3406:	af 8b       	std	Y+23, r26	; 0x17
    3408:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    340a:	6d 89       	ldd	r22, Y+21	; 0x15
    340c:	7e 89       	ldd	r23, Y+22	; 0x16
    340e:	8f 89       	ldd	r24, Y+23	; 0x17
    3410:	98 8d       	ldd	r25, Y+24	; 0x18
    3412:	2b ea       	ldi	r18, 0xAB	; 171
    3414:	3a ea       	ldi	r19, 0xAA	; 170
    3416:	4a ea       	ldi	r20, 0xAA	; 170
    3418:	50 e4       	ldi	r21, 0x40	; 64
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	89 8b       	std	Y+17, r24	; 0x11
    3424:	9a 8b       	std	Y+18, r25	; 0x12
    3426:	ab 8b       	std	Y+19, r26	; 0x13
    3428:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    342a:	69 89       	ldd	r22, Y+17	; 0x11
    342c:	7a 89       	ldd	r23, Y+18	; 0x12
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e8       	ldi	r20, 0x80	; 128
    3438:	5f e3       	ldi	r21, 0x3F	; 63
    343a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343e:	88 23       	and	r24, r24
    3440:	1c f4       	brge	.+6      	; 0x3448 <HAL_Ultrasonic_Sensor_voidTrigger+0x6c>
		__ticks = 1;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	88 8b       	std	Y+16, r24	; 0x10
    3446:	91 c0       	rjmp	.+290    	; 0x356a <HAL_Ultrasonic_Sensor_voidTrigger+0x18e>
	else if (__tmp > 255)
    3448:	69 89       	ldd	r22, Y+17	; 0x11
    344a:	7a 89       	ldd	r23, Y+18	; 0x12
    344c:	8b 89       	ldd	r24, Y+19	; 0x13
    344e:	9c 89       	ldd	r25, Y+20	; 0x14
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	53 e4       	ldi	r21, 0x43	; 67
    3458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    345c:	18 16       	cp	r1, r24
    345e:	0c f0       	brlt	.+2      	; 0x3462 <HAL_Ultrasonic_Sensor_voidTrigger+0x86>
    3460:	7b c0       	rjmp	.+246    	; 0x3558 <HAL_Ultrasonic_Sensor_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3462:	6d 89       	ldd	r22, Y+21	; 0x15
    3464:	7e 89       	ldd	r23, Y+22	; 0x16
    3466:	8f 89       	ldd	r24, Y+23	; 0x17
    3468:	98 8d       	ldd	r25, Y+24	; 0x18
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	4a e7       	ldi	r20, 0x7A	; 122
    3470:	54 e4       	ldi	r21, 0x44	; 68
    3472:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	8c 87       	std	Y+12, r24	; 0x0c
    347c:	9d 87       	std	Y+13, r25	; 0x0d
    347e:	ae 87       	std	Y+14, r26	; 0x0e
    3480:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3482:	6c 85       	ldd	r22, Y+12	; 0x0c
    3484:	7d 85       	ldd	r23, Y+13	; 0x0d
    3486:	8e 85       	ldd	r24, Y+14	; 0x0e
    3488:	9f 85       	ldd	r25, Y+15	; 0x0f
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	4a e7       	ldi	r20, 0x7A	; 122
    3490:	55 e4       	ldi	r21, 0x45	; 69
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	88 87       	std	Y+8, r24	; 0x08
    349c:	99 87       	std	Y+9, r25	; 0x09
    349e:	aa 87       	std	Y+10, r26	; 0x0a
    34a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    34a2:	68 85       	ldd	r22, Y+8	; 0x08
    34a4:	79 85       	ldd	r23, Y+9	; 0x09
    34a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    34a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e8       	ldi	r20, 0x80	; 128
    34b0:	5f e3       	ldi	r21, 0x3F	; 63
    34b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b6:	88 23       	and	r24, r24
    34b8:	2c f4       	brge	.+10     	; 0x34c4 <HAL_Ultrasonic_Sensor_voidTrigger+0xe8>
		__ticks = 1;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	9f 83       	std	Y+7, r25	; 0x07
    34c0:	8e 83       	std	Y+6, r24	; 0x06
    34c2:	3f c0       	rjmp	.+126    	; 0x3542 <HAL_Ultrasonic_Sensor_voidTrigger+0x166>
	else if (__tmp > 65535)
    34c4:	68 85       	ldd	r22, Y+8	; 0x08
    34c6:	79 85       	ldd	r23, Y+9	; 0x09
    34c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	3f ef       	ldi	r19, 0xFF	; 255
    34d0:	4f e7       	ldi	r20, 0x7F	; 127
    34d2:	57 e4       	ldi	r21, 0x47	; 71
    34d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d8:	18 16       	cp	r1, r24
    34da:	4c f5       	brge	.+82     	; 0x352e <HAL_Ultrasonic_Sensor_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    34de:	7d 85       	ldd	r23, Y+13	; 0x0d
    34e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    34e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e2       	ldi	r20, 0x20	; 32
    34ea:	51 e4       	ldi	r21, 0x41	; 65
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9f 83       	std	Y+7, r25	; 0x07
    3502:	8e 83       	std	Y+6, r24	; 0x06
    3504:	0f c0       	rjmp	.+30     	; 0x3524 <HAL_Ultrasonic_Sensor_voidTrigger+0x148>
    3506:	80 e9       	ldi	r24, 0x90	; 144
    3508:	91 e0       	ldi	r25, 0x01	; 1
    350a:	9d 83       	std	Y+5, r25	; 0x05
    350c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    350e:	8c 81       	ldd	r24, Y+4	; 0x04
    3510:	9d 81       	ldd	r25, Y+5	; 0x05
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	f1 f7       	brne	.-4      	; 0x3512 <HAL_Ultrasonic_Sensor_voidTrigger+0x136>
    3516:	9d 83       	std	Y+5, r25	; 0x05
    3518:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351a:	8e 81       	ldd	r24, Y+6	; 0x06
    351c:	9f 81       	ldd	r25, Y+7	; 0x07
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	9f 83       	std	Y+7, r25	; 0x07
    3522:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3524:	8e 81       	ldd	r24, Y+6	; 0x06
    3526:	9f 81       	ldd	r25, Y+7	; 0x07
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	69 f7       	brne	.-38     	; 0x3506 <HAL_Ultrasonic_Sensor_voidTrigger+0x12a>
    352c:	24 c0       	rjmp	.+72     	; 0x3576 <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352e:	68 85       	ldd	r22, Y+8	; 0x08
    3530:	79 85       	ldd	r23, Y+9	; 0x09
    3532:	8a 85       	ldd	r24, Y+10	; 0x0a
    3534:	9b 85       	ldd	r25, Y+11	; 0x0b
    3536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	9f 83       	std	Y+7, r25	; 0x07
    3540:	8e 83       	std	Y+6, r24	; 0x06
    3542:	8e 81       	ldd	r24, Y+6	; 0x06
    3544:	9f 81       	ldd	r25, Y+7	; 0x07
    3546:	9b 83       	std	Y+3, r25	; 0x03
    3548:	8a 83       	std	Y+2, r24	; 0x02
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	9b 81       	ldd	r25, Y+3	; 0x03
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	f1 f7       	brne	.-4      	; 0x354e <HAL_Ultrasonic_Sensor_voidTrigger+0x172>
    3552:	9b 83       	std	Y+3, r25	; 0x03
    3554:	8a 83       	std	Y+2, r24	; 0x02
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3558:	69 89       	ldd	r22, Y+17	; 0x11
    355a:	7a 89       	ldd	r23, Y+18	; 0x12
    355c:	8b 89       	ldd	r24, Y+19	; 0x13
    355e:	9c 89       	ldd	r25, Y+20	; 0x14
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	88 8b       	std	Y+16, r24	; 0x10
    356a:	88 89       	ldd	r24, Y+16	; 0x10
    356c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	8a 95       	dec	r24
    3572:	f1 f7       	brne	.-4      	; 0x3570 <HAL_Ultrasonic_Sensor_voidTrigger+0x194>
    3574:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);                                            // 10 micro seconds delay
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_Low);     // low
    3576:	83 e0       	ldi	r24, 0x03	; 3
    3578:	66 e0       	ldi	r22, 0x06	; 6
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    3580:	68 96       	adiw	r28, 0x18	; 24
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <HAL_Ultrasonic_Sensor_voidCalcDistancse>:

void HAL_Ultrasonic_Sensor_voidCalcDistancse(f32* returned_distance) {
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	60 97       	sbiw	r28, 0x10	; 16
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	98 8b       	std	Y+16, r25	; 0x10
    35a8:	8f 87       	std	Y+15, r24	; 0x0f
	HAL_Ultrasonic_Sensor_voidTrigger();                                  // send trigger
    35aa:	0e 94 ee 19 	call	0x33dc	; 0x33dc <HAL_Ultrasonic_Sensor_voidTrigger>
	MCAL_Interrupt_InterruptRisingInit();
    35ae:	0e 94 b3 14 	call	0x2966	; 0x2966 <MCAL_Interrupt_InterruptRisingInit>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	a8 e4       	ldi	r26, 0x48	; 72
    35b8:	b2 e4       	ldi	r27, 0x42	; 66
    35ba:	8b 87       	std	Y+11, r24	; 0x0b
    35bc:	9c 87       	std	Y+12, r25	; 0x0c
    35be:	ad 87       	std	Y+13, r26	; 0x0d
    35c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	4a e7       	ldi	r20, 0x7A	; 122
    35d0:	55 e4       	ldi	r21, 0x45	; 69
    35d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	8f 83       	std	Y+7, r24	; 0x07
    35dc:	98 87       	std	Y+8, r25	; 0x08
    35de:	a9 87       	std	Y+9, r26	; 0x09
    35e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e8       	ldi	r20, 0x80	; 128
    35f0:	5f e3       	ldi	r21, 0x3F	; 63
    35f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f6:	88 23       	and	r24, r24
    35f8:	2c f4       	brge	.+10     	; 0x3604 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x72>
		__ticks = 1;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	3f c0       	rjmp	.+126    	; 0x3682 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xf0>
	else if (__tmp > 65535)
    3604:	6f 81       	ldd	r22, Y+7	; 0x07
    3606:	78 85       	ldd	r23, Y+8	; 0x08
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	3f ef       	ldi	r19, 0xFF	; 255
    3610:	4f e7       	ldi	r20, 0x7F	; 127
    3612:	57 e4       	ldi	r21, 0x47	; 71
    3614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3618:	18 16       	cp	r1, r24
    361a:	4c f5       	brge	.+82     	; 0x366e <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361c:	6b 85       	ldd	r22, Y+11	; 0x0b
    361e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3620:	8d 85       	ldd	r24, Y+13	; 0x0d
    3622:	9e 85       	ldd	r25, Y+14	; 0x0e
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e2       	ldi	r20, 0x20	; 32
    362a:	51 e4       	ldi	r21, 0x41	; 65
    362c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	bc 01       	movw	r22, r24
    3636:	cd 01       	movw	r24, r26
    3638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	0f c0       	rjmp	.+30     	; 0x3664 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xd2>
    3646:	80 e9       	ldi	r24, 0x90	; 144
    3648:	91 e0       	ldi	r25, 0x01	; 1
    364a:	9c 83       	std	Y+4, r25	; 0x04
    364c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	9c 81       	ldd	r25, Y+4	; 0x04
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xc0>
    3656:	9c 83       	std	Y+4, r25	; 0x04
    3658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	69 f7       	brne	.-38     	; 0x3646 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xb4>
    366c:	14 c0       	rjmp	.+40     	; 0x3696 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	9e 81       	ldd	r25, Y+6	; 0x06
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xfc>
    3692:	9a 83       	std	Y+2, r25	; 0x02
    3694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);                                            // stability delay
	*returned_distance = Glob_f32Distance;                           // get the distance
    3696:	80 91 22 02 	lds	r24, 0x0222
    369a:	90 91 23 02 	lds	r25, 0x0223
    369e:	a0 91 24 02 	lds	r26, 0x0224
    36a2:	b0 91 25 02 	lds	r27, 0x0225
    36a6:	ef 85       	ldd	r30, Y+15	; 0x0f
    36a8:	f8 89       	ldd	r31, Y+16	; 0x10
    36aa:	80 83       	st	Z, r24
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	a2 83       	std	Z+2, r26	; 0x02
    36b0:	b3 83       	std	Z+3, r27	; 0x03
}
    36b2:	60 96       	adiw	r28, 0x10	; 16
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <HAL_Ultrasonic_Sensor_voidInterrupt>:
void HAL_Ultrasonic_Sensor_voidInterrupt(void)                                     // call back function
{
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62

	if (Glob_u8Counter <= 2)          // check for counter status
    36cc:	80 91 0f 02 	lds	r24, 0x020F
    36d0:	83 30       	cpi	r24, 0x03	; 3
    36d2:	08 f0       	brcs	.+2      	; 0x36d6 <HAL_Ultrasonic_Sensor_voidInterrupt+0x12>
    36d4:	75 c0       	rjmp	.+234    	; 0x37c0 <HAL_Ultrasonic_Sensor_voidInterrupt+0xfc>
			{
		if (Glob_u8Counter == NUM1)      // check if it is the first entry
    36d6:	80 91 0f 02 	lds	r24, 0x020F
    36da:	81 30       	cpi	r24, 0x01	; 1
    36dc:	a1 f4       	brne	.+40     	; 0x3706 <HAL_Ultrasonic_Sensor_voidInterrupt+0x42>
		{
			// store the start time value
			Glob_u16StartTime = TCNT0;
    36de:	e2 e5       	ldi	r30, 0x52	; 82
    36e0:	f0 e0       	ldi	r31, 0x00	; 0
    36e2:	80 81       	ld	r24, Z
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	90 93 27 02 	sts	0x0227, r25
    36ec:	80 93 26 02 	sts	0x0226, r24

			// store number of OVFs at the start of the signal
			Glob_u16OvfCounterStart = Glob_u16OvfCounter;
    36f0:	80 91 14 02 	lds	r24, 0x0214
    36f4:	90 91 15 02 	lds	r25, 0x0215
    36f8:	90 93 3d 02 	sts	0x023D, r25
    36fc:	80 93 3c 02 	sts	0x023C, r24

			// at the first entry  we change the capture edge to falling edge to capture echo signal
			MCAL_Interrupt_InterruptFallingInit();
    3700:	0e 94 c9 14 	call	0x2992	; 0x2992 <MCAL_Interrupt_InterruptFallingInit>
    3704:	58 c0       	rjmp	.+176    	; 0x37b6 <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
		}

		else if (Glob_u8Counter == 2) // check if it's the second entry
    3706:	80 91 0f 02 	lds	r24, 0x020F
    370a:	82 30       	cpi	r24, 0x02	; 2
    370c:	09 f0       	breq	.+2      	; 0x3710 <HAL_Ultrasonic_Sensor_voidInterrupt+0x4c>
    370e:	53 c0       	rjmp	.+166    	; 0x37b6 <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
				{
			//store end time value
			Glob_u16EndTime = TCNT0;
    3710:	e2 e5       	ldi	r30, 0x52	; 82
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	88 2f       	mov	r24, r24
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	90 93 29 02 	sts	0x0229, r25
    371e:	80 93 28 02 	sts	0x0228, r24

			//store number of OVFs at the end of signal
			Glob_16OvfCounterEnd = Glob_u16OvfCounter;
    3722:	80 91 14 02 	lds	r24, 0x0214
    3726:	90 91 15 02 	lds	r25, 0x0215
    372a:	90 93 3b 02 	sts	0x023B, r25
    372e:	80 93 3a 02 	sts	0x023A, r24

			//calculate the time difference between start and end
			Glob_u16TimeDiff = (Glob_u16EndTime + (256 * Glob_16OvfCounterEnd))
    3732:	80 91 3a 02 	lds	r24, 0x023A
    3736:	90 91 3b 02 	lds	r25, 0x023B
    373a:	38 2f       	mov	r19, r24
    373c:	22 27       	eor	r18, r18
    373e:	80 91 28 02 	lds	r24, 0x0228
    3742:	90 91 29 02 	lds	r25, 0x0229
    3746:	a9 01       	movw	r20, r18
    3748:	48 0f       	add	r20, r24
    374a:	59 1f       	adc	r21, r25
    374c:	80 91 3c 02 	lds	r24, 0x023C
    3750:	90 91 3d 02 	lds	r25, 0x023D
    3754:	38 2f       	mov	r19, r24
    3756:	22 27       	eor	r18, r18
    3758:	80 91 26 02 	lds	r24, 0x0226
    375c:	90 91 27 02 	lds	r25, 0x0227
    3760:	82 0f       	add	r24, r18
    3762:	93 1f       	adc	r25, r19
    3764:	9a 01       	movw	r18, r20
    3766:	28 1b       	sub	r18, r24
    3768:	39 0b       	sbc	r19, r25
    376a:	c9 01       	movw	r24, r18
    376c:	90 93 2b 02 	sts	0x022B, r25
    3770:	80 93 2a 02 	sts	0x022A, r24
					- (Glob_u16StartTime + (256 * Glob_u16OvfCounterStart));

			//calculate the distance
			Glob_f32Distance = Glob_u16TimeDiff * 0.068; //     f32 ton=(h(64/16000000))/2 >>     distance=ton34000;
    3774:	80 91 2a 02 	lds	r24, 0x022A
    3778:	90 91 2b 02 	lds	r25, 0x022B
    377c:	cc 01       	movw	r24, r24
    377e:	a0 e0       	ldi	r26, 0x00	; 0
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	bc 01       	movw	r22, r24
    3784:	cd 01       	movw	r24, r26
    3786:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	26 e9       	ldi	r18, 0x96	; 150
    3794:	33 e4       	ldi	r19, 0x43	; 67
    3796:	4b e8       	ldi	r20, 0x8B	; 139
    3798:	5d e3       	ldi	r21, 0x3D	; 61
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	80 93 22 02 	sts	0x0222, r24
    37a6:	90 93 23 02 	sts	0x0223, r25
    37aa:	a0 93 24 02 	sts	0x0224, r26
    37ae:	b0 93 25 02 	sts	0x0225, r27

			//reset the counter to calculate new signal
			Glob_u8Counter = NUM0;
    37b2:	10 92 0f 02 	sts	0x020F, r1

		}

		//increase the counter to sync with the entry state
		Glob_u8Counter++;
    37b6:	80 91 0f 02 	lds	r24, 0x020F
    37ba:	8f 5f       	subi	r24, 0xFF	; 255
    37bc:	80 93 0f 02 	sts	0x020F, r24
	}

}
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <HAL_SM_voidSMInit>:
 *
 *  Created on: Oct 29, 2023
 *      Author: TOP_WORLD
 */
#include "Servo_Motor.h"
void HAL_SM_voidSMInit(void) {
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,Pin7);
    37ce:	a1 e3       	ldi	r26, 0x31	; 49
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	e1 e3       	ldi	r30, 0x31	; 49
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	80 68       	ori	r24, 0x80	; 128
    37da:	8c 93       	st	X, r24
}
    37dc:	cf 91       	pop	r28
    37de:	df 91       	pop	r29
    37e0:	08 95       	ret

000037e2 <HAL_SM_voidSMSetAngle>:
void HAL_SM_voidSMSetAngle(u8 LOC_u8Angle) {
    37e2:	df 93       	push	r29
    37e4:	cf 93       	push	r28
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
    37ea:	e5 97       	sbiw	r28, 0x35	; 53
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	8d ab       	std	Y+53, r24	; 0x35
	u16 LOC_u16Time=(32.0/3)*(LOC_u8Angle-90)+1100;
    37f8:	8d a9       	ldd	r24, Y+53	; 0x35
    37fa:	88 2f       	mov	r24, r24
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	8a 55       	subi	r24, 0x5A	; 90
    3800:	90 40       	sbci	r25, 0x00	; 0
    3802:	aa 27       	eor	r26, r26
    3804:	97 fd       	sbrc	r25, 7
    3806:	a0 95       	com	r26
    3808:	ba 2f       	mov	r27, r26
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	2b ea       	ldi	r18, 0xAB	; 171
    381c:	3a ea       	ldi	r19, 0xAA	; 170
    381e:	4a e2       	ldi	r20, 0x2A	; 42
    3820:	51 e4       	ldi	r21, 0x41	; 65
    3822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	bc 01       	movw	r22, r24
    382c:	cd 01       	movw	r24, r26
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e8       	ldi	r19, 0x80	; 128
    3832:	49 e8       	ldi	r20, 0x89	; 137
    3834:	54 e4       	ldi	r21, 0x44	; 68
    3836:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	bc 01       	movw	r22, r24
    3840:	cd 01       	movw	r24, r26
    3842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	9c ab       	std	Y+52, r25	; 0x34
    384c:	8b ab       	std	Y+51, r24	; 0x33
	u16 LOC_u16OffTime=(20000-LOC_u16Time);
    384e:	20 e2       	ldi	r18, 0x20	; 32
    3850:	3e e4       	ldi	r19, 0x4E	; 78
    3852:	8b a9       	ldd	r24, Y+51	; 0x33
    3854:	9c a9       	ldd	r25, Y+52	; 0x34
    3856:	a9 01       	movw	r20, r18
    3858:	48 1b       	sub	r20, r24
    385a:	59 0b       	sbc	r21, r25
    385c:	ca 01       	movw	r24, r20
    385e:	9a ab       	std	Y+50, r25	; 0x32
    3860:	89 ab       	std	Y+49, r24	; 0x31
	if (LOC_u8Angle <= MAX_ANGLE && LOC_u8Angle >= MIN_ANGLE) {
    3862:	8d a9       	ldd	r24, Y+53	; 0x35
    3864:	88 2f       	mov	r24, r24
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	aa 27       	eor	r26, r26
    386a:	97 fd       	sbrc	r25, 7
    386c:	a0 95       	com	r26
    386e:	ba 2f       	mov	r27, r26
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	44 e3       	ldi	r20, 0x34	; 52
    3886:	53 e4       	ldi	r21, 0x43	; 67
    3888:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    388c:	18 16       	cp	r1, r24
    388e:	0c f4       	brge	.+2      	; 0x3892 <HAL_SM_voidSMSetAngle+0xb0>
    3890:	98 c1       	rjmp	.+816    	; 0x3bc2 <HAL_SM_voidSMSetAngle+0x3e0>
		SET_BIT(PORTD,Pin7);
    3892:	a2 e3       	ldi	r26, 0x32	; 50
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	e2 e3       	ldi	r30, 0x32	; 50
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	80 81       	ld	r24, Z
    389c:	80 68       	ori	r24, 0x80	; 128
    389e:	8c 93       	st	X, r24
		_delay_us(LOC_u16Time);
    38a0:	8b a9       	ldd	r24, Y+51	; 0x33
    38a2:	9c a9       	ldd	r25, Y+52	; 0x34
    38a4:	cc 01       	movw	r24, r24
    38a6:	a0 e0       	ldi	r26, 0x00	; 0
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	8d a7       	std	Y+45, r24	; 0x2d
    38b8:	9e a7       	std	Y+46, r25	; 0x2e
    38ba:	af a7       	std	Y+47, r26	; 0x2f
    38bc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38be:	6d a5       	ldd	r22, Y+45	; 0x2d
    38c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    38c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    38c4:	98 a9       	ldd	r25, Y+48	; 0x30
    38c6:	2b ea       	ldi	r18, 0xAB	; 171
    38c8:	3a ea       	ldi	r19, 0xAA	; 170
    38ca:	4a ea       	ldi	r20, 0xAA	; 170
    38cc:	50 e4       	ldi	r21, 0x40	; 64
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	89 a7       	std	Y+41, r24	; 0x29
    38d8:	9a a7       	std	Y+42, r25	; 0x2a
    38da:	ab a7       	std	Y+43, r26	; 0x2b
    38dc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    38de:	69 a5       	ldd	r22, Y+41	; 0x29
    38e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    38e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    38e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	40 e8       	ldi	r20, 0x80	; 128
    38ec:	5f e3       	ldi	r21, 0x3F	; 63
    38ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f2:	88 23       	and	r24, r24
    38f4:	1c f4       	brge	.+6      	; 0x38fc <HAL_SM_voidSMSetAngle+0x11a>
		__ticks = 1;
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	88 a7       	std	Y+40, r24	; 0x28
    38fa:	91 c0       	rjmp	.+290    	; 0x3a1e <HAL_SM_voidSMSetAngle+0x23c>
	else if (__tmp > 255)
    38fc:	69 a5       	ldd	r22, Y+41	; 0x29
    38fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    3900:	8b a5       	ldd	r24, Y+43	; 0x2b
    3902:	9c a5       	ldd	r25, Y+44	; 0x2c
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4f e7       	ldi	r20, 0x7F	; 127
    390a:	53 e4       	ldi	r21, 0x43	; 67
    390c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3910:	18 16       	cp	r1, r24
    3912:	0c f0       	brlt	.+2      	; 0x3916 <HAL_SM_voidSMSetAngle+0x134>
    3914:	7b c0       	rjmp	.+246    	; 0x3a0c <HAL_SM_voidSMSetAngle+0x22a>
	{
		_delay_ms(__us / 1000.0);
    3916:	6d a5       	ldd	r22, Y+45	; 0x2d
    3918:	7e a5       	ldd	r23, Y+46	; 0x2e
    391a:	8f a5       	ldd	r24, Y+47	; 0x2f
    391c:	98 a9       	ldd	r25, Y+48	; 0x30
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	4a e7       	ldi	r20, 0x7A	; 122
    3924:	54 e4       	ldi	r21, 0x44	; 68
    3926:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	8c a3       	std	Y+36, r24	; 0x24
    3930:	9d a3       	std	Y+37, r25	; 0x25
    3932:	ae a3       	std	Y+38, r26	; 0x26
    3934:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3936:	6c a1       	ldd	r22, Y+36	; 0x24
    3938:	7d a1       	ldd	r23, Y+37	; 0x25
    393a:	8e a1       	ldd	r24, Y+38	; 0x26
    393c:	9f a1       	ldd	r25, Y+39	; 0x27
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	4a e7       	ldi	r20, 0x7A	; 122
    3944:	55 e4       	ldi	r21, 0x45	; 69
    3946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	88 a3       	std	Y+32, r24	; 0x20
    3950:	99 a3       	std	Y+33, r25	; 0x21
    3952:	aa a3       	std	Y+34, r26	; 0x22
    3954:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3956:	68 a1       	ldd	r22, Y+32	; 0x20
    3958:	79 a1       	ldd	r23, Y+33	; 0x21
    395a:	8a a1       	ldd	r24, Y+34	; 0x22
    395c:	9b a1       	ldd	r25, Y+35	; 0x23
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e8       	ldi	r20, 0x80	; 128
    3964:	5f e3       	ldi	r21, 0x3F	; 63
    3966:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    396a:	88 23       	and	r24, r24
    396c:	2c f4       	brge	.+10     	; 0x3978 <HAL_SM_voidSMSetAngle+0x196>
		__ticks = 1;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	9f 8f       	std	Y+31, r25	; 0x1f
    3974:	8e 8f       	std	Y+30, r24	; 0x1e
    3976:	3f c0       	rjmp	.+126    	; 0x39f6 <HAL_SM_voidSMSetAngle+0x214>
	else if (__tmp > 65535)
    3978:	68 a1       	ldd	r22, Y+32	; 0x20
    397a:	79 a1       	ldd	r23, Y+33	; 0x21
    397c:	8a a1       	ldd	r24, Y+34	; 0x22
    397e:	9b a1       	ldd	r25, Y+35	; 0x23
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	3f ef       	ldi	r19, 0xFF	; 255
    3984:	4f e7       	ldi	r20, 0x7F	; 127
    3986:	57 e4       	ldi	r21, 0x47	; 71
    3988:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    398c:	18 16       	cp	r1, r24
    398e:	4c f5       	brge	.+82     	; 0x39e2 <HAL_SM_voidSMSetAngle+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3990:	6c a1       	ldd	r22, Y+36	; 0x24
    3992:	7d a1       	ldd	r23, Y+37	; 0x25
    3994:	8e a1       	ldd	r24, Y+38	; 0x26
    3996:	9f a1       	ldd	r25, Y+39	; 0x27
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e2       	ldi	r20, 0x20	; 32
    399e:	51 e4       	ldi	r21, 0x41	; 65
    39a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	9f 8f       	std	Y+31, r25	; 0x1f
    39b6:	8e 8f       	std	Y+30, r24	; 0x1e
    39b8:	0f c0       	rjmp	.+30     	; 0x39d8 <HAL_SM_voidSMSetAngle+0x1f6>
    39ba:	80 e9       	ldi	r24, 0x90	; 144
    39bc:	91 e0       	ldi	r25, 0x01	; 1
    39be:	9d 8f       	std	Y+29, r25	; 0x1d
    39c0:	8c 8f       	std	Y+28, r24	; 0x1c
    39c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <HAL_SM_voidSMSetAngle+0x1e4>
    39ca:	9d 8f       	std	Y+29, r25	; 0x1d
    39cc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	9f 8f       	std	Y+31, r25	; 0x1f
    39d6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39dc:	00 97       	sbiw	r24, 0x00	; 0
    39de:	69 f7       	brne	.-38     	; 0x39ba <HAL_SM_voidSMSetAngle+0x1d8>
    39e0:	24 c0       	rjmp	.+72     	; 0x3a2a <HAL_SM_voidSMSetAngle+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e2:	68 a1       	ldd	r22, Y+32	; 0x20
    39e4:	79 a1       	ldd	r23, Y+33	; 0x21
    39e6:	8a a1       	ldd	r24, Y+34	; 0x22
    39e8:	9b a1       	ldd	r25, Y+35	; 0x23
    39ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	9f 8f       	std	Y+31, r25	; 0x1f
    39f4:	8e 8f       	std	Y+30, r24	; 0x1e
    39f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39fa:	9b 8f       	std	Y+27, r25	; 0x1b
    39fc:	8a 8f       	std	Y+26, r24	; 0x1a
    39fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a00:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a02:	01 97       	sbiw	r24, 0x01	; 1
    3a04:	f1 f7       	brne	.-4      	; 0x3a02 <HAL_SM_voidSMSetAngle+0x220>
    3a06:	9b 8f       	std	Y+27, r25	; 0x1b
    3a08:	8a 8f       	std	Y+26, r24	; 0x1a
    3a0a:	0f c0       	rjmp	.+30     	; 0x3a2a <HAL_SM_voidSMSetAngle+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a0c:	69 a5       	ldd	r22, Y+41	; 0x29
    3a0e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a10:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a12:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	88 a7       	std	Y+40, r24	; 0x28
    3a1e:	88 a5       	ldd	r24, Y+40	; 0x28
    3a20:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a22:	89 8d       	ldd	r24, Y+25	; 0x19
    3a24:	8a 95       	dec	r24
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <HAL_SM_voidSMSetAngle+0x242>
    3a28:	89 8f       	std	Y+25, r24	; 0x19
		CLR_BIT(PORTD,Pin7);
    3a2a:	a2 e3       	ldi	r26, 0x32	; 50
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	e2 e3       	ldi	r30, 0x32	; 50
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	8f 77       	andi	r24, 0x7F	; 127
    3a36:	8c 93       	st	X, r24
		_delay_us(LOC_u16OffTime);
    3a38:	89 a9       	ldd	r24, Y+49	; 0x31
    3a3a:	9a a9       	ldd	r25, Y+50	; 0x32
    3a3c:	cc 01       	movw	r24, r24
    3a3e:	a0 e0       	ldi	r26, 0x00	; 0
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	8d 8b       	std	Y+21, r24	; 0x15
    3a50:	9e 8b       	std	Y+22, r25	; 0x16
    3a52:	af 8b       	std	Y+23, r26	; 0x17
    3a54:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a56:	6d 89       	ldd	r22, Y+21	; 0x15
    3a58:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a5e:	2b ea       	ldi	r18, 0xAB	; 171
    3a60:	3a ea       	ldi	r19, 0xAA	; 170
    3a62:	4a ea       	ldi	r20, 0xAA	; 170
    3a64:	50 e4       	ldi	r21, 0x40	; 64
    3a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	89 8b       	std	Y+17, r24	; 0x11
    3a70:	9a 8b       	std	Y+18, r25	; 0x12
    3a72:	ab 8b       	std	Y+19, r26	; 0x13
    3a74:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3a76:	69 89       	ldd	r22, Y+17	; 0x11
    3a78:	7a 89       	ldd	r23, Y+18	; 0x12
    3a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e8       	ldi	r20, 0x80	; 128
    3a84:	5f e3       	ldi	r21, 0x3F	; 63
    3a86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a8a:	88 23       	and	r24, r24
    3a8c:	1c f4       	brge	.+6      	; 0x3a94 <HAL_SM_voidSMSetAngle+0x2b2>
		__ticks = 1;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	88 8b       	std	Y+16, r24	; 0x10
    3a92:	91 c0       	rjmp	.+290    	; 0x3bb6 <HAL_SM_voidSMSetAngle+0x3d4>
	else if (__tmp > 255)
    3a94:	69 89       	ldd	r22, Y+17	; 0x11
    3a96:	7a 89       	ldd	r23, Y+18	; 0x12
    3a98:	8b 89       	ldd	r24, Y+19	; 0x13
    3a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	53 e4       	ldi	r21, 0x43	; 67
    3aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa8:	18 16       	cp	r1, r24
    3aaa:	0c f0       	brlt	.+2      	; 0x3aae <HAL_SM_voidSMSetAngle+0x2cc>
    3aac:	7b c0       	rjmp	.+246    	; 0x3ba4 <HAL_SM_voidSMSetAngle+0x3c2>
	{
		_delay_ms(__us / 1000.0);
    3aae:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	4a e7       	ldi	r20, 0x7A	; 122
    3abc:	54 e4       	ldi	r21, 0x44	; 68
    3abe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	8c 87       	std	Y+12, r24	; 0x0c
    3ac8:	9d 87       	std	Y+13, r25	; 0x0d
    3aca:	ae 87       	std	Y+14, r26	; 0x0e
    3acc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ace:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ad0:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ad2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ad4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	4a e7       	ldi	r20, 0x7A	; 122
    3adc:	55 e4       	ldi	r21, 0x45	; 69
    3ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	88 87       	std	Y+8, r24	; 0x08
    3ae8:	99 87       	std	Y+9, r25	; 0x09
    3aea:	aa 87       	std	Y+10, r26	; 0x0a
    3aec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3aee:	68 85       	ldd	r22, Y+8	; 0x08
    3af0:	79 85       	ldd	r23, Y+9	; 0x09
    3af2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3af4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	40 e8       	ldi	r20, 0x80	; 128
    3afc:	5f e3       	ldi	r21, 0x3F	; 63
    3afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b02:	88 23       	and	r24, r24
    3b04:	2c f4       	brge	.+10     	; 0x3b10 <HAL_SM_voidSMSetAngle+0x32e>
		__ticks = 1;
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	9f 83       	std	Y+7, r25	; 0x07
    3b0c:	8e 83       	std	Y+6, r24	; 0x06
    3b0e:	3f c0       	rjmp	.+126    	; 0x3b8e <HAL_SM_voidSMSetAngle+0x3ac>
	else if (__tmp > 65535)
    3b10:	68 85       	ldd	r22, Y+8	; 0x08
    3b12:	79 85       	ldd	r23, Y+9	; 0x09
    3b14:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b16:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	3f ef       	ldi	r19, 0xFF	; 255
    3b1c:	4f e7       	ldi	r20, 0x7F	; 127
    3b1e:	57 e4       	ldi	r21, 0x47	; 71
    3b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b24:	18 16       	cp	r1, r24
    3b26:	4c f5       	brge	.+82     	; 0x3b7a <HAL_SM_voidSMSetAngle+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b28:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e2       	ldi	r20, 0x20	; 32
    3b36:	51 e4       	ldi	r21, 0x41	; 65
    3b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	bc 01       	movw	r22, r24
    3b42:	cd 01       	movw	r24, r26
    3b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	9f 83       	std	Y+7, r25	; 0x07
    3b4e:	8e 83       	std	Y+6, r24	; 0x06
    3b50:	0f c0       	rjmp	.+30     	; 0x3b70 <HAL_SM_voidSMSetAngle+0x38e>
    3b52:	80 e9       	ldi	r24, 0x90	; 144
    3b54:	91 e0       	ldi	r25, 0x01	; 1
    3b56:	9d 83       	std	Y+5, r25	; 0x05
    3b58:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b5e:	01 97       	sbiw	r24, 0x01	; 1
    3b60:	f1 f7       	brne	.-4      	; 0x3b5e <HAL_SM_voidSMSetAngle+0x37c>
    3b62:	9d 83       	std	Y+5, r25	; 0x05
    3b64:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b66:	8e 81       	ldd	r24, Y+6	; 0x06
    3b68:	9f 81       	ldd	r25, Y+7	; 0x07
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	9f 83       	std	Y+7, r25	; 0x07
    3b6e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b70:	8e 81       	ldd	r24, Y+6	; 0x06
    3b72:	9f 81       	ldd	r25, Y+7	; 0x07
    3b74:	00 97       	sbiw	r24, 0x00	; 0
    3b76:	69 f7       	brne	.-38     	; 0x3b52 <HAL_SM_voidSMSetAngle+0x370>
    3b78:	24 c0       	rjmp	.+72     	; 0x3bc2 <HAL_SM_voidSMSetAngle+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7a:	68 85       	ldd	r22, Y+8	; 0x08
    3b7c:	79 85       	ldd	r23, Y+9	; 0x09
    3b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b80:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9f 83       	std	Y+7, r25	; 0x07
    3b8c:	8e 83       	std	Y+6, r24	; 0x06
    3b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b90:	9f 81       	ldd	r25, Y+7	; 0x07
    3b92:	9b 83       	std	Y+3, r25	; 0x03
    3b94:	8a 83       	std	Y+2, r24	; 0x02
    3b96:	8a 81       	ldd	r24, Y+2	; 0x02
    3b98:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <HAL_SM_voidSMSetAngle+0x3b8>
    3b9e:	9b 83       	std	Y+3, r25	; 0x03
    3ba0:	8a 83       	std	Y+2, r24	; 0x02
    3ba2:	0f c0       	rjmp	.+30     	; 0x3bc2 <HAL_SM_voidSMSetAngle+0x3e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ba4:	69 89       	ldd	r22, Y+17	; 0x11
    3ba6:	7a 89       	ldd	r23, Y+18	; 0x12
    3ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    3baa:	9c 89       	ldd	r25, Y+20	; 0x14
    3bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	88 8b       	std	Y+16, r24	; 0x10
    3bb6:	88 89       	ldd	r24, Y+16	; 0x10
    3bb8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	8a 95       	dec	r24
    3bbe:	f1 f7       	brne	.-4      	; 0x3bbc <HAL_SM_voidSMSetAngle+0x3da>
    3bc0:	89 83       	std	Y+1, r24	; 0x01
	} else {
		//NOTHING
	}
}
    3bc2:	e5 96       	adiw	r28, 0x35	; 53
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <HAL_LED_u8LedInit>:
 *  Created on: Sep 25, 2023
 *      Author: Mohamed
 */
#include "LED.h"

STD_Type HAL_LED_u8LedInit(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID) {
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <HAL_LED_u8LedInit+0x6>
    3bda:	0f 92       	push	r0
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    3be0:	8a 83       	std	Y+2, r24	; 0x02
    3be2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins) {
    3be8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bea:	84 30       	cpi	r24, 0x04	; 4
    3bec:	48 f4       	brcc	.+18     	; 0x3c00 <HAL_LED_u8LedInit+0x2c>
    3bee:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf0:	88 30       	cpi	r24, 0x08	; 8
    3bf2:	30 f4       	brcc	.+12     	; 0x3c00 <HAL_LED_u8LedInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8LEDPortID,
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	6b 81       	ldd	r22, Y+3	; 0x03
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
    3bfe:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8LEDPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	cf 91       	pop	r28
    3c0a:	df 91       	pop	r29
    3c0c:	08 95       	ret

00003c0e <HAL_LED_u8LedMode>:

STD_Type HAL_LED_u8LedMode(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID,
		u8 Loc_u8LEDMode) {
    3c0e:	df 93       	push	r29
    3c10:	cf 93       	push	r28
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <HAL_LED_u8LedMode+0x6>
    3c14:	00 d0       	rcall	.+0      	; 0x3c16 <HAL_LED_u8LedMode+0x8>
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	8a 83       	std	Y+2, r24	; 0x02
    3c1c:	6b 83       	std	Y+3, r22	; 0x03
    3c1e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins
    3c24:	8a 81       	ldd	r24, Y+2	; 0x02
    3c26:	84 30       	cpi	r24, 0x04	; 4
    3c28:	10 f5       	brcc	.+68     	; 0x3c6e <HAL_LED_u8LedMode+0x60>
    3c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2c:	88 30       	cpi	r24, 0x08	; 8
    3c2e:	f8 f4       	brcc	.+62     	; 0x3c6e <HAL_LED_u8LedMode+0x60>
    3c30:	8c 81       	ldd	r24, Y+4	; 0x04
    3c32:	83 30       	cpi	r24, 0x03	; 3
    3c34:	e0 f4       	brcc	.+56     	; 0x3c6e <HAL_LED_u8LedMode+0x60>
			&& Loc_u8LEDMode <= LED_TOG) {
		if (Loc_u8LEDMode == LED_ON) {
    3c36:	8c 81       	ldd	r24, Y+4	; 0x04
    3c38:	81 30       	cpi	r24, 0x01	; 1
    3c3a:	39 f4       	brne	.+14     	; 0x3c4a <HAL_LED_u8LedMode+0x3c>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	6b 81       	ldd	r22, Y+3	; 0x03
    3c40:	41 e0       	ldi	r20, 0x01	; 1
    3c42:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    3c46:	89 83       	std	Y+1, r24	; 0x01
    3c48:	12 c0       	rjmp	.+36     	; 0x3c6e <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_High);
		} else if (Loc_u8LEDMode == LED_OFF) {
    3c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c4c:	88 23       	and	r24, r24
    3c4e:	39 f4       	brne	.+14     	; 0x3c5e <HAL_LED_u8LedMode+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    3c50:	8a 81       	ldd	r24, Y+2	; 0x02
    3c52:	6b 81       	ldd	r22, Y+3	; 0x03
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    3c5c:	08 c0       	rjmp	.+16     	; 0x3c6e <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_Low);
		} else if (Loc_u8LEDMode == LED_TOG) {
    3c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c60:	82 30       	cpi	r24, 0x02	; 2
    3c62:	29 f4       	brne	.+10     	; 0x3c6e <HAL_LED_u8LedMode+0x60>
			Loc_u8Return_Value = MCAL_DIO_u8TogglePinValue(Loc_u8LEDPortID,
    3c64:	8a 81       	ldd	r24, Y+2	; 0x02
    3c66:	6b 81       	ldd	r22, Y+3	; 0x03
    3c68:	0e 94 52 19 	call	0x32a4	; 0x32a4 <MCAL_DIO_u8TogglePinValue>
    3c6c:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	cf 91       	pop	r28
    3c7a:	df 91       	pop	r29
    3c7c:	08 95       	ret

00003c7e <HAL_LCD_u8LCDInit>:

#include "LCD.h"

//static u32 Counter = 0;

void HAL_LCD_u8LCDInit() {
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	c4 55       	subi	r28, 0x54	; 84
    3c8c:	d0 40       	sbci	r29, 0x00	; 0
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D7_PIN, Pin_High);
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	67 e0       	ldi	r22, 0x07	; 7
    3c9c:	41 e0       	ldi	r20, 0x01	; 1
    3c9e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D6_PIN, Pin_High);
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	66 e0       	ldi	r22, 0x06	; 6
    3ca6:	41 e0       	ldi	r20, 0x01	; 1
    3ca8:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D5_PIN, Pin_High);
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	65 e0       	ldi	r22, 0x05	; 5
    3cb0:	41 e0       	ldi	r20, 0x01	; 1
    3cb2:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D4_PIN, Pin_High);
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	64 e0       	ldi	r22, 0x04	; 4
    3cba:	41 e0       	ldi	r20, 0x01	; 1
    3cbc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RS_Port, RS_Pin, Pin_High);
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	61 e0       	ldi	r22, 0x01	; 1
    3cc4:	41 e0       	ldi	r20, 0x01	; 1
    3cc6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RW_Port, RW_Pin, Pin_High);
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	62 e0       	ldi	r22, 0x02	; 2
    3cce:	41 e0       	ldi	r20, 0x01	; 1
    3cd0:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(Enable_PORT, Enable_PIN, Pin_High);
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	63 e0       	ldi	r22, 0x03	; 3
    3cd8:	41 e0       	ldi	r20, 0x01	; 1
    3cda:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
    3cde:	fe 01       	movw	r30, r28
    3ce0:	ef 5a       	subi	r30, 0xAF	; 175
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	a0 e0       	ldi	r26, 0x00	; 0
    3cea:	b0 e4       	ldi	r27, 0x40	; 64
    3cec:	80 83       	st	Z, r24
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	a2 83       	std	Z+2, r26	; 0x02
    3cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf4:	8e 01       	movw	r16, r28
    3cf6:	03 5b       	subi	r16, 0xB3	; 179
    3cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	ef 5a       	subi	r30, 0xAF	; 175
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	60 81       	ld	r22, Z
    3d02:	71 81       	ldd	r23, Z+1	; 0x01
    3d04:	82 81       	ldd	r24, Z+2	; 0x02
    3d06:	93 81       	ldd	r25, Z+3	; 0x03
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	4a e7       	ldi	r20, 0x7A	; 122
    3d0e:	55 e4       	ldi	r21, 0x45	; 69
    3d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	f8 01       	movw	r30, r16
    3d1a:	80 83       	st	Z, r24
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	a2 83       	std	Z+2, r26	; 0x02
    3d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d22:	fe 01       	movw	r30, r28
    3d24:	e3 5b       	subi	r30, 0xB3	; 179
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	60 81       	ld	r22, Z
    3d2a:	71 81       	ldd	r23, Z+1	; 0x01
    3d2c:	82 81       	ldd	r24, Z+2	; 0x02
    3d2e:	93 81       	ldd	r25, Z+3	; 0x03
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	40 e8       	ldi	r20, 0x80	; 128
    3d36:	5f e3       	ldi	r21, 0x3F	; 63
    3d38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d3c:	88 23       	and	r24, r24
    3d3e:	44 f4       	brge	.+16     	; 0x3d50 <HAL_LCD_u8LCDInit+0xd2>
		__ticks = 1;
    3d40:	fe 01       	movw	r30, r28
    3d42:	e5 5b       	subi	r30, 0xB5	; 181
    3d44:	ff 4f       	sbci	r31, 0xFF	; 255
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	80 83       	st	Z, r24
    3d4e:	64 c0       	rjmp	.+200    	; 0x3e18 <HAL_LCD_u8LCDInit+0x19a>
	else if (__tmp > 65535)
    3d50:	fe 01       	movw	r30, r28
    3d52:	e3 5b       	subi	r30, 0xB3	; 179
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	60 81       	ld	r22, Z
    3d58:	71 81       	ldd	r23, Z+1	; 0x01
    3d5a:	82 81       	ldd	r24, Z+2	; 0x02
    3d5c:	93 81       	ldd	r25, Z+3	; 0x03
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	3f ef       	ldi	r19, 0xFF	; 255
    3d62:	4f e7       	ldi	r20, 0x7F	; 127
    3d64:	57 e4       	ldi	r21, 0x47	; 71
    3d66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d6a:	18 16       	cp	r1, r24
    3d6c:	0c f0       	brlt	.+2      	; 0x3d70 <HAL_LCD_u8LCDInit+0xf2>
    3d6e:	43 c0       	rjmp	.+134    	; 0x3df6 <HAL_LCD_u8LCDInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d70:	fe 01       	movw	r30, r28
    3d72:	ef 5a       	subi	r30, 0xAF	; 175
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	82 81       	ldd	r24, Z+2	; 0x02
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	40 e2       	ldi	r20, 0x20	; 32
    3d84:	51 e4       	ldi	r21, 0x41	; 65
    3d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	8e 01       	movw	r16, r28
    3d90:	05 5b       	subi	r16, 0xB5	; 181
    3d92:	1f 4f       	sbci	r17, 0xFF	; 255
    3d94:	bc 01       	movw	r22, r24
    3d96:	cd 01       	movw	r24, r26
    3d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	f8 01       	movw	r30, r16
    3da2:	91 83       	std	Z+1, r25	; 0x01
    3da4:	80 83       	st	Z, r24
    3da6:	1f c0       	rjmp	.+62     	; 0x3de6 <HAL_LCD_u8LCDInit+0x168>
    3da8:	fe 01       	movw	r30, r28
    3daa:	e7 5b       	subi	r30, 0xB7	; 183
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	80 e9       	ldi	r24, 0x90	; 144
    3db0:	91 e0       	ldi	r25, 0x01	; 1
    3db2:	91 83       	std	Z+1, r25	; 0x01
    3db4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3db6:	fe 01       	movw	r30, r28
    3db8:	e7 5b       	subi	r30, 0xB7	; 183
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	80 81       	ld	r24, Z
    3dbe:	91 81       	ldd	r25, Z+1	; 0x01
    3dc0:	01 97       	sbiw	r24, 0x01	; 1
    3dc2:	f1 f7       	brne	.-4      	; 0x3dc0 <HAL_LCD_u8LCDInit+0x142>
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	e7 5b       	subi	r30, 0xB7	; 183
    3dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	de 01       	movw	r26, r28
    3dd0:	a5 5b       	subi	r26, 0xB5	; 181
    3dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	e5 5b       	subi	r30, 0xB5	; 181
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	80 81       	ld	r24, Z
    3ddc:	91 81       	ldd	r25, Z+1	; 0x01
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	11 96       	adiw	r26, 0x01	; 1
    3de2:	9c 93       	st	X, r25
    3de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de6:	fe 01       	movw	r30, r28
    3de8:	e5 5b       	subi	r30, 0xB5	; 181
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	80 81       	ld	r24, Z
    3dee:	91 81       	ldd	r25, Z+1	; 0x01
    3df0:	00 97       	sbiw	r24, 0x00	; 0
    3df2:	d1 f6       	brne	.-76     	; 0x3da8 <HAL_LCD_u8LCDInit+0x12a>
    3df4:	27 c0       	rjmp	.+78     	; 0x3e44 <HAL_LCD_u8LCDInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df6:	8e 01       	movw	r16, r28
    3df8:	05 5b       	subi	r16, 0xB5	; 181
    3dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	e3 5b       	subi	r30, 0xB3	; 179
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	60 81       	ld	r22, Z
    3e04:	71 81       	ldd	r23, Z+1	; 0x01
    3e06:	82 81       	ldd	r24, Z+2	; 0x02
    3e08:	93 81       	ldd	r25, Z+3	; 0x03
    3e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	f8 01       	movw	r30, r16
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	80 83       	st	Z, r24
    3e18:	de 01       	movw	r26, r28
    3e1a:	a9 5b       	subi	r26, 0xB9	; 185
    3e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e5 5b       	subi	r30, 0xB5	; 181
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	80 81       	ld	r24, Z
    3e26:	91 81       	ldd	r25, Z+1	; 0x01
    3e28:	8d 93       	st	X+, r24
    3e2a:	9c 93       	st	X, r25
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e9 5b       	subi	r30, 0xB9	; 185
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	80 81       	ld	r24, Z
    3e34:	91 81       	ldd	r25, Z+1	; 0x01
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	f1 f7       	brne	.-4      	; 0x3e36 <HAL_LCD_u8LCDInit+0x1b8>
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e9 5b       	subi	r30, 0xB9	; 185
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	91 83       	std	Z+1, r25	; 0x01
    3e42:	80 83       	st	Z, r24
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Reset);
    3e44:	82 e0       	ldi	r24, 0x02	; 2
    3e46:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	ed 5b       	subi	r30, 0xBD	; 189
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	a0 e0       	ldi	r26, 0x00	; 0
    3e56:	b0 e4       	ldi	r27, 0x40	; 64
    3e58:	80 83       	st	Z, r24
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	a2 83       	std	Z+2, r26	; 0x02
    3e5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e60:	8e 01       	movw	r16, r28
    3e62:	01 5c       	subi	r16, 0xC1	; 193
    3e64:	1f 4f       	sbci	r17, 0xFF	; 255
    3e66:	fe 01       	movw	r30, r28
    3e68:	ed 5b       	subi	r30, 0xBD	; 189
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	4a e7       	ldi	r20, 0x7A	; 122
    3e7a:	55 e4       	ldi	r21, 0x45	; 69
    3e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	f8 01       	movw	r30, r16
    3e86:	80 83       	st	Z, r24
    3e88:	91 83       	std	Z+1, r25	; 0x01
    3e8a:	a2 83       	std	Z+2, r26	; 0x02
    3e8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e8e:	fe 01       	movw	r30, r28
    3e90:	ff 96       	adiw	r30, 0x3f	; 63
    3e92:	60 81       	ld	r22, Z
    3e94:	71 81       	ldd	r23, Z+1	; 0x01
    3e96:	82 81       	ldd	r24, Z+2	; 0x02
    3e98:	93 81       	ldd	r25, Z+3	; 0x03
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e8       	ldi	r20, 0x80	; 128
    3ea0:	5f e3       	ldi	r21, 0x3F	; 63
    3ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ea6:	88 23       	and	r24, r24
    3ea8:	2c f4       	brge	.+10     	; 0x3eb4 <HAL_LCD_u8LCDInit+0x236>
		__ticks = 1;
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	9e af       	std	Y+62, r25	; 0x3e
    3eb0:	8d af       	std	Y+61, r24	; 0x3d
    3eb2:	46 c0       	rjmp	.+140    	; 0x3f40 <HAL_LCD_u8LCDInit+0x2c2>
	else if (__tmp > 65535)
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	ff 96       	adiw	r30, 0x3f	; 63
    3eb8:	60 81       	ld	r22, Z
    3eba:	71 81       	ldd	r23, Z+1	; 0x01
    3ebc:	82 81       	ldd	r24, Z+2	; 0x02
    3ebe:	93 81       	ldd	r25, Z+3	; 0x03
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	3f ef       	ldi	r19, 0xFF	; 255
    3ec4:	4f e7       	ldi	r20, 0x7F	; 127
    3ec6:	57 e4       	ldi	r21, 0x47	; 71
    3ec8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ecc:	18 16       	cp	r1, r24
    3ece:	64 f5       	brge	.+88     	; 0x3f28 <HAL_LCD_u8LCDInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	ed 5b       	subi	r30, 0xBD	; 189
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	60 81       	ld	r22, Z
    3ed8:	71 81       	ldd	r23, Z+1	; 0x01
    3eda:	82 81       	ldd	r24, Z+2	; 0x02
    3edc:	93 81       	ldd	r25, Z+3	; 0x03
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	40 e2       	ldi	r20, 0x20	; 32
    3ee4:	51 e4       	ldi	r21, 0x41	; 65
    3ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	9e af       	std	Y+62, r25	; 0x3e
    3efc:	8d af       	std	Y+61, r24	; 0x3d
    3efe:	0f c0       	rjmp	.+30     	; 0x3f1e <HAL_LCD_u8LCDInit+0x2a0>
    3f00:	80 e9       	ldi	r24, 0x90	; 144
    3f02:	91 e0       	ldi	r25, 0x01	; 1
    3f04:	9c af       	std	Y+60, r25	; 0x3c
    3f06:	8b af       	std	Y+59, r24	; 0x3b
    3f08:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	f1 f7       	brne	.-4      	; 0x3f0c <HAL_LCD_u8LCDInit+0x28e>
    3f10:	9c af       	std	Y+60, r25	; 0x3c
    3f12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f14:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f16:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f18:	01 97       	sbiw	r24, 0x01	; 1
    3f1a:	9e af       	std	Y+62, r25	; 0x3e
    3f1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f20:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	69 f7       	brne	.-38     	; 0x3f00 <HAL_LCD_u8LCDInit+0x282>
    3f26:	16 c0       	rjmp	.+44     	; 0x3f54 <HAL_LCD_u8LCDInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f28:	fe 01       	movw	r30, r28
    3f2a:	ff 96       	adiw	r30, 0x3f	; 63
    3f2c:	60 81       	ld	r22, Z
    3f2e:	71 81       	ldd	r23, Z+1	; 0x01
    3f30:	82 81       	ldd	r24, Z+2	; 0x02
    3f32:	93 81       	ldd	r25, Z+3	; 0x03
    3f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	9e af       	std	Y+62, r25	; 0x3e
    3f3e:	8d af       	std	Y+61, r24	; 0x3d
    3f40:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f42:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f44:	9a af       	std	Y+58, r25	; 0x3a
    3f46:	89 af       	std	Y+57, r24	; 0x39
    3f48:	89 ad       	ldd	r24, Y+57	; 0x39
    3f4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	f1 f7       	brne	.-4      	; 0x3f4c <HAL_LCD_u8LCDInit+0x2ce>
    3f50:	9a af       	std	Y+58, r25	; 0x3a
    3f52:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Function_Set);
    3f54:	88 e2       	ldi	r24, 0x28	; 40
    3f56:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	a0 e0       	ldi	r26, 0x00	; 0
    3f60:	b0 e4       	ldi	r27, 0x40	; 64
    3f62:	8d ab       	std	Y+53, r24	; 0x35
    3f64:	9e ab       	std	Y+54, r25	; 0x36
    3f66:	af ab       	std	Y+55, r26	; 0x37
    3f68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f6a:	6d a9       	ldd	r22, Y+53	; 0x35
    3f6c:	7e a9       	ldd	r23, Y+54	; 0x36
    3f6e:	8f a9       	ldd	r24, Y+55	; 0x37
    3f70:	98 ad       	ldd	r25, Y+56	; 0x38
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	4a e7       	ldi	r20, 0x7A	; 122
    3f78:	55 e4       	ldi	r21, 0x45	; 69
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	89 ab       	std	Y+49, r24	; 0x31
    3f84:	9a ab       	std	Y+50, r25	; 0x32
    3f86:	ab ab       	std	Y+51, r26	; 0x33
    3f88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    3f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    3f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f90:	9c a9       	ldd	r25, Y+52	; 0x34
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e8       	ldi	r20, 0x80	; 128
    3f98:	5f e3       	ldi	r21, 0x3F	; 63
    3f9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f9e:	88 23       	and	r24, r24
    3fa0:	2c f4       	brge	.+10     	; 0x3fac <HAL_LCD_u8LCDInit+0x32e>
		__ticks = 1;
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	98 ab       	std	Y+48, r25	; 0x30
    3fa8:	8f a7       	std	Y+47, r24	; 0x2f
    3faa:	3f c0       	rjmp	.+126    	; 0x402a <HAL_LCD_u8LCDInit+0x3ac>
	else if (__tmp > 65535)
    3fac:	69 a9       	ldd	r22, Y+49	; 0x31
    3fae:	7a a9       	ldd	r23, Y+50	; 0x32
    3fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    3fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	3f ef       	ldi	r19, 0xFF	; 255
    3fb8:	4f e7       	ldi	r20, 0x7F	; 127
    3fba:	57 e4       	ldi	r21, 0x47	; 71
    3fbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fc0:	18 16       	cp	r1, r24
    3fc2:	4c f5       	brge	.+82     	; 0x4016 <HAL_LCD_u8LCDInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    3fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    3fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    3fca:	98 ad       	ldd	r25, Y+56	; 0x38
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e2       	ldi	r20, 0x20	; 32
    3fd2:	51 e4       	ldi	r21, 0x41	; 65
    3fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	98 ab       	std	Y+48, r25	; 0x30
    3fea:	8f a7       	std	Y+47, r24	; 0x2f
    3fec:	0f c0       	rjmp	.+30     	; 0x400c <HAL_LCD_u8LCDInit+0x38e>
    3fee:	80 e9       	ldi	r24, 0x90	; 144
    3ff0:	91 e0       	ldi	r25, 0x01	; 1
    3ff2:	9e a7       	std	Y+46, r25	; 0x2e
    3ff4:	8d a7       	std	Y+45, r24	; 0x2d
    3ff6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ff8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f7       	brne	.-4      	; 0x3ffa <HAL_LCD_u8LCDInit+0x37c>
    3ffe:	9e a7       	std	Y+46, r25	; 0x2e
    4000:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4002:	8f a5       	ldd	r24, Y+47	; 0x2f
    4004:	98 a9       	ldd	r25, Y+48	; 0x30
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	98 ab       	std	Y+48, r25	; 0x30
    400a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400c:	8f a5       	ldd	r24, Y+47	; 0x2f
    400e:	98 a9       	ldd	r25, Y+48	; 0x30
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	69 f7       	brne	.-38     	; 0x3fee <HAL_LCD_u8LCDInit+0x370>
    4014:	14 c0       	rjmp	.+40     	; 0x403e <HAL_LCD_u8LCDInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4016:	69 a9       	ldd	r22, Y+49	; 0x31
    4018:	7a a9       	ldd	r23, Y+50	; 0x32
    401a:	8b a9       	ldd	r24, Y+51	; 0x33
    401c:	9c a9       	ldd	r25, Y+52	; 0x34
    401e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	98 ab       	std	Y+48, r25	; 0x30
    4028:	8f a7       	std	Y+47, r24	; 0x2f
    402a:	8f a5       	ldd	r24, Y+47	; 0x2f
    402c:	98 a9       	ldd	r25, Y+48	; 0x30
    402e:	9c a7       	std	Y+44, r25	; 0x2c
    4030:	8b a7       	std	Y+43, r24	; 0x2b
    4032:	8b a5       	ldd	r24, Y+43	; 0x2b
    4034:	9c a5       	ldd	r25, Y+44	; 0x2c
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	f1 f7       	brne	.-4      	; 0x4036 <HAL_LCD_u8LCDInit+0x3b8>
    403a:	9c a7       	std	Y+44, r25	; 0x2c
    403c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Mode);
    403e:	8f e0       	ldi	r24, 0x0F	; 15
    4040:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	a0 e0       	ldi	r26, 0x00	; 0
    404a:	b0 e4       	ldi	r27, 0x40	; 64
    404c:	8f a3       	std	Y+39, r24	; 0x27
    404e:	98 a7       	std	Y+40, r25	; 0x28
    4050:	a9 a7       	std	Y+41, r26	; 0x29
    4052:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4054:	6f a1       	ldd	r22, Y+39	; 0x27
    4056:	78 a5       	ldd	r23, Y+40	; 0x28
    4058:	89 a5       	ldd	r24, Y+41	; 0x29
    405a:	9a a5       	ldd	r25, Y+42	; 0x2a
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	4a e7       	ldi	r20, 0x7A	; 122
    4062:	55 e4       	ldi	r21, 0x45	; 69
    4064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	8b a3       	std	Y+35, r24	; 0x23
    406e:	9c a3       	std	Y+36, r25	; 0x24
    4070:	ad a3       	std	Y+37, r26	; 0x25
    4072:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4074:	6b a1       	ldd	r22, Y+35	; 0x23
    4076:	7c a1       	ldd	r23, Y+36	; 0x24
    4078:	8d a1       	ldd	r24, Y+37	; 0x25
    407a:	9e a1       	ldd	r25, Y+38	; 0x26
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	40 e8       	ldi	r20, 0x80	; 128
    4082:	5f e3       	ldi	r21, 0x3F	; 63
    4084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4088:	88 23       	and	r24, r24
    408a:	2c f4       	brge	.+10     	; 0x4096 <HAL_LCD_u8LCDInit+0x418>
		__ticks = 1;
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	9a a3       	std	Y+34, r25	; 0x22
    4092:	89 a3       	std	Y+33, r24	; 0x21
    4094:	3f c0       	rjmp	.+126    	; 0x4114 <HAL_LCD_u8LCDInit+0x496>
	else if (__tmp > 65535)
    4096:	6b a1       	ldd	r22, Y+35	; 0x23
    4098:	7c a1       	ldd	r23, Y+36	; 0x24
    409a:	8d a1       	ldd	r24, Y+37	; 0x25
    409c:	9e a1       	ldd	r25, Y+38	; 0x26
    409e:	20 e0       	ldi	r18, 0x00	; 0
    40a0:	3f ef       	ldi	r19, 0xFF	; 255
    40a2:	4f e7       	ldi	r20, 0x7F	; 127
    40a4:	57 e4       	ldi	r21, 0x47	; 71
    40a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40aa:	18 16       	cp	r1, r24
    40ac:	4c f5       	brge	.+82     	; 0x4100 <HAL_LCD_u8LCDInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ae:	6f a1       	ldd	r22, Y+39	; 0x27
    40b0:	78 a5       	ldd	r23, Y+40	; 0x28
    40b2:	89 a5       	ldd	r24, Y+41	; 0x29
    40b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	40 e2       	ldi	r20, 0x20	; 32
    40bc:	51 e4       	ldi	r21, 0x41	; 65
    40be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	bc 01       	movw	r22, r24
    40c8:	cd 01       	movw	r24, r26
    40ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ce:	dc 01       	movw	r26, r24
    40d0:	cb 01       	movw	r24, r22
    40d2:	9a a3       	std	Y+34, r25	; 0x22
    40d4:	89 a3       	std	Y+33, r24	; 0x21
    40d6:	0f c0       	rjmp	.+30     	; 0x40f6 <HAL_LCD_u8LCDInit+0x478>
    40d8:	80 e9       	ldi	r24, 0x90	; 144
    40da:	91 e0       	ldi	r25, 0x01	; 1
    40dc:	98 a3       	std	Y+32, r25	; 0x20
    40de:	8f 8f       	std	Y+31, r24	; 0x1f
    40e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40e2:	98 a1       	ldd	r25, Y+32	; 0x20
    40e4:	01 97       	sbiw	r24, 0x01	; 1
    40e6:	f1 f7       	brne	.-4      	; 0x40e4 <HAL_LCD_u8LCDInit+0x466>
    40e8:	98 a3       	std	Y+32, r25	; 0x20
    40ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ec:	89 a1       	ldd	r24, Y+33	; 0x21
    40ee:	9a a1       	ldd	r25, Y+34	; 0x22
    40f0:	01 97       	sbiw	r24, 0x01	; 1
    40f2:	9a a3       	std	Y+34, r25	; 0x22
    40f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40f6:	89 a1       	ldd	r24, Y+33	; 0x21
    40f8:	9a a1       	ldd	r25, Y+34	; 0x22
    40fa:	00 97       	sbiw	r24, 0x00	; 0
    40fc:	69 f7       	brne	.-38     	; 0x40d8 <HAL_LCD_u8LCDInit+0x45a>
    40fe:	14 c0       	rjmp	.+40     	; 0x4128 <HAL_LCD_u8LCDInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4100:	6b a1       	ldd	r22, Y+35	; 0x23
    4102:	7c a1       	ldd	r23, Y+36	; 0x24
    4104:	8d a1       	ldd	r24, Y+37	; 0x25
    4106:	9e a1       	ldd	r25, Y+38	; 0x26
    4108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	9a a3       	std	Y+34, r25	; 0x22
    4112:	89 a3       	std	Y+33, r24	; 0x21
    4114:	89 a1       	ldd	r24, Y+33	; 0x21
    4116:	9a a1       	ldd	r25, Y+34	; 0x22
    4118:	9e 8f       	std	Y+30, r25	; 0x1e
    411a:	8d 8f       	std	Y+29, r24	; 0x1d
    411c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    411e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4120:	01 97       	sbiw	r24, 0x01	; 1
    4122:	f1 f7       	brne	.-4      	; 0x4120 <HAL_LCD_u8LCDInit+0x4a2>
    4124:	9e 8f       	std	Y+30, r25	; 0x1e
    4126:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	a0 e0       	ldi	r26, 0x00	; 0
    4134:	b0 e4       	ldi	r27, 0x40	; 64
    4136:	89 8f       	std	Y+25, r24	; 0x19
    4138:	9a 8f       	std	Y+26, r25	; 0x1a
    413a:	ab 8f       	std	Y+27, r26	; 0x1b
    413c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    413e:	69 8d       	ldd	r22, Y+25	; 0x19
    4140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	4a e7       	ldi	r20, 0x7A	; 122
    414c:	55 e4       	ldi	r21, 0x45	; 69
    414e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	8d 8b       	std	Y+21, r24	; 0x15
    4158:	9e 8b       	std	Y+22, r25	; 0x16
    415a:	af 8b       	std	Y+23, r26	; 0x17
    415c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    415e:	6d 89       	ldd	r22, Y+21	; 0x15
    4160:	7e 89       	ldd	r23, Y+22	; 0x16
    4162:	8f 89       	ldd	r24, Y+23	; 0x17
    4164:	98 8d       	ldd	r25, Y+24	; 0x18
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	40 e8       	ldi	r20, 0x80	; 128
    416c:	5f e3       	ldi	r21, 0x3F	; 63
    416e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4172:	88 23       	and	r24, r24
    4174:	2c f4       	brge	.+10     	; 0x4180 <HAL_LCD_u8LCDInit+0x502>
		__ticks = 1;
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	9c 8b       	std	Y+20, r25	; 0x14
    417c:	8b 8b       	std	Y+19, r24	; 0x13
    417e:	3f c0       	rjmp	.+126    	; 0x41fe <HAL_LCD_u8LCDInit+0x580>
	else if (__tmp > 65535)
    4180:	6d 89       	ldd	r22, Y+21	; 0x15
    4182:	7e 89       	ldd	r23, Y+22	; 0x16
    4184:	8f 89       	ldd	r24, Y+23	; 0x17
    4186:	98 8d       	ldd	r25, Y+24	; 0x18
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	3f ef       	ldi	r19, 0xFF	; 255
    418c:	4f e7       	ldi	r20, 0x7F	; 127
    418e:	57 e4       	ldi	r21, 0x47	; 71
    4190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4194:	18 16       	cp	r1, r24
    4196:	4c f5       	brge	.+82     	; 0x41ea <HAL_LCD_u8LCDInit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4198:	69 8d       	ldd	r22, Y+25	; 0x19
    419a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    419c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    419e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41a0:	20 e0       	ldi	r18, 0x00	; 0
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	40 e2       	ldi	r20, 0x20	; 32
    41a6:	51 e4       	ldi	r21, 0x41	; 65
    41a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	bc 01       	movw	r22, r24
    41b2:	cd 01       	movw	r24, r26
    41b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	9c 8b       	std	Y+20, r25	; 0x14
    41be:	8b 8b       	std	Y+19, r24	; 0x13
    41c0:	0f c0       	rjmp	.+30     	; 0x41e0 <HAL_LCD_u8LCDInit+0x562>
    41c2:	80 e9       	ldi	r24, 0x90	; 144
    41c4:	91 e0       	ldi	r25, 0x01	; 1
    41c6:	9a 8b       	std	Y+18, r25	; 0x12
    41c8:	89 8b       	std	Y+17, r24	; 0x11
    41ca:	89 89       	ldd	r24, Y+17	; 0x11
    41cc:	9a 89       	ldd	r25, Y+18	; 0x12
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	f1 f7       	brne	.-4      	; 0x41ce <HAL_LCD_u8LCDInit+0x550>
    41d2:	9a 8b       	std	Y+18, r25	; 0x12
    41d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d6:	8b 89       	ldd	r24, Y+19	; 0x13
    41d8:	9c 89       	ldd	r25, Y+20	; 0x14
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	9c 8b       	std	Y+20, r25	; 0x14
    41de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e0:	8b 89       	ldd	r24, Y+19	; 0x13
    41e2:	9c 89       	ldd	r25, Y+20	; 0x14
    41e4:	00 97       	sbiw	r24, 0x00	; 0
    41e6:	69 f7       	brne	.-38     	; 0x41c2 <HAL_LCD_u8LCDInit+0x544>
    41e8:	14 c0       	rjmp	.+40     	; 0x4212 <HAL_LCD_u8LCDInit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ea:	6d 89       	ldd	r22, Y+21	; 0x15
    41ec:	7e 89       	ldd	r23, Y+22	; 0x16
    41ee:	8f 89       	ldd	r24, Y+23	; 0x17
    41f0:	98 8d       	ldd	r25, Y+24	; 0x18
    41f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	9c 8b       	std	Y+20, r25	; 0x14
    41fc:	8b 8b       	std	Y+19, r24	; 0x13
    41fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4200:	9c 89       	ldd	r25, Y+20	; 0x14
    4202:	98 8b       	std	Y+16, r25	; 0x10
    4204:	8f 87       	std	Y+15, r24	; 0x0f
    4206:	8f 85       	ldd	r24, Y+15	; 0x0f
    4208:	98 89       	ldd	r25, Y+16	; 0x10
    420a:	01 97       	sbiw	r24, 0x01	; 1
    420c:	f1 f7       	brne	.-4      	; 0x420a <HAL_LCD_u8LCDInit+0x58c>
    420e:	98 8b       	std	Y+16, r25	; 0x10
    4210:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Entry_Mode);
    4212:	86 e0       	ldi	r24, 0x06	; 6
    4214:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	a0 e0       	ldi	r26, 0x00	; 0
    421e:	b0 e4       	ldi	r27, 0x40	; 64
    4220:	8b 87       	std	Y+11, r24	; 0x0b
    4222:	9c 87       	std	Y+12, r25	; 0x0c
    4224:	ad 87       	std	Y+13, r26	; 0x0d
    4226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4228:	6b 85       	ldd	r22, Y+11	; 0x0b
    422a:	7c 85       	ldd	r23, Y+12	; 0x0c
    422c:	8d 85       	ldd	r24, Y+13	; 0x0d
    422e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	4a e7       	ldi	r20, 0x7A	; 122
    4236:	55 e4       	ldi	r21, 0x45	; 69
    4238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	8f 83       	std	Y+7, r24	; 0x07
    4242:	98 87       	std	Y+8, r25	; 0x08
    4244:	a9 87       	std	Y+9, r26	; 0x09
    4246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4248:	6f 81       	ldd	r22, Y+7	; 0x07
    424a:	78 85       	ldd	r23, Y+8	; 0x08
    424c:	89 85       	ldd	r24, Y+9	; 0x09
    424e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e8       	ldi	r20, 0x80	; 128
    4256:	5f e3       	ldi	r21, 0x3F	; 63
    4258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    425c:	88 23       	and	r24, r24
    425e:	2c f4       	brge	.+10     	; 0x426a <HAL_LCD_u8LCDInit+0x5ec>
		__ticks = 1;
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	9e 83       	std	Y+6, r25	; 0x06
    4266:	8d 83       	std	Y+5, r24	; 0x05
    4268:	3f c0       	rjmp	.+126    	; 0x42e8 <HAL_LCD_u8LCDInit+0x66a>
	else if (__tmp > 65535)
    426a:	6f 81       	ldd	r22, Y+7	; 0x07
    426c:	78 85       	ldd	r23, Y+8	; 0x08
    426e:	89 85       	ldd	r24, Y+9	; 0x09
    4270:	9a 85       	ldd	r25, Y+10	; 0x0a
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	3f ef       	ldi	r19, 0xFF	; 255
    4276:	4f e7       	ldi	r20, 0x7F	; 127
    4278:	57 e4       	ldi	r21, 0x47	; 71
    427a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    427e:	18 16       	cp	r1, r24
    4280:	4c f5       	brge	.+82     	; 0x42d4 <HAL_LCD_u8LCDInit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4282:	6b 85       	ldd	r22, Y+11	; 0x0b
    4284:	7c 85       	ldd	r23, Y+12	; 0x0c
    4286:	8d 85       	ldd	r24, Y+13	; 0x0d
    4288:	9e 85       	ldd	r25, Y+14	; 0x0e
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	40 e2       	ldi	r20, 0x20	; 32
    4290:	51 e4       	ldi	r21, 0x41	; 65
    4292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4296:	dc 01       	movw	r26, r24
    4298:	cb 01       	movw	r24, r22
    429a:	bc 01       	movw	r22, r24
    429c:	cd 01       	movw	r24, r26
    429e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a2:	dc 01       	movw	r26, r24
    42a4:	cb 01       	movw	r24, r22
    42a6:	9e 83       	std	Y+6, r25	; 0x06
    42a8:	8d 83       	std	Y+5, r24	; 0x05
    42aa:	0f c0       	rjmp	.+30     	; 0x42ca <HAL_LCD_u8LCDInit+0x64c>
    42ac:	80 e9       	ldi	r24, 0x90	; 144
    42ae:	91 e0       	ldi	r25, 0x01	; 1
    42b0:	9c 83       	std	Y+4, r25	; 0x04
    42b2:	8b 83       	std	Y+3, r24	; 0x03
    42b4:	8b 81       	ldd	r24, Y+3	; 0x03
    42b6:	9c 81       	ldd	r25, Y+4	; 0x04
    42b8:	01 97       	sbiw	r24, 0x01	; 1
    42ba:	f1 f7       	brne	.-4      	; 0x42b8 <HAL_LCD_u8LCDInit+0x63a>
    42bc:	9c 83       	std	Y+4, r25	; 0x04
    42be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c0:	8d 81       	ldd	r24, Y+5	; 0x05
    42c2:	9e 81       	ldd	r25, Y+6	; 0x06
    42c4:	01 97       	sbiw	r24, 0x01	; 1
    42c6:	9e 83       	std	Y+6, r25	; 0x06
    42c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ca:	8d 81       	ldd	r24, Y+5	; 0x05
    42cc:	9e 81       	ldd	r25, Y+6	; 0x06
    42ce:	00 97       	sbiw	r24, 0x00	; 0
    42d0:	69 f7       	brne	.-38     	; 0x42ac <HAL_LCD_u8LCDInit+0x62e>
    42d2:	14 c0       	rjmp	.+40     	; 0x42fc <HAL_LCD_u8LCDInit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42d4:	6f 81       	ldd	r22, Y+7	; 0x07
    42d6:	78 85       	ldd	r23, Y+8	; 0x08
    42d8:	89 85       	ldd	r24, Y+9	; 0x09
    42da:	9a 85       	ldd	r25, Y+10	; 0x0a
    42dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	9e 83       	std	Y+6, r25	; 0x06
    42e6:	8d 83       	std	Y+5, r24	; 0x05
    42e8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ea:	9e 81       	ldd	r25, Y+6	; 0x06
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	9a 81       	ldd	r25, Y+2	; 0x02
    42f4:	01 97       	sbiw	r24, 0x01	; 1
    42f6:	f1 f7       	brne	.-4      	; 0x42f4 <HAL_LCD_u8LCDInit+0x676>
    42f8:	9a 83       	std	Y+2, r25	; 0x02
    42fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(CURSOR_OFF);
    42fc:	8c e0       	ldi	r24, 0x0C	; 12
    42fe:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
}
    4302:	cc 5a       	subi	r28, 0xAC	; 172
    4304:	df 4f       	sbci	r29, 0xFF	; 255
    4306:	0f b6       	in	r0, 0x3f	; 63
    4308:	f8 94       	cli
    430a:	de bf       	out	0x3e, r29	; 62
    430c:	0f be       	out	0x3f, r0	; 63
    430e:	cd bf       	out	0x3d, r28	; 61
    4310:	cf 91       	pop	r28
    4312:	df 91       	pop	r29
    4314:	1f 91       	pop	r17
    4316:	0f 91       	pop	r16
    4318:	08 95       	ret

0000431a <HAL_LCD_u8SendCommands>:

void HAL_LCD_u8SendCommands(u8 Loc_u8LCD_Command) {
    431a:	df 93       	push	r29
    431c:	cf 93       	push	r28
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
    4322:	6d 97       	sbiw	r28, 0x1d	; 29
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	f8 94       	cli
    4328:	de bf       	out	0x3e, r29	; 62
    432a:	0f be       	out	0x3f, r0	; 63
    432c:	cd bf       	out	0x3d, r28	; 61
    432e:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_Low);
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	61 e0       	ldi	r22, 0x01	; 1
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	62 e0       	ldi	r22, 0x02	; 2
    433e:	40 e0       	ldi	r20, 0x00	; 0
    4340:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Command>>4);
    4344:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4346:	82 95       	swap	r24
    4348:	8f 70       	andi	r24, 0x0F	; 15
    434a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	63 e0       	ldi	r22, 0x03	; 3
    4352:	41 e0       	ldi	r20, 0x01	; 1
    4354:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	a0 e0       	ldi	r26, 0x00	; 0
    435e:	b0 e4       	ldi	r27, 0x40	; 64
    4360:	89 8f       	std	Y+25, r24	; 0x19
    4362:	9a 8f       	std	Y+26, r25	; 0x1a
    4364:	ab 8f       	std	Y+27, r26	; 0x1b
    4366:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4368:	69 8d       	ldd	r22, Y+25	; 0x19
    436a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    436c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    436e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	4a e7       	ldi	r20, 0x7A	; 122
    4376:	55 e4       	ldi	r21, 0x45	; 69
    4378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	8d 8b       	std	Y+21, r24	; 0x15
    4382:	9e 8b       	std	Y+22, r25	; 0x16
    4384:	af 8b       	std	Y+23, r26	; 0x17
    4386:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4388:	6d 89       	ldd	r22, Y+21	; 0x15
    438a:	7e 89       	ldd	r23, Y+22	; 0x16
    438c:	8f 89       	ldd	r24, Y+23	; 0x17
    438e:	98 8d       	ldd	r25, Y+24	; 0x18
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	40 e8       	ldi	r20, 0x80	; 128
    4396:	5f e3       	ldi	r21, 0x3F	; 63
    4398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    439c:	88 23       	and	r24, r24
    439e:	2c f4       	brge	.+10     	; 0x43aa <HAL_LCD_u8SendCommands+0x90>
		__ticks = 1;
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	9c 8b       	std	Y+20, r25	; 0x14
    43a6:	8b 8b       	std	Y+19, r24	; 0x13
    43a8:	3f c0       	rjmp	.+126    	; 0x4428 <HAL_LCD_u8SendCommands+0x10e>
	else if (__tmp > 65535)
    43aa:	6d 89       	ldd	r22, Y+21	; 0x15
    43ac:	7e 89       	ldd	r23, Y+22	; 0x16
    43ae:	8f 89       	ldd	r24, Y+23	; 0x17
    43b0:	98 8d       	ldd	r25, Y+24	; 0x18
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	3f ef       	ldi	r19, 0xFF	; 255
    43b6:	4f e7       	ldi	r20, 0x7F	; 127
    43b8:	57 e4       	ldi	r21, 0x47	; 71
    43ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43be:	18 16       	cp	r1, r24
    43c0:	4c f5       	brge	.+82     	; 0x4414 <HAL_LCD_u8SendCommands+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c2:	69 8d       	ldd	r22, Y+25	; 0x19
    43c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e2       	ldi	r20, 0x20	; 32
    43d0:	51 e4       	ldi	r21, 0x41	; 65
    43d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	bc 01       	movw	r22, r24
    43dc:	cd 01       	movw	r24, r26
    43de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	9c 8b       	std	Y+20, r25	; 0x14
    43e8:	8b 8b       	std	Y+19, r24	; 0x13
    43ea:	0f c0       	rjmp	.+30     	; 0x440a <HAL_LCD_u8SendCommands+0xf0>
    43ec:	80 e9       	ldi	r24, 0x90	; 144
    43ee:	91 e0       	ldi	r25, 0x01	; 1
    43f0:	9a 8b       	std	Y+18, r25	; 0x12
    43f2:	89 8b       	std	Y+17, r24	; 0x11
    43f4:	89 89       	ldd	r24, Y+17	; 0x11
    43f6:	9a 89       	ldd	r25, Y+18	; 0x12
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	f1 f7       	brne	.-4      	; 0x43f8 <HAL_LCD_u8SendCommands+0xde>
    43fc:	9a 8b       	std	Y+18, r25	; 0x12
    43fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4400:	8b 89       	ldd	r24, Y+19	; 0x13
    4402:	9c 89       	ldd	r25, Y+20	; 0x14
    4404:	01 97       	sbiw	r24, 0x01	; 1
    4406:	9c 8b       	std	Y+20, r25	; 0x14
    4408:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440a:	8b 89       	ldd	r24, Y+19	; 0x13
    440c:	9c 89       	ldd	r25, Y+20	; 0x14
    440e:	00 97       	sbiw	r24, 0x00	; 0
    4410:	69 f7       	brne	.-38     	; 0x43ec <HAL_LCD_u8SendCommands+0xd2>
    4412:	14 c0       	rjmp	.+40     	; 0x443c <HAL_LCD_u8SendCommands+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4414:	6d 89       	ldd	r22, Y+21	; 0x15
    4416:	7e 89       	ldd	r23, Y+22	; 0x16
    4418:	8f 89       	ldd	r24, Y+23	; 0x17
    441a:	98 8d       	ldd	r25, Y+24	; 0x18
    441c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	9c 8b       	std	Y+20, r25	; 0x14
    4426:	8b 8b       	std	Y+19, r24	; 0x13
    4428:	8b 89       	ldd	r24, Y+19	; 0x13
    442a:	9c 89       	ldd	r25, Y+20	; 0x14
    442c:	98 8b       	std	Y+16, r25	; 0x10
    442e:	8f 87       	std	Y+15, r24	; 0x0f
    4430:	8f 85       	ldd	r24, Y+15	; 0x0f
    4432:	98 89       	ldd	r25, Y+16	; 0x10
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	f1 f7       	brne	.-4      	; 0x4434 <HAL_LCD_u8SendCommands+0x11a>
    4438:	98 8b       	std	Y+16, r25	; 0x10
    443a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	63 e0       	ldi	r22, 0x03	; 3
    4440:	40 e0       	ldi	r20, 0x00	; 0
    4442:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Command);
    4446:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4448:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	63 e0       	ldi	r22, 0x03	; 3
    4450:	41 e0       	ldi	r20, 0x01	; 1
    4452:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	a0 e0       	ldi	r26, 0x00	; 0
    445c:	b0 e4       	ldi	r27, 0x40	; 64
    445e:	8b 87       	std	Y+11, r24	; 0x0b
    4460:	9c 87       	std	Y+12, r25	; 0x0c
    4462:	ad 87       	std	Y+13, r26	; 0x0d
    4464:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4466:	6b 85       	ldd	r22, Y+11	; 0x0b
    4468:	7c 85       	ldd	r23, Y+12	; 0x0c
    446a:	8d 85       	ldd	r24, Y+13	; 0x0d
    446c:	9e 85       	ldd	r25, Y+14	; 0x0e
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	4a e7       	ldi	r20, 0x7A	; 122
    4474:	55 e4       	ldi	r21, 0x45	; 69
    4476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	8f 83       	std	Y+7, r24	; 0x07
    4480:	98 87       	std	Y+8, r25	; 0x08
    4482:	a9 87       	std	Y+9, r26	; 0x09
    4484:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4486:	6f 81       	ldd	r22, Y+7	; 0x07
    4488:	78 85       	ldd	r23, Y+8	; 0x08
    448a:	89 85       	ldd	r24, Y+9	; 0x09
    448c:	9a 85       	ldd	r25, Y+10	; 0x0a
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e8       	ldi	r20, 0x80	; 128
    4494:	5f e3       	ldi	r21, 0x3F	; 63
    4496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    449a:	88 23       	and	r24, r24
    449c:	2c f4       	brge	.+10     	; 0x44a8 <HAL_LCD_u8SendCommands+0x18e>
		__ticks = 1;
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	9e 83       	std	Y+6, r25	; 0x06
    44a4:	8d 83       	std	Y+5, r24	; 0x05
    44a6:	3f c0       	rjmp	.+126    	; 0x4526 <HAL_LCD_u8SendCommands+0x20c>
	else if (__tmp > 65535)
    44a8:	6f 81       	ldd	r22, Y+7	; 0x07
    44aa:	78 85       	ldd	r23, Y+8	; 0x08
    44ac:	89 85       	ldd	r24, Y+9	; 0x09
    44ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	3f ef       	ldi	r19, 0xFF	; 255
    44b4:	4f e7       	ldi	r20, 0x7F	; 127
    44b6:	57 e4       	ldi	r21, 0x47	; 71
    44b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44bc:	18 16       	cp	r1, r24
    44be:	4c f5       	brge	.+82     	; 0x4512 <HAL_LCD_u8SendCommands+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e2       	ldi	r20, 0x20	; 32
    44ce:	51 e4       	ldi	r21, 0x41	; 65
    44d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	bc 01       	movw	r22, r24
    44da:	cd 01       	movw	r24, r26
    44dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	9e 83       	std	Y+6, r25	; 0x06
    44e6:	8d 83       	std	Y+5, r24	; 0x05
    44e8:	0f c0       	rjmp	.+30     	; 0x4508 <HAL_LCD_u8SendCommands+0x1ee>
    44ea:	80 e9       	ldi	r24, 0x90	; 144
    44ec:	91 e0       	ldi	r25, 0x01	; 1
    44ee:	9c 83       	std	Y+4, r25	; 0x04
    44f0:	8b 83       	std	Y+3, r24	; 0x03
    44f2:	8b 81       	ldd	r24, Y+3	; 0x03
    44f4:	9c 81       	ldd	r25, Y+4	; 0x04
    44f6:	01 97       	sbiw	r24, 0x01	; 1
    44f8:	f1 f7       	brne	.-4      	; 0x44f6 <HAL_LCD_u8SendCommands+0x1dc>
    44fa:	9c 83       	std	Y+4, r25	; 0x04
    44fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4500:	9e 81       	ldd	r25, Y+6	; 0x06
    4502:	01 97       	sbiw	r24, 0x01	; 1
    4504:	9e 83       	std	Y+6, r25	; 0x06
    4506:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4508:	8d 81       	ldd	r24, Y+5	; 0x05
    450a:	9e 81       	ldd	r25, Y+6	; 0x06
    450c:	00 97       	sbiw	r24, 0x00	; 0
    450e:	69 f7       	brne	.-38     	; 0x44ea <HAL_LCD_u8SendCommands+0x1d0>
    4510:	14 c0       	rjmp	.+40     	; 0x453a <HAL_LCD_u8SendCommands+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4512:	6f 81       	ldd	r22, Y+7	; 0x07
    4514:	78 85       	ldd	r23, Y+8	; 0x08
    4516:	89 85       	ldd	r24, Y+9	; 0x09
    4518:	9a 85       	ldd	r25, Y+10	; 0x0a
    451a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	9e 83       	std	Y+6, r25	; 0x06
    4524:	8d 83       	std	Y+5, r24	; 0x05
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	9a 83       	std	Y+2, r25	; 0x02
    452c:	89 83       	std	Y+1, r24	; 0x01
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	9a 81       	ldd	r25, Y+2	; 0x02
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <HAL_LCD_u8SendCommands+0x218>
    4536:	9a 83       	std	Y+2, r25	; 0x02
    4538:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	63 e0       	ldi	r22, 0x03	; 3
    453e:	40 e0       	ldi	r20, 0x00	; 0
    4540:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4544:	6d 96       	adiw	r28, 0x1d	; 29
    4546:	0f b6       	in	r0, 0x3f	; 63
    4548:	f8 94       	cli
    454a:	de bf       	out	0x3e, r29	; 62
    454c:	0f be       	out	0x3f, r0	; 63
    454e:	cd bf       	out	0x3d, r28	; 61
    4550:	cf 91       	pop	r28
    4552:	df 91       	pop	r29
    4554:	08 95       	ret

00004556 <HAL_LCD_u8SendChar>:

void HAL_LCD_u8SendChar(u8 Loc_u8LCD_Char) {
    4556:	df 93       	push	r29
    4558:	cf 93       	push	r28
    455a:	cd b7       	in	r28, 0x3d	; 61
    455c:	de b7       	in	r29, 0x3e	; 62
    455e:	6d 97       	sbiw	r28, 0x1d	; 29
    4560:	0f b6       	in	r0, 0x3f	; 63
    4562:	f8 94       	cli
    4564:	de bf       	out	0x3e, r29	; 62
    4566:	0f be       	out	0x3f, r0	; 63
    4568:	cd bf       	out	0x3d, r28	; 61
    456a:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_High);
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	61 e0       	ldi	r22, 0x01	; 1
    4570:	41 e0       	ldi	r20, 0x01	; 1
    4572:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	62 e0       	ldi	r22, 0x02	; 2
    457a:	40 e0       	ldi	r20, 0x00	; 0
    457c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Char>>4);
    4580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4582:	82 95       	swap	r24
    4584:	8f 70       	andi	r24, 0x0F	; 15
    4586:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	63 e0       	ldi	r22, 0x03	; 3
    458e:	41 e0       	ldi	r20, 0x01	; 1
    4590:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	a0 e0       	ldi	r26, 0x00	; 0
    459a:	b0 e4       	ldi	r27, 0x40	; 64
    459c:	89 8f       	std	Y+25, r24	; 0x19
    459e:	9a 8f       	std	Y+26, r25	; 0x1a
    45a0:	ab 8f       	std	Y+27, r26	; 0x1b
    45a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a4:	69 8d       	ldd	r22, Y+25	; 0x19
    45a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	4a e7       	ldi	r20, 0x7A	; 122
    45b2:	55 e4       	ldi	r21, 0x45	; 69
    45b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	8d 8b       	std	Y+21, r24	; 0x15
    45be:	9e 8b       	std	Y+22, r25	; 0x16
    45c0:	af 8b       	std	Y+23, r26	; 0x17
    45c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45c4:	6d 89       	ldd	r22, Y+21	; 0x15
    45c6:	7e 89       	ldd	r23, Y+22	; 0x16
    45c8:	8f 89       	ldd	r24, Y+23	; 0x17
    45ca:	98 8d       	ldd	r25, Y+24	; 0x18
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e8       	ldi	r20, 0x80	; 128
    45d2:	5f e3       	ldi	r21, 0x3F	; 63
    45d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45d8:	88 23       	and	r24, r24
    45da:	2c f4       	brge	.+10     	; 0x45e6 <HAL_LCD_u8SendChar+0x90>
		__ticks = 1;
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	9c 8b       	std	Y+20, r25	; 0x14
    45e2:	8b 8b       	std	Y+19, r24	; 0x13
    45e4:	3f c0       	rjmp	.+126    	; 0x4664 <HAL_LCD_u8SendChar+0x10e>
	else if (__tmp > 65535)
    45e6:	6d 89       	ldd	r22, Y+21	; 0x15
    45e8:	7e 89       	ldd	r23, Y+22	; 0x16
    45ea:	8f 89       	ldd	r24, Y+23	; 0x17
    45ec:	98 8d       	ldd	r25, Y+24	; 0x18
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	3f ef       	ldi	r19, 0xFF	; 255
    45f2:	4f e7       	ldi	r20, 0x7F	; 127
    45f4:	57 e4       	ldi	r21, 0x47	; 71
    45f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45fa:	18 16       	cp	r1, r24
    45fc:	4c f5       	brge	.+82     	; 0x4650 <HAL_LCD_u8SendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4606:	20 e0       	ldi	r18, 0x00	; 0
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	40 e2       	ldi	r20, 0x20	; 32
    460c:	51 e4       	ldi	r21, 0x41	; 65
    460e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4612:	dc 01       	movw	r26, r24
    4614:	cb 01       	movw	r24, r22
    4616:	bc 01       	movw	r22, r24
    4618:	cd 01       	movw	r24, r26
    461a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	9c 8b       	std	Y+20, r25	; 0x14
    4624:	8b 8b       	std	Y+19, r24	; 0x13
    4626:	0f c0       	rjmp	.+30     	; 0x4646 <HAL_LCD_u8SendChar+0xf0>
    4628:	80 e9       	ldi	r24, 0x90	; 144
    462a:	91 e0       	ldi	r25, 0x01	; 1
    462c:	9a 8b       	std	Y+18, r25	; 0x12
    462e:	89 8b       	std	Y+17, r24	; 0x11
    4630:	89 89       	ldd	r24, Y+17	; 0x11
    4632:	9a 89       	ldd	r25, Y+18	; 0x12
    4634:	01 97       	sbiw	r24, 0x01	; 1
    4636:	f1 f7       	brne	.-4      	; 0x4634 <HAL_LCD_u8SendChar+0xde>
    4638:	9a 8b       	std	Y+18, r25	; 0x12
    463a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    463c:	8b 89       	ldd	r24, Y+19	; 0x13
    463e:	9c 89       	ldd	r25, Y+20	; 0x14
    4640:	01 97       	sbiw	r24, 0x01	; 1
    4642:	9c 8b       	std	Y+20, r25	; 0x14
    4644:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4646:	8b 89       	ldd	r24, Y+19	; 0x13
    4648:	9c 89       	ldd	r25, Y+20	; 0x14
    464a:	00 97       	sbiw	r24, 0x00	; 0
    464c:	69 f7       	brne	.-38     	; 0x4628 <HAL_LCD_u8SendChar+0xd2>
    464e:	14 c0       	rjmp	.+40     	; 0x4678 <HAL_LCD_u8SendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4650:	6d 89       	ldd	r22, Y+21	; 0x15
    4652:	7e 89       	ldd	r23, Y+22	; 0x16
    4654:	8f 89       	ldd	r24, Y+23	; 0x17
    4656:	98 8d       	ldd	r25, Y+24	; 0x18
    4658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	9c 8b       	std	Y+20, r25	; 0x14
    4662:	8b 8b       	std	Y+19, r24	; 0x13
    4664:	8b 89       	ldd	r24, Y+19	; 0x13
    4666:	9c 89       	ldd	r25, Y+20	; 0x14
    4668:	98 8b       	std	Y+16, r25	; 0x10
    466a:	8f 87       	std	Y+15, r24	; 0x0f
    466c:	8f 85       	ldd	r24, Y+15	; 0x0f
    466e:	98 89       	ldd	r25, Y+16	; 0x10
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	f1 f7       	brne	.-4      	; 0x4670 <HAL_LCD_u8SendChar+0x11a>
    4674:	98 8b       	std	Y+16, r25	; 0x10
    4676:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	63 e0       	ldi	r22, 0x03	; 3
    467c:	40 e0       	ldi	r20, 0x00	; 0
    467e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Char);
    4682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4684:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	63 e0       	ldi	r22, 0x03	; 3
    468c:	41 e0       	ldi	r20, 0x01	; 1
    468e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	a0 e0       	ldi	r26, 0x00	; 0
    4698:	b0 e4       	ldi	r27, 0x40	; 64
    469a:	8b 87       	std	Y+11, r24	; 0x0b
    469c:	9c 87       	std	Y+12, r25	; 0x0c
    469e:	ad 87       	std	Y+13, r26	; 0x0d
    46a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	4a e7       	ldi	r20, 0x7A	; 122
    46b0:	55 e4       	ldi	r21, 0x45	; 69
    46b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b6:	dc 01       	movw	r26, r24
    46b8:	cb 01       	movw	r24, r22
    46ba:	8f 83       	std	Y+7, r24	; 0x07
    46bc:	98 87       	std	Y+8, r25	; 0x08
    46be:	a9 87       	std	Y+9, r26	; 0x09
    46c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46c2:	6f 81       	ldd	r22, Y+7	; 0x07
    46c4:	78 85       	ldd	r23, Y+8	; 0x08
    46c6:	89 85       	ldd	r24, Y+9	; 0x09
    46c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	40 e8       	ldi	r20, 0x80	; 128
    46d0:	5f e3       	ldi	r21, 0x3F	; 63
    46d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46d6:	88 23       	and	r24, r24
    46d8:	2c f4       	brge	.+10     	; 0x46e4 <HAL_LCD_u8SendChar+0x18e>
		__ticks = 1;
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	9e 83       	std	Y+6, r25	; 0x06
    46e0:	8d 83       	std	Y+5, r24	; 0x05
    46e2:	3f c0       	rjmp	.+126    	; 0x4762 <HAL_LCD_u8SendChar+0x20c>
	else if (__tmp > 65535)
    46e4:	6f 81       	ldd	r22, Y+7	; 0x07
    46e6:	78 85       	ldd	r23, Y+8	; 0x08
    46e8:	89 85       	ldd	r24, Y+9	; 0x09
    46ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	3f ef       	ldi	r19, 0xFF	; 255
    46f0:	4f e7       	ldi	r20, 0x7F	; 127
    46f2:	57 e4       	ldi	r21, 0x47	; 71
    46f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46f8:	18 16       	cp	r1, r24
    46fa:	4c f5       	brge	.+82     	; 0x474e <HAL_LCD_u8SendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    46fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4700:	8d 85       	ldd	r24, Y+13	; 0x0d
    4702:	9e 85       	ldd	r25, Y+14	; 0x0e
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	40 e2       	ldi	r20, 0x20	; 32
    470a:	51 e4       	ldi	r21, 0x41	; 65
    470c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	bc 01       	movw	r22, r24
    4716:	cd 01       	movw	r24, r26
    4718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	9e 83       	std	Y+6, r25	; 0x06
    4722:	8d 83       	std	Y+5, r24	; 0x05
    4724:	0f c0       	rjmp	.+30     	; 0x4744 <HAL_LCD_u8SendChar+0x1ee>
    4726:	80 e9       	ldi	r24, 0x90	; 144
    4728:	91 e0       	ldi	r25, 0x01	; 1
    472a:	9c 83       	std	Y+4, r25	; 0x04
    472c:	8b 83       	std	Y+3, r24	; 0x03
    472e:	8b 81       	ldd	r24, Y+3	; 0x03
    4730:	9c 81       	ldd	r25, Y+4	; 0x04
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	f1 f7       	brne	.-4      	; 0x4732 <HAL_LCD_u8SendChar+0x1dc>
    4736:	9c 83       	std	Y+4, r25	; 0x04
    4738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    473a:	8d 81       	ldd	r24, Y+5	; 0x05
    473c:	9e 81       	ldd	r25, Y+6	; 0x06
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	9e 83       	std	Y+6, r25	; 0x06
    4742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4744:	8d 81       	ldd	r24, Y+5	; 0x05
    4746:	9e 81       	ldd	r25, Y+6	; 0x06
    4748:	00 97       	sbiw	r24, 0x00	; 0
    474a:	69 f7       	brne	.-38     	; 0x4726 <HAL_LCD_u8SendChar+0x1d0>
    474c:	14 c0       	rjmp	.+40     	; 0x4776 <HAL_LCD_u8SendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474e:	6f 81       	ldd	r22, Y+7	; 0x07
    4750:	78 85       	ldd	r23, Y+8	; 0x08
    4752:	89 85       	ldd	r24, Y+9	; 0x09
    4754:	9a 85       	ldd	r25, Y+10	; 0x0a
    4756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	9e 83       	std	Y+6, r25	; 0x06
    4760:	8d 83       	std	Y+5, r24	; 0x05
    4762:	8d 81       	ldd	r24, Y+5	; 0x05
    4764:	9e 81       	ldd	r25, Y+6	; 0x06
    4766:	9a 83       	std	Y+2, r25	; 0x02
    4768:	89 83       	std	Y+1, r24	; 0x01
    476a:	89 81       	ldd	r24, Y+1	; 0x01
    476c:	9a 81       	ldd	r25, Y+2	; 0x02
    476e:	01 97       	sbiw	r24, 0x01	; 1
    4770:	f1 f7       	brne	.-4      	; 0x476e <HAL_LCD_u8SendChar+0x218>
    4772:	9a 83       	std	Y+2, r25	; 0x02
    4774:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	63 e0       	ldi	r22, 0x03	; 3
    477a:	40 e0       	ldi	r20, 0x00	; 0
    477c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4780:	6d 96       	adiw	r28, 0x1d	; 29
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	f8 94       	cli
    4786:	de bf       	out	0x3e, r29	; 62
    4788:	0f be       	out	0x3f, r0	; 63
    478a:	cd bf       	out	0x3d, r28	; 61
    478c:	cf 91       	pop	r28
    478e:	df 91       	pop	r29
    4790:	08 95       	ret

00004792 <HAL_LCD_u8SendString>:

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
    4792:	df 93       	push	r29
    4794:	cf 93       	push	r28
    4796:	00 d0       	rcall	.+0      	; 0x4798 <HAL_LCD_u8SendString+0x6>
    4798:	00 d0       	rcall	.+0      	; 0x479a <HAL_LCD_u8SendString+0x8>
    479a:	00 d0       	rcall	.+0      	; 0x479c <HAL_LCD_u8SendString+0xa>
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	9e 83       	std	Y+6, r25	; 0x06
    47a2:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    47a4:	19 82       	std	Y+1, r1	; 0x01
    47a6:	1a 82       	std	Y+2, r1	; 0x02
    47a8:	1b 82       	std	Y+3, r1	; 0x03
    47aa:	1c 82       	std	Y+4, r1	; 0x04
    47ac:	15 c0       	rjmp	.+42     	; 0x47d8 <HAL_LCD_u8SendString+0x46>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
    47ae:	29 81       	ldd	r18, Y+1	; 0x01
    47b0:	3a 81       	ldd	r19, Y+2	; 0x02
    47b2:	8d 81       	ldd	r24, Y+5	; 0x05
    47b4:	9e 81       	ldd	r25, Y+6	; 0x06
    47b6:	fc 01       	movw	r30, r24
    47b8:	e2 0f       	add	r30, r18
    47ba:	f3 1f       	adc	r31, r19
    47bc:	80 81       	ld	r24, Z
    47be:	0e 94 ab 22 	call	0x4556	; 0x4556 <HAL_LCD_u8SendChar>
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
}

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	9a 81       	ldd	r25, Y+2	; 0x02
    47c6:	ab 81       	ldd	r26, Y+3	; 0x03
    47c8:	bc 81       	ldd	r27, Y+4	; 0x04
    47ca:	01 96       	adiw	r24, 0x01	; 1
    47cc:	a1 1d       	adc	r26, r1
    47ce:	b1 1d       	adc	r27, r1
    47d0:	89 83       	std	Y+1, r24	; 0x01
    47d2:	9a 83       	std	Y+2, r25	; 0x02
    47d4:	ab 83       	std	Y+3, r26	; 0x03
    47d6:	bc 83       	std	Y+4, r27	; 0x04
    47d8:	29 81       	ldd	r18, Y+1	; 0x01
    47da:	3a 81       	ldd	r19, Y+2	; 0x02
    47dc:	8d 81       	ldd	r24, Y+5	; 0x05
    47de:	9e 81       	ldd	r25, Y+6	; 0x06
    47e0:	fc 01       	movw	r30, r24
    47e2:	e2 0f       	add	r30, r18
    47e4:	f3 1f       	adc	r31, r19
    47e6:	80 81       	ld	r24, Z
    47e8:	88 23       	and	r24, r24
    47ea:	09 f7       	brne	.-62     	; 0x47ae <HAL_LCD_u8SendString+0x1c>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
	}
}
    47ec:	26 96       	adiw	r28, 0x06	; 6
    47ee:	0f b6       	in	r0, 0x3f	; 63
    47f0:	f8 94       	cli
    47f2:	de bf       	out	0x3e, r29	; 62
    47f4:	0f be       	out	0x3f, r0	; 63
    47f6:	cd bf       	out	0x3d, r28	; 61
    47f8:	cf 91       	pop	r28
    47fa:	df 91       	pop	r29
    47fc:	08 95       	ret

000047fe <HAL_LCD_u8SendNumber>:

void HAL_LCD_u8SendNumber(u16 Loc_u8LCD_Number) {
    47fe:	df 93       	push	r29
    4800:	cf 93       	push	r28
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
    4806:	2c 97       	sbiw	r28, 0x0c	; 12
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	de bf       	out	0x3e, r29	; 62
    480e:	0f be       	out	0x3f, r0	; 63
    4810:	cd bf       	out	0x3d, r28	; 61
    4812:	9c 87       	std	Y+12, r25	; 0x0c
    4814:	8b 87       	std	Y+11, r24	; 0x0b
	u8 str[10];
	itoa(Loc_u8LCD_Number, str, 10);
    4816:	8b 85       	ldd	r24, Y+11	; 0x0b
    4818:	9c 85       	ldd	r25, Y+12	; 0x0c
    481a:	9e 01       	movw	r18, r28
    481c:	2f 5f       	subi	r18, 0xFF	; 255
    481e:	3f 4f       	sbci	r19, 0xFF	; 255
    4820:	b9 01       	movw	r22, r18
    4822:	4a e0       	ldi	r20, 0x0A	; 10
    4824:	50 e0       	ldi	r21, 0x00	; 0
    4826:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <itoa>
	HAL_LCD_u8SendString(str);
    482a:	ce 01       	movw	r24, r28
    482c:	01 96       	adiw	r24, 0x01	; 1
    482e:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
}
    4832:	2c 96       	adiw	r28, 0x0c	; 12
    4834:	0f b6       	in	r0, 0x3f	; 63
    4836:	f8 94       	cli
    4838:	de bf       	out	0x3e, r29	; 62
    483a:	0f be       	out	0x3f, r0	; 63
    483c:	cd bf       	out	0x3d, r28	; 61
    483e:	cf 91       	pop	r28
    4840:	df 91       	pop	r29
    4842:	08 95       	ret

00004844 <HAL_LCD_u8GoTo>:

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
    4844:	df 93       	push	r29
    4846:	cf 93       	push	r28
    4848:	cd b7       	in	r28, 0x3d	; 61
    484a:	de b7       	in	r29, 0x3e	; 62
    484c:	c2 54       	subi	r28, 0x42	; 66
    484e:	d0 40       	sbci	r29, 0x00	; 0
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	f8 94       	cli
    4854:	de bf       	out	0x3e, r29	; 62
    4856:	0f be       	out	0x3f, r0	; 63
    4858:	cd bf       	out	0x3d, r28	; 61
    485a:	fe 01       	movw	r30, r28
    485c:	ef 5b       	subi	r30, 0xBF	; 191
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	80 83       	st	Z, r24
    4862:	fe 01       	movw	r30, r28
    4864:	ee 5b       	subi	r30, 0xBE	; 190
    4866:	ff 4f       	sbci	r31, 0xFF	; 255
    4868:	60 83       	st	Z, r22
	if (Loc_u8TypeOfShift == Right_Shift) {
    486a:	fe 01       	movw	r30, r28
    486c:	ef 5b       	subi	r30, 0xBF	; 191
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	80 81       	ld	r24, Z
    4872:	81 30       	cpi	r24, 0x01	; 1
    4874:	09 f0       	breq	.+2      	; 0x4878 <HAL_LCD_u8GoTo+0x34>
    4876:	a0 c0       	rjmp	.+320    	; 0x49b8 <HAL_LCD_u8GoTo+0x174>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4878:	fe 01       	movw	r30, r28
    487a:	fd 96       	adiw	r30, 0x3d	; 61
    487c:	10 82       	st	Z, r1
    487e:	11 82       	std	Z+1, r1	; 0x01
    4880:	12 82       	std	Z+2, r1	; 0x02
    4882:	13 82       	std	Z+3, r1	; 0x03
    4884:	84 c0       	rjmp	.+264    	; 0x498e <HAL_LCD_u8GoTo+0x14a>
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	a0 e0       	ldi	r26, 0x00	; 0
    488c:	b0 e4       	ldi	r27, 0x40	; 64
    488e:	8d ab       	std	Y+53, r24	; 0x35
    4890:	9e ab       	std	Y+54, r25	; 0x36
    4892:	af ab       	std	Y+55, r26	; 0x37
    4894:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4896:	6d a9       	ldd	r22, Y+53	; 0x35
    4898:	7e a9       	ldd	r23, Y+54	; 0x36
    489a:	8f a9       	ldd	r24, Y+55	; 0x37
    489c:	98 ad       	ldd	r25, Y+56	; 0x38
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	4a e7       	ldi	r20, 0x7A	; 122
    48a4:	55 e4       	ldi	r21, 0x45	; 69
    48a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	89 ab       	std	Y+49, r24	; 0x31
    48b0:	9a ab       	std	Y+50, r25	; 0x32
    48b2:	ab ab       	std	Y+51, r26	; 0x33
    48b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    48b6:	69 a9       	ldd	r22, Y+49	; 0x31
    48b8:	7a a9       	ldd	r23, Y+50	; 0x32
    48ba:	8b a9       	ldd	r24, Y+51	; 0x33
    48bc:	9c a9       	ldd	r25, Y+52	; 0x34
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	40 e8       	ldi	r20, 0x80	; 128
    48c4:	5f e3       	ldi	r21, 0x3F	; 63
    48c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48ca:	88 23       	and	r24, r24
    48cc:	2c f4       	brge	.+10     	; 0x48d8 <HAL_LCD_u8GoTo+0x94>
		__ticks = 1;
    48ce:	81 e0       	ldi	r24, 0x01	; 1
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	98 ab       	std	Y+48, r25	; 0x30
    48d4:	8f a7       	std	Y+47, r24	; 0x2f
    48d6:	3f c0       	rjmp	.+126    	; 0x4956 <HAL_LCD_u8GoTo+0x112>
	else if (__tmp > 65535)
    48d8:	69 a9       	ldd	r22, Y+49	; 0x31
    48da:	7a a9       	ldd	r23, Y+50	; 0x32
    48dc:	8b a9       	ldd	r24, Y+51	; 0x33
    48de:	9c a9       	ldd	r25, Y+52	; 0x34
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	3f ef       	ldi	r19, 0xFF	; 255
    48e4:	4f e7       	ldi	r20, 0x7F	; 127
    48e6:	57 e4       	ldi	r21, 0x47	; 71
    48e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48ec:	18 16       	cp	r1, r24
    48ee:	4c f5       	brge	.+82     	; 0x4942 <HAL_LCD_u8GoTo+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48f0:	6d a9       	ldd	r22, Y+53	; 0x35
    48f2:	7e a9       	ldd	r23, Y+54	; 0x36
    48f4:	8f a9       	ldd	r24, Y+55	; 0x37
    48f6:	98 ad       	ldd	r25, Y+56	; 0x38
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e2       	ldi	r20, 0x20	; 32
    48fe:	51 e4       	ldi	r21, 0x41	; 65
    4900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	bc 01       	movw	r22, r24
    490a:	cd 01       	movw	r24, r26
    490c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4910:	dc 01       	movw	r26, r24
    4912:	cb 01       	movw	r24, r22
    4914:	98 ab       	std	Y+48, r25	; 0x30
    4916:	8f a7       	std	Y+47, r24	; 0x2f
    4918:	0f c0       	rjmp	.+30     	; 0x4938 <HAL_LCD_u8GoTo+0xf4>
    491a:	80 e9       	ldi	r24, 0x90	; 144
    491c:	91 e0       	ldi	r25, 0x01	; 1
    491e:	9e a7       	std	Y+46, r25	; 0x2e
    4920:	8d a7       	std	Y+45, r24	; 0x2d
    4922:	8d a5       	ldd	r24, Y+45	; 0x2d
    4924:	9e a5       	ldd	r25, Y+46	; 0x2e
    4926:	01 97       	sbiw	r24, 0x01	; 1
    4928:	f1 f7       	brne	.-4      	; 0x4926 <HAL_LCD_u8GoTo+0xe2>
    492a:	9e a7       	std	Y+46, r25	; 0x2e
    492c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4930:	98 a9       	ldd	r25, Y+48	; 0x30
    4932:	01 97       	sbiw	r24, 0x01	; 1
    4934:	98 ab       	std	Y+48, r25	; 0x30
    4936:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4938:	8f a5       	ldd	r24, Y+47	; 0x2f
    493a:	98 a9       	ldd	r25, Y+48	; 0x30
    493c:	00 97       	sbiw	r24, 0x00	; 0
    493e:	69 f7       	brne	.-38     	; 0x491a <HAL_LCD_u8GoTo+0xd6>
    4940:	14 c0       	rjmp	.+40     	; 0x496a <HAL_LCD_u8GoTo+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4942:	69 a9       	ldd	r22, Y+49	; 0x31
    4944:	7a a9       	ldd	r23, Y+50	; 0x32
    4946:	8b a9       	ldd	r24, Y+51	; 0x33
    4948:	9c a9       	ldd	r25, Y+52	; 0x34
    494a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	98 ab       	std	Y+48, r25	; 0x30
    4954:	8f a7       	std	Y+47, r24	; 0x2f
    4956:	8f a5       	ldd	r24, Y+47	; 0x2f
    4958:	98 a9       	ldd	r25, Y+48	; 0x30
    495a:	9c a7       	std	Y+44, r25	; 0x2c
    495c:	8b a7       	std	Y+43, r24	; 0x2b
    495e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4960:	9c a5       	ldd	r25, Y+44	; 0x2c
    4962:	01 97       	sbiw	r24, 0x01	; 1
    4964:	f1 f7       	brne	.-4      	; 0x4962 <HAL_LCD_u8GoTo+0x11e>
    4966:	9c a7       	std	Y+44, r25	; 0x2c
    4968:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
    496a:	8c e1       	ldi	r24, 0x1C	; 28
    496c:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
	HAL_LCD_u8SendString(str);
}

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
	if (Loc_u8TypeOfShift == Right_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4970:	fe 01       	movw	r30, r28
    4972:	fd 96       	adiw	r30, 0x3d	; 61
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	a2 81       	ldd	r26, Z+2	; 0x02
    497a:	b3 81       	ldd	r27, Z+3	; 0x03
    497c:	01 96       	adiw	r24, 0x01	; 1
    497e:	a1 1d       	adc	r26, r1
    4980:	b1 1d       	adc	r27, r1
    4982:	fe 01       	movw	r30, r28
    4984:	fd 96       	adiw	r30, 0x3d	; 61
    4986:	80 83       	st	Z, r24
    4988:	91 83       	std	Z+1, r25	; 0x01
    498a:	a2 83       	std	Z+2, r26	; 0x02
    498c:	b3 83       	std	Z+3, r27	; 0x03
    498e:	fe 01       	movw	r30, r28
    4990:	ee 5b       	subi	r30, 0xBE	; 190
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	80 81       	ld	r24, Z
    4996:	28 2f       	mov	r18, r24
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	40 e0       	ldi	r20, 0x00	; 0
    499c:	50 e0       	ldi	r21, 0x00	; 0
    499e:	fe 01       	movw	r30, r28
    49a0:	fd 96       	adiw	r30, 0x3d	; 61
    49a2:	80 81       	ld	r24, Z
    49a4:	91 81       	ldd	r25, Z+1	; 0x01
    49a6:	a2 81       	ldd	r26, Z+2	; 0x02
    49a8:	b3 81       	ldd	r27, Z+3	; 0x03
    49aa:	82 17       	cp	r24, r18
    49ac:	93 07       	cpc	r25, r19
    49ae:	a4 07       	cpc	r26, r20
    49b0:	b5 07       	cpc	r27, r21
    49b2:	08 f4       	brcc	.+2      	; 0x49b6 <HAL_LCD_u8GoTo+0x172>
    49b4:	68 cf       	rjmp	.-304    	; 0x4886 <HAL_LCD_u8GoTo+0x42>
    49b6:	98 c1       	rjmp	.+816    	; 0x4ce8 <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
    49b8:	fe 01       	movw	r30, r28
    49ba:	ef 5b       	subi	r30, 0xBF	; 191
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	80 81       	ld	r24, Z
    49c0:	88 23       	and	r24, r24
    49c2:	09 f0       	breq	.+2      	; 0x49c6 <HAL_LCD_u8GoTo+0x182>
    49c4:	98 c0       	rjmp	.+304    	; 0x4af6 <HAL_LCD_u8GoTo+0x2b2>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    49c6:	19 ae       	std	Y+57, r1	; 0x39
    49c8:	1a ae       	std	Y+58, r1	; 0x3a
    49ca:	1b ae       	std	Y+59, r1	; 0x3b
    49cc:	1c ae       	std	Y+60, r1	; 0x3c
    49ce:	80 c0       	rjmp	.+256    	; 0x4ad0 <HAL_LCD_u8GoTo+0x28c>
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	a0 e0       	ldi	r26, 0x00	; 0
    49d6:	b0 e4       	ldi	r27, 0x40	; 64
    49d8:	8f a3       	std	Y+39, r24	; 0x27
    49da:	98 a7       	std	Y+40, r25	; 0x28
    49dc:	a9 a7       	std	Y+41, r26	; 0x29
    49de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49e0:	6f a1       	ldd	r22, Y+39	; 0x27
    49e2:	78 a5       	ldd	r23, Y+40	; 0x28
    49e4:	89 a5       	ldd	r24, Y+41	; 0x29
    49e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	4a e7       	ldi	r20, 0x7A	; 122
    49ee:	55 e4       	ldi	r21, 0x45	; 69
    49f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f4:	dc 01       	movw	r26, r24
    49f6:	cb 01       	movw	r24, r22
    49f8:	8b a3       	std	Y+35, r24	; 0x23
    49fa:	9c a3       	std	Y+36, r25	; 0x24
    49fc:	ad a3       	std	Y+37, r26	; 0x25
    49fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a00:	6b a1       	ldd	r22, Y+35	; 0x23
    4a02:	7c a1       	ldd	r23, Y+36	; 0x24
    4a04:	8d a1       	ldd	r24, Y+37	; 0x25
    4a06:	9e a1       	ldd	r25, Y+38	; 0x26
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	40 e8       	ldi	r20, 0x80	; 128
    4a0e:	5f e3       	ldi	r21, 0x3F	; 63
    4a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a14:	88 23       	and	r24, r24
    4a16:	2c f4       	brge	.+10     	; 0x4a22 <HAL_LCD_u8GoTo+0x1de>
		__ticks = 1;
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	9a a3       	std	Y+34, r25	; 0x22
    4a1e:	89 a3       	std	Y+33, r24	; 0x21
    4a20:	3f c0       	rjmp	.+126    	; 0x4aa0 <HAL_LCD_u8GoTo+0x25c>
	else if (__tmp > 65535)
    4a22:	6b a1       	ldd	r22, Y+35	; 0x23
    4a24:	7c a1       	ldd	r23, Y+36	; 0x24
    4a26:	8d a1       	ldd	r24, Y+37	; 0x25
    4a28:	9e a1       	ldd	r25, Y+38	; 0x26
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	3f ef       	ldi	r19, 0xFF	; 255
    4a2e:	4f e7       	ldi	r20, 0x7F	; 127
    4a30:	57 e4       	ldi	r21, 0x47	; 71
    4a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a36:	18 16       	cp	r1, r24
    4a38:	4c f5       	brge	.+82     	; 0x4a8c <HAL_LCD_u8GoTo+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3a:	6f a1       	ldd	r22, Y+39	; 0x27
    4a3c:	78 a5       	ldd	r23, Y+40	; 0x28
    4a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    4a40:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	40 e2       	ldi	r20, 0x20	; 32
    4a48:	51 e4       	ldi	r21, 0x41	; 65
    4a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a4e:	dc 01       	movw	r26, r24
    4a50:	cb 01       	movw	r24, r22
    4a52:	bc 01       	movw	r22, r24
    4a54:	cd 01       	movw	r24, r26
    4a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	9a a3       	std	Y+34, r25	; 0x22
    4a60:	89 a3       	std	Y+33, r24	; 0x21
    4a62:	0f c0       	rjmp	.+30     	; 0x4a82 <HAL_LCD_u8GoTo+0x23e>
    4a64:	80 e9       	ldi	r24, 0x90	; 144
    4a66:	91 e0       	ldi	r25, 0x01	; 1
    4a68:	98 a3       	std	Y+32, r25	; 0x20
    4a6a:	8f 8f       	std	Y+31, r24	; 0x1f
    4a6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a6e:	98 a1       	ldd	r25, Y+32	; 0x20
    4a70:	01 97       	sbiw	r24, 0x01	; 1
    4a72:	f1 f7       	brne	.-4      	; 0x4a70 <HAL_LCD_u8GoTo+0x22c>
    4a74:	98 a3       	std	Y+32, r25	; 0x20
    4a76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a78:	89 a1       	ldd	r24, Y+33	; 0x21
    4a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    4a7c:	01 97       	sbiw	r24, 0x01	; 1
    4a7e:	9a a3       	std	Y+34, r25	; 0x22
    4a80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a82:	89 a1       	ldd	r24, Y+33	; 0x21
    4a84:	9a a1       	ldd	r25, Y+34	; 0x22
    4a86:	00 97       	sbiw	r24, 0x00	; 0
    4a88:	69 f7       	brne	.-38     	; 0x4a64 <HAL_LCD_u8GoTo+0x220>
    4a8a:	14 c0       	rjmp	.+40     	; 0x4ab4 <HAL_LCD_u8GoTo+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    4a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    4a90:	8d a1       	ldd	r24, Y+37	; 0x25
    4a92:	9e a1       	ldd	r25, Y+38	; 0x26
    4a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a98:	dc 01       	movw	r26, r24
    4a9a:	cb 01       	movw	r24, r22
    4a9c:	9a a3       	std	Y+34, r25	; 0x22
    4a9e:	89 a3       	std	Y+33, r24	; 0x21
    4aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    4aa2:	9a a1       	ldd	r25, Y+34	; 0x22
    4aa4:	9e 8f       	std	Y+30, r25	; 0x1e
    4aa6:	8d 8f       	std	Y+29, r24	; 0x1d
    4aa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4aaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4aac:	01 97       	sbiw	r24, 0x01	; 1
    4aae:	f1 f7       	brne	.-4      	; 0x4aac <HAL_LCD_u8GoTo+0x268>
    4ab0:	9e 8f       	std	Y+30, r25	; 0x1e
    4ab2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
    4ab4:	88 e1       	ldi	r24, 0x18	; 24
    4ab6:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4aba:	89 ad       	ldd	r24, Y+57	; 0x39
    4abc:	9a ad       	ldd	r25, Y+58	; 0x3a
    4abe:	ab ad       	ldd	r26, Y+59	; 0x3b
    4ac0:	bc ad       	ldd	r27, Y+60	; 0x3c
    4ac2:	01 96       	adiw	r24, 0x01	; 1
    4ac4:	a1 1d       	adc	r26, r1
    4ac6:	b1 1d       	adc	r27, r1
    4ac8:	89 af       	std	Y+57, r24	; 0x39
    4aca:	9a af       	std	Y+58, r25	; 0x3a
    4acc:	ab af       	std	Y+59, r26	; 0x3b
    4ace:	bc af       	std	Y+60, r27	; 0x3c
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	ee 5b       	subi	r30, 0xBE	; 190
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	28 2f       	mov	r18, r24
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	40 e0       	ldi	r20, 0x00	; 0
    4ade:	50 e0       	ldi	r21, 0x00	; 0
    4ae0:	89 ad       	ldd	r24, Y+57	; 0x39
    4ae2:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ae4:	ab ad       	ldd	r26, Y+59	; 0x3b
    4ae6:	bc ad       	ldd	r27, Y+60	; 0x3c
    4ae8:	82 17       	cp	r24, r18
    4aea:	93 07       	cpc	r25, r19
    4aec:	a4 07       	cpc	r26, r20
    4aee:	b5 07       	cpc	r27, r21
    4af0:	08 f4       	brcc	.+2      	; 0x4af4 <HAL_LCD_u8GoTo+0x2b0>
    4af2:	6e cf       	rjmp	.-292    	; 0x49d0 <HAL_LCD_u8GoTo+0x18c>
    4af4:	f9 c0       	rjmp	.+498    	; 0x4ce8 <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == First_Line) {
    4af6:	fe 01       	movw	r30, r28
    4af8:	ef 5b       	subi	r30, 0xBF	; 191
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	80 81       	ld	r24, Z
    4afe:	82 30       	cpi	r24, 0x02	; 2
    4b00:	09 f0       	breq	.+2      	; 0x4b04 <HAL_LCD_u8GoTo+0x2c0>
    4b02:	76 c0       	rjmp	.+236    	; 0x4bf0 <HAL_LCD_u8GoTo+0x3ac>
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	a0 e0       	ldi	r26, 0x00	; 0
    4b0a:	b0 e4       	ldi	r27, 0x40	; 64
    4b0c:	89 8f       	std	Y+25, r24	; 0x19
    4b0e:	9a 8f       	std	Y+26, r25	; 0x1a
    4b10:	ab 8f       	std	Y+27, r26	; 0x1b
    4b12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b14:	69 8d       	ldd	r22, Y+25	; 0x19
    4b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b1c:	20 e0       	ldi	r18, 0x00	; 0
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	4a e7       	ldi	r20, 0x7A	; 122
    4b22:	55 e4       	ldi	r21, 0x45	; 69
    4b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	8d 8b       	std	Y+21, r24	; 0x15
    4b2e:	9e 8b       	std	Y+22, r25	; 0x16
    4b30:	af 8b       	std	Y+23, r26	; 0x17
    4b32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b34:	6d 89       	ldd	r22, Y+21	; 0x15
    4b36:	7e 89       	ldd	r23, Y+22	; 0x16
    4b38:	8f 89       	ldd	r24, Y+23	; 0x17
    4b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	40 e8       	ldi	r20, 0x80	; 128
    4b42:	5f e3       	ldi	r21, 0x3F	; 63
    4b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b48:	88 23       	and	r24, r24
    4b4a:	2c f4       	brge	.+10     	; 0x4b56 <HAL_LCD_u8GoTo+0x312>
		__ticks = 1;
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	9c 8b       	std	Y+20, r25	; 0x14
    4b52:	8b 8b       	std	Y+19, r24	; 0x13
    4b54:	3f c0       	rjmp	.+126    	; 0x4bd4 <HAL_LCD_u8GoTo+0x390>
	else if (__tmp > 65535)
    4b56:	6d 89       	ldd	r22, Y+21	; 0x15
    4b58:	7e 89       	ldd	r23, Y+22	; 0x16
    4b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	3f ef       	ldi	r19, 0xFF	; 255
    4b62:	4f e7       	ldi	r20, 0x7F	; 127
    4b64:	57 e4       	ldi	r21, 0x47	; 71
    4b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b6a:	18 16       	cp	r1, r24
    4b6c:	4c f5       	brge	.+82     	; 0x4bc0 <HAL_LCD_u8GoTo+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	40 e2       	ldi	r20, 0x20	; 32
    4b7c:	51 e4       	ldi	r21, 0x41	; 65
    4b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b82:	dc 01       	movw	r26, r24
    4b84:	cb 01       	movw	r24, r22
    4b86:	bc 01       	movw	r22, r24
    4b88:	cd 01       	movw	r24, r26
    4b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8e:	dc 01       	movw	r26, r24
    4b90:	cb 01       	movw	r24, r22
    4b92:	9c 8b       	std	Y+20, r25	; 0x14
    4b94:	8b 8b       	std	Y+19, r24	; 0x13
    4b96:	0f c0       	rjmp	.+30     	; 0x4bb6 <HAL_LCD_u8GoTo+0x372>
    4b98:	80 e9       	ldi	r24, 0x90	; 144
    4b9a:	91 e0       	ldi	r25, 0x01	; 1
    4b9c:	9a 8b       	std	Y+18, r25	; 0x12
    4b9e:	89 8b       	std	Y+17, r24	; 0x11
    4ba0:	89 89       	ldd	r24, Y+17	; 0x11
    4ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    4ba4:	01 97       	sbiw	r24, 0x01	; 1
    4ba6:	f1 f7       	brne	.-4      	; 0x4ba4 <HAL_LCD_u8GoTo+0x360>
    4ba8:	9a 8b       	std	Y+18, r25	; 0x12
    4baa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bac:	8b 89       	ldd	r24, Y+19	; 0x13
    4bae:	9c 89       	ldd	r25, Y+20	; 0x14
    4bb0:	01 97       	sbiw	r24, 0x01	; 1
    4bb2:	9c 8b       	std	Y+20, r25	; 0x14
    4bb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    4bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    4bba:	00 97       	sbiw	r24, 0x00	; 0
    4bbc:	69 f7       	brne	.-38     	; 0x4b98 <HAL_LCD_u8GoTo+0x354>
    4bbe:	14 c0       	rjmp	.+40     	; 0x4be8 <HAL_LCD_u8GoTo+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    4bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    4bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    4bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	9c 8b       	std	Y+20, r25	; 0x14
    4bd2:	8b 8b       	std	Y+19, r24	; 0x13
    4bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    4bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    4bd8:	98 8b       	std	Y+16, r25	; 0x10
    4bda:	8f 87       	std	Y+15, r24	; 0x0f
    4bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bde:	98 89       	ldd	r25, Y+16	; 0x10
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	f1 f7       	brne	.-4      	; 0x4be0 <HAL_LCD_u8GoTo+0x39c>
    4be4:	98 8b       	std	Y+16, r25	; 0x10
    4be6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_1stLine);
    4be8:	80 e8       	ldi	r24, 0x80	; 128
    4bea:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
    4bee:	7c c0       	rjmp	.+248    	; 0x4ce8 <HAL_LCD_u8GoTo+0x4a4>
	} else if (Loc_u8TypeOfShift == Second_Line) {
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	ef 5b       	subi	r30, 0xBF	; 191
    4bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf6:	80 81       	ld	r24, Z
    4bf8:	83 30       	cpi	r24, 0x03	; 3
    4bfa:	09 f0       	breq	.+2      	; 0x4bfe <HAL_LCD_u8GoTo+0x3ba>
    4bfc:	75 c0       	rjmp	.+234    	; 0x4ce8 <HAL_LCD_u8GoTo+0x4a4>
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	a0 e0       	ldi	r26, 0x00	; 0
    4c04:	b0 e4       	ldi	r27, 0x40	; 64
    4c06:	8b 87       	std	Y+11, r24	; 0x0b
    4c08:	9c 87       	std	Y+12, r25	; 0x0c
    4c0a:	ad 87       	std	Y+13, r26	; 0x0d
    4c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	4a e7       	ldi	r20, 0x7A	; 122
    4c1c:	55 e4       	ldi	r21, 0x45	; 69
    4c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	8f 83       	std	Y+7, r24	; 0x07
    4c28:	98 87       	std	Y+8, r25	; 0x08
    4c2a:	a9 87       	std	Y+9, r26	; 0x09
    4c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c30:	78 85       	ldd	r23, Y+8	; 0x08
    4c32:	89 85       	ldd	r24, Y+9	; 0x09
    4c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	40 e8       	ldi	r20, 0x80	; 128
    4c3c:	5f e3       	ldi	r21, 0x3F	; 63
    4c3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c42:	88 23       	and	r24, r24
    4c44:	2c f4       	brge	.+10     	; 0x4c50 <HAL_LCD_u8GoTo+0x40c>
		__ticks = 1;
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	9e 83       	std	Y+6, r25	; 0x06
    4c4c:	8d 83       	std	Y+5, r24	; 0x05
    4c4e:	3f c0       	rjmp	.+126    	; 0x4cce <HAL_LCD_u8GoTo+0x48a>
	else if (__tmp > 65535)
    4c50:	6f 81       	ldd	r22, Y+7	; 0x07
    4c52:	78 85       	ldd	r23, Y+8	; 0x08
    4c54:	89 85       	ldd	r24, Y+9	; 0x09
    4c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	3f ef       	ldi	r19, 0xFF	; 255
    4c5c:	4f e7       	ldi	r20, 0x7F	; 127
    4c5e:	57 e4       	ldi	r21, 0x47	; 71
    4c60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c64:	18 16       	cp	r1, r24
    4c66:	4c f5       	brge	.+82     	; 0x4cba <HAL_LCD_u8GoTo+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	40 e2       	ldi	r20, 0x20	; 32
    4c76:	51 e4       	ldi	r21, 0x41	; 65
    4c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	bc 01       	movw	r22, r24
    4c82:	cd 01       	movw	r24, r26
    4c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	9e 83       	std	Y+6, r25	; 0x06
    4c8e:	8d 83       	std	Y+5, r24	; 0x05
    4c90:	0f c0       	rjmp	.+30     	; 0x4cb0 <HAL_LCD_u8GoTo+0x46c>
    4c92:	80 e9       	ldi	r24, 0x90	; 144
    4c94:	91 e0       	ldi	r25, 0x01	; 1
    4c96:	9c 83       	std	Y+4, r25	; 0x04
    4c98:	8b 83       	std	Y+3, r24	; 0x03
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <HAL_LCD_u8GoTo+0x45a>
    4ca2:	9c 83       	std	Y+4, r25	; 0x04
    4ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    4caa:	01 97       	sbiw	r24, 0x01	; 1
    4cac:	9e 83       	std	Y+6, r25	; 0x06
    4cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	69 f7       	brne	.-38     	; 0x4c92 <HAL_LCD_u8GoTo+0x44e>
    4cb8:	14 c0       	rjmp	.+40     	; 0x4ce2 <HAL_LCD_u8GoTo+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cba:	6f 81       	ldd	r22, Y+7	; 0x07
    4cbc:	78 85       	ldd	r23, Y+8	; 0x08
    4cbe:	89 85       	ldd	r24, Y+9	; 0x09
    4cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	9e 83       	std	Y+6, r25	; 0x06
    4ccc:	8d 83       	std	Y+5, r24	; 0x05
    4cce:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd2:	9a 83       	std	Y+2, r25	; 0x02
    4cd4:	89 83       	std	Y+1, r24	; 0x01
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
    4cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cda:	01 97       	sbiw	r24, 0x01	; 1
    4cdc:	f1 f7       	brne	.-4      	; 0x4cda <HAL_LCD_u8GoTo+0x496>
    4cde:	9a 83       	std	Y+2, r25	; 0x02
    4ce0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_2stLine);
    4ce2:	80 ec       	ldi	r24, 0xC0	; 192
    4ce4:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
	}
}
    4ce8:	ce 5b       	subi	r28, 0xBE	; 190
    4cea:	df 4f       	sbci	r29, 0xFF	; 255
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	f8 94       	cli
    4cf0:	de bf       	out	0x3e, r29	; 62
    4cf2:	0f be       	out	0x3f, r0	; 63
    4cf4:	cd bf       	out	0x3d, r28	; 61
    4cf6:	cf 91       	pop	r28
    4cf8:	df 91       	pop	r29
    4cfa:	08 95       	ret

00004cfc <HAL_LCD_u8Clear>:

void HAL_LCD_u8Clear() {
    4cfc:	df 93       	push	r29
    4cfe:	cf 93       	push	r28
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
    4d04:	2e 97       	sbiw	r28, 0x0e	; 14
    4d06:	0f b6       	in	r0, 0x3f	; 63
    4d08:	f8 94       	cli
    4d0a:	de bf       	out	0x3e, r29	; 62
    4d0c:	0f be       	out	0x3f, r0	; 63
    4d0e:	cd bf       	out	0x3d, r28	; 61
    4d10:	80 e0       	ldi	r24, 0x00	; 0
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	a0 e0       	ldi	r26, 0x00	; 0
    4d16:	b0 e4       	ldi	r27, 0x40	; 64
    4d18:	8b 87       	std	Y+11, r24	; 0x0b
    4d1a:	9c 87       	std	Y+12, r25	; 0x0c
    4d1c:	ad 87       	std	Y+13, r26	; 0x0d
    4d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	4a e7       	ldi	r20, 0x7A	; 122
    4d2e:	55 e4       	ldi	r21, 0x45	; 69
    4d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d34:	dc 01       	movw	r26, r24
    4d36:	cb 01       	movw	r24, r22
    4d38:	8f 83       	std	Y+7, r24	; 0x07
    4d3a:	98 87       	std	Y+8, r25	; 0x08
    4d3c:	a9 87       	std	Y+9, r26	; 0x09
    4d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d40:	6f 81       	ldd	r22, Y+7	; 0x07
    4d42:	78 85       	ldd	r23, Y+8	; 0x08
    4d44:	89 85       	ldd	r24, Y+9	; 0x09
    4d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	40 e8       	ldi	r20, 0x80	; 128
    4d4e:	5f e3       	ldi	r21, 0x3F	; 63
    4d50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d54:	88 23       	and	r24, r24
    4d56:	2c f4       	brge	.+10     	; 0x4d62 <HAL_LCD_u8Clear+0x66>
		__ticks = 1;
    4d58:	81 e0       	ldi	r24, 0x01	; 1
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	9e 83       	std	Y+6, r25	; 0x06
    4d5e:	8d 83       	std	Y+5, r24	; 0x05
    4d60:	3f c0       	rjmp	.+126    	; 0x4de0 <HAL_LCD_u8Clear+0xe4>
	else if (__tmp > 65535)
    4d62:	6f 81       	ldd	r22, Y+7	; 0x07
    4d64:	78 85       	ldd	r23, Y+8	; 0x08
    4d66:	89 85       	ldd	r24, Y+9	; 0x09
    4d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	3f ef       	ldi	r19, 0xFF	; 255
    4d6e:	4f e7       	ldi	r20, 0x7F	; 127
    4d70:	57 e4       	ldi	r21, 0x47	; 71
    4d72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d76:	18 16       	cp	r1, r24
    4d78:	4c f5       	brge	.+82     	; 0x4dcc <HAL_LCD_u8Clear+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	40 e2       	ldi	r20, 0x20	; 32
    4d88:	51 e4       	ldi	r21, 0x41	; 65
    4d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	bc 01       	movw	r22, r24
    4d94:	cd 01       	movw	r24, r26
    4d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d9a:	dc 01       	movw	r26, r24
    4d9c:	cb 01       	movw	r24, r22
    4d9e:	9e 83       	std	Y+6, r25	; 0x06
    4da0:	8d 83       	std	Y+5, r24	; 0x05
    4da2:	0f c0       	rjmp	.+30     	; 0x4dc2 <HAL_LCD_u8Clear+0xc6>
    4da4:	80 e9       	ldi	r24, 0x90	; 144
    4da6:	91 e0       	ldi	r25, 0x01	; 1
    4da8:	9c 83       	std	Y+4, r25	; 0x04
    4daa:	8b 83       	std	Y+3, r24	; 0x03
    4dac:	8b 81       	ldd	r24, Y+3	; 0x03
    4dae:	9c 81       	ldd	r25, Y+4	; 0x04
    4db0:	01 97       	sbiw	r24, 0x01	; 1
    4db2:	f1 f7       	brne	.-4      	; 0x4db0 <HAL_LCD_u8Clear+0xb4>
    4db4:	9c 83       	std	Y+4, r25	; 0x04
    4db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4db8:	8d 81       	ldd	r24, Y+5	; 0x05
    4dba:	9e 81       	ldd	r25, Y+6	; 0x06
    4dbc:	01 97       	sbiw	r24, 0x01	; 1
    4dbe:	9e 83       	std	Y+6, r25	; 0x06
    4dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc6:	00 97       	sbiw	r24, 0x00	; 0
    4dc8:	69 f7       	brne	.-38     	; 0x4da4 <HAL_LCD_u8Clear+0xa8>
    4dca:	14 c0       	rjmp	.+40     	; 0x4df4 <HAL_LCD_u8Clear+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    4dce:	78 85       	ldd	r23, Y+8	; 0x08
    4dd0:	89 85       	ldd	r24, Y+9	; 0x09
    4dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	9e 83       	std	Y+6, r25	; 0x06
    4dde:	8d 83       	std	Y+5, r24	; 0x05
    4de0:	8d 81       	ldd	r24, Y+5	; 0x05
    4de2:	9e 81       	ldd	r25, Y+6	; 0x06
    4de4:	9a 83       	std	Y+2, r25	; 0x02
    4de6:	89 83       	std	Y+1, r24	; 0x01
    4de8:	89 81       	ldd	r24, Y+1	; 0x01
    4dea:	9a 81       	ldd	r25, Y+2	; 0x02
    4dec:	01 97       	sbiw	r24, 0x01	; 1
    4dee:	f1 f7       	brne	.-4      	; 0x4dec <HAL_LCD_u8Clear+0xf0>
    4df0:	9a 83       	std	Y+2, r25	; 0x02
    4df2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    4df4:	81 e0       	ldi	r24, 0x01	; 1
    4df6:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
}
    4dfa:	2e 96       	adiw	r28, 0x0e	; 14
    4dfc:	0f b6       	in	r0, 0x3f	; 63
    4dfe:	f8 94       	cli
    4e00:	de bf       	out	0x3e, r29	; 62
    4e02:	0f be       	out	0x3f, r0	; 63
    4e04:	cd bf       	out	0x3d, r28	; 61
    4e06:	cf 91       	pop	r28
    4e08:	df 91       	pop	r29
    4e0a:	08 95       	ret

00004e0c <HAL_LCD_u8CustomChar>:

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
    4e0c:	df 93       	push	r29
    4e0e:	cf 93       	push	r28
    4e10:	00 d0       	rcall	.+0      	; 0x4e12 <HAL_LCD_u8CustomChar+0x6>
    4e12:	00 d0       	rcall	.+0      	; 0x4e14 <HAL_LCD_u8CustomChar+0x8>
    4e14:	cd b7       	in	r28, 0x3d	; 61
    4e16:	de b7       	in	r29, 0x3e	; 62
    4e18:	8a 83       	std	Y+2, r24	; 0x02
    4e1a:	7c 83       	std	Y+4, r23	; 0x04
    4e1c:	6b 83       	std	Y+3, r22	; 0x03
	if (Loc_u8Location < 8) {
    4e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e20:	88 30       	cpi	r24, 0x08	; 8
    4e22:	f8 f4       	brcc	.+62     	; 0x4e62 <HAL_LCD_u8CustomChar+0x56>
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
    4e24:	8a 81       	ldd	r24, Y+2	; 0x02
    4e26:	88 2f       	mov	r24, r24
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	08 96       	adiw	r24, 0x08	; 8
    4e2c:	88 0f       	add	r24, r24
    4e2e:	99 1f       	adc	r25, r25
    4e30:	88 0f       	add	r24, r24
    4e32:	99 1f       	adc	r25, r25
    4e34:	88 0f       	add	r24, r24
    4e36:	99 1f       	adc	r25, r25
    4e38:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
		for( u8 count = 0; count < 8; count++)
    4e3c:	19 82       	std	Y+1, r1	; 0x01
    4e3e:	0e c0       	rjmp	.+28     	; 0x4e5c <HAL_LCD_u8CustomChar+0x50>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
    4e40:	89 81       	ldd	r24, Y+1	; 0x01
    4e42:	28 2f       	mov	r18, r24
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	8b 81       	ldd	r24, Y+3	; 0x03
    4e48:	9c 81       	ldd	r25, Y+4	; 0x04
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	e2 0f       	add	r30, r18
    4e4e:	f3 1f       	adc	r31, r19
    4e50:	80 81       	ld	r24, Z
    4e52:	0e 94 ab 22 	call	0x4556	; 0x4556 <HAL_LCD_u8SendChar>
}

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
	if (Loc_u8Location < 8) {
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
		for( u8 count = 0; count < 8; count++)
    4e56:	89 81       	ldd	r24, Y+1	; 0x01
    4e58:	8f 5f       	subi	r24, 0xFF	; 255
    4e5a:	89 83       	std	Y+1, r24	; 0x01
    4e5c:	89 81       	ldd	r24, Y+1	; 0x01
    4e5e:	88 30       	cpi	r24, 0x08	; 8
    4e60:	78 f3       	brcs	.-34     	; 0x4e40 <HAL_LCD_u8CustomChar+0x34>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
	}
	HAL_LCD_u8SendCommands(0x02);
    4e62:	82 e0       	ldi	r24, 0x02	; 2
    4e64:	0e 94 8d 21 	call	0x431a	; 0x431a <HAL_LCD_u8SendCommands>
}
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	cf 91       	pop	r28
    4e72:	df 91       	pop	r29
    4e74:	08 95       	ret

00004e76 <HAL_LCD_voidData>:

 void  HAL_LCD_voidData(u8 Data)
{
    4e76:	df 93       	push	r29
    4e78:	cf 93       	push	r28
    4e7a:	0f 92       	push	r0
    4e7c:	cd b7       	in	r28, 0x3d	; 61
    4e7e:	de b7       	in	r29, 0x3e	; 62
    4e80:	89 83       	std	Y+1, r24	; 0x01

  if (GET_BIT(Data,0)==1)
    4e82:	89 81       	ldd	r24, Y+1	; 0x01
    4e84:	88 2f       	mov	r24, r24
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	81 70       	andi	r24, 0x01	; 1
    4e8a:	90 70       	andi	r25, 0x00	; 0
    4e8c:	88 23       	and	r24, r24
    4e8e:	31 f0       	breq	.+12     	; 0x4e9c <HAL_LCD_voidData+0x26>
  {
    MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D4_PIN,Pin_High);
    4e90:	80 e0       	ldi	r24, 0x00	; 0
    4e92:	64 e0       	ldi	r22, 0x04	; 4
    4e94:	41 e0       	ldi	r20, 0x01	; 1
    4e96:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4e9a:	05 c0       	rjmp	.+10     	; 0x4ea6 <HAL_LCD_voidData+0x30>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D4_PIN,Pin_Low);
    4e9c:	80 e0       	ldi	r24, 0x00	; 0
    4e9e:	64 e0       	ldi	r22, 0x04	; 4
    4ea0:	40 e0       	ldi	r20, 0x00	; 0
    4ea2:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }
  if (GET_BIT(Data,1)==1)
    4ea6:	89 81       	ldd	r24, Y+1	; 0x01
    4ea8:	86 95       	lsr	r24
    4eaa:	88 2f       	mov	r24, r24
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	81 70       	andi	r24, 0x01	; 1
    4eb0:	90 70       	andi	r25, 0x00	; 0
    4eb2:	88 23       	and	r24, r24
    4eb4:	31 f0       	breq	.+12     	; 0x4ec2 <HAL_LCD_voidData+0x4c>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D5_PIN,Pin_High);
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	65 e0       	ldi	r22, 0x05	; 5
    4eba:	41 e0       	ldi	r20, 0x01	; 1
    4ebc:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4ec0:	05 c0       	rjmp	.+10     	; 0x4ecc <HAL_LCD_voidData+0x56>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D5_PIN,Pin_Low);
    4ec2:	80 e0       	ldi	r24, 0x00	; 0
    4ec4:	65 e0       	ldi	r22, 0x05	; 5
    4ec6:	40 e0       	ldi	r20, 0x00	; 0
    4ec8:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }

  if (GET_BIT(Data,2)==1)
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	86 95       	lsr	r24
    4ed0:	86 95       	lsr	r24
    4ed2:	88 2f       	mov	r24, r24
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	81 70       	andi	r24, 0x01	; 1
    4ed8:	90 70       	andi	r25, 0x00	; 0
    4eda:	88 23       	and	r24, r24
    4edc:	31 f0       	breq	.+12     	; 0x4eea <HAL_LCD_voidData+0x74>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D6_PIN,Pin_High);
    4ede:	80 e0       	ldi	r24, 0x00	; 0
    4ee0:	66 e0       	ldi	r22, 0x06	; 6
    4ee2:	41 e0       	ldi	r20, 0x01	; 1
    4ee4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4ee8:	05 c0       	rjmp	.+10     	; 0x4ef4 <HAL_LCD_voidData+0x7e>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D6_PIN,Pin_Low);
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	66 e0       	ldi	r22, 0x06	; 6
    4eee:	40 e0       	ldi	r20, 0x00	; 0
    4ef0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }

  if (GET_BIT(Data,3)==1)
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	86 95       	lsr	r24
    4ef8:	86 95       	lsr	r24
    4efa:	86 95       	lsr	r24
    4efc:	88 2f       	mov	r24, r24
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	81 70       	andi	r24, 0x01	; 1
    4f02:	90 70       	andi	r25, 0x00	; 0
    4f04:	88 23       	and	r24, r24
    4f06:	31 f0       	breq	.+12     	; 0x4f14 <HAL_LCD_voidData+0x9e>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D7_PIN,Pin_High);
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	67 e0       	ldi	r22, 0x07	; 7
    4f0c:	41 e0       	ldi	r20, 0x01	; 1
    4f0e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    4f12:	05 c0       	rjmp	.+10     	; 0x4f1e <HAL_LCD_voidData+0xa8>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D7_PIN,Pin_Low);
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	67 e0       	ldi	r22, 0x07	; 7
    4f18:	40 e0       	ldi	r20, 0x00	; 0
    4f1a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
  }


}
    4f1e:	0f 90       	pop	r0
    4f20:	cf 91       	pop	r28
    4f22:	df 91       	pop	r29
    4f24:	08 95       	ret

00004f26 <HAL_void_H_BridgeInit>:
 *      Author: Mohamed
 */

#include "H_Bridge.h"

void HAL_void_H_BridgeInit() {
    4f26:	df 93       	push	r29
    4f28:	cf 93       	push	r28
    4f2a:	cd b7       	in	r28, 0x3d	; 61
    4f2c:	de b7       	in	r29, 0x3e	; 62
//	MCAL_DIO_u8SetPinDirection(PortD, Pin4, Pin_High);
//	MCAL_DIO_u8SetPinDirection(PortD, Pin5, Pin_High);
	MCAL_DIO_u8SetPinDirection(PortC, 3, Pin_High);
    4f2e:	82 e0       	ldi	r24, 0x02	; 2
    4f30:	63 e0       	ldi	r22, 0x03	; 3
    4f32:	41 e0       	ldi	r20, 0x01	; 1
    4f34:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 4, Pin_High);
    4f38:	82 e0       	ldi	r24, 0x02	; 2
    4f3a:	64 e0       	ldi	r22, 0x04	; 4
    4f3c:	41 e0       	ldi	r20, 0x01	; 1
    4f3e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 5, Pin_High);
    4f42:	82 e0       	ldi	r24, 0x02	; 2
    4f44:	65 e0       	ldi	r22, 0x05	; 5
    4f46:	41 e0       	ldi	r20, 0x01	; 1
    4f48:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 6, Pin_High);
    4f4c:	82 e0       	ldi	r24, 0x02	; 2
    4f4e:	66 e0       	ldi	r22, 0x06	; 6
    4f50:	41 e0       	ldi	r20, 0x01	; 1
    4f52:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
}
    4f56:	cf 91       	pop	r28
    4f58:	df 91       	pop	r29
    4f5a:	08 95       	ret

00004f5c <HAL_void_H_BridgeCW>:

void HAL_void_H_BridgeCW(u8 copy_u8_speed) {
    4f5c:	df 93       	push	r29
    4f5e:	cf 93       	push	r28
    4f60:	0f 92       	push	r0
    4f62:	cd b7       	in	r28, 0x3d	; 61
    4f64:	de b7       	in	r29, 0x3e	; 62
    4f66:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	69 81       	ldd	r22, Y+1	; 0x01
    4f6c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4f70:	80 e0       	ldi	r24, 0x00	; 0
    4f72:	69 81       	ldd	r22, Y+1	; 0x01
    4f74:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4f78:	82 e0       	ldi	r24, 0x02	; 2
    4f7a:	63 e0       	ldi	r22, 0x03	; 3
    4f7c:	40 e0       	ldi	r20, 0x00	; 0
    4f7e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4f82:	82 e0       	ldi	r24, 0x02	; 2
    4f84:	64 e0       	ldi	r22, 0x04	; 4
    4f86:	40 e0       	ldi	r20, 0x00	; 0
    4f88:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4f8c:	82 e0       	ldi	r24, 0x02	; 2
    4f8e:	65 e0       	ldi	r22, 0x05	; 5
    4f90:	40 e0       	ldi	r20, 0x00	; 0
    4f92:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4f96:	82 e0       	ldi	r24, 0x02	; 2
    4f98:	66 e0       	ldi	r22, 0x06	; 6
    4f9a:	41 e0       	ldi	r20, 0x01	; 1
    4f9c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4fa0:	0f 90       	pop	r0
    4fa2:	cf 91       	pop	r28
    4fa4:	df 91       	pop	r29
    4fa6:	08 95       	ret

00004fa8 <HAL_void_H_BridgeFR>:
void HAL_void_H_BridgeFR() {
    4fa8:	df 93       	push	r29
    4faa:	cf 93       	push	r28
    4fac:	cd b7       	in	r28, 0x3d	; 61
    4fae:	de b7       	in	r29, 0x3e	; 62
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, 70);
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	66 e4       	ldi	r22, 0x46	; 70
    4fb4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, 99);
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	63 e6       	ldi	r22, 0x63	; 99
    4fbc:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4fc0:	82 e0       	ldi	r24, 0x02	; 2
    4fc2:	63 e0       	ldi	r22, 0x03	; 3
    4fc4:	41 e0       	ldi	r20, 0x01	; 1
    4fc6:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4fca:	82 e0       	ldi	r24, 0x02	; 2
    4fcc:	64 e0       	ldi	r22, 0x04	; 4
    4fce:	40 e0       	ldi	r20, 0x00	; 0
    4fd0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4fd4:	82 e0       	ldi	r24, 0x02	; 2
    4fd6:	65 e0       	ldi	r22, 0x05	; 5
    4fd8:	40 e0       	ldi	r20, 0x00	; 0
    4fda:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4fde:	82 e0       	ldi	r24, 0x02	; 2
    4fe0:	66 e0       	ldi	r22, 0x06	; 6
    4fe2:	41 e0       	ldi	r20, 0x01	; 1
    4fe4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    4fe8:	cf 91       	pop	r28
    4fea:	df 91       	pop	r29
    4fec:	08 95       	ret

00004fee <HAL_void_H_BridgeFront>:
void HAL_void_H_BridgeFront(u8 copy_u8_speed) {
    4fee:	df 93       	push	r29
    4ff0:	cf 93       	push	r28
    4ff2:	0f 92       	push	r0
    4ff4:	cd b7       	in	r28, 0x3d	; 61
    4ff6:	de b7       	in	r29, 0x3e	; 62
    4ff8:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	69 81       	ldd	r22, Y+1	; 0x01
    4ffe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	69 81       	ldd	r22, Y+1	; 0x01
    5006:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortD, Pin4, Pin_High);
    500a:	83 e0       	ldi	r24, 0x03	; 3
    500c:	64 e0       	ldi	r22, 0x04	; 4
    500e:	41 e0       	ldi	r20, 0x01	; 1
    5010:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortD, Pin5, Pin_High);
    5014:	83 e0       	ldi	r24, 0x03	; 3
    5016:	65 e0       	ldi	r22, 0x05	; 5
    5018:	41 e0       	ldi	r20, 0x01	; 1
    501a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    501e:	82 e0       	ldi	r24, 0x02	; 2
    5020:	63 e0       	ldi	r22, 0x03	; 3
    5022:	41 e0       	ldi	r20, 0x01	; 1
    5024:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    5028:	82 e0       	ldi	r24, 0x02	; 2
    502a:	64 e0       	ldi	r22, 0x04	; 4
    502c:	40 e0       	ldi	r20, 0x00	; 0
    502e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    5032:	82 e0       	ldi	r24, 0x02	; 2
    5034:	65 e0       	ldi	r22, 0x05	; 5
    5036:	40 e0       	ldi	r20, 0x00	; 0
    5038:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    503c:	82 e0       	ldi	r24, 0x02	; 2
    503e:	66 e0       	ldi	r22, 0x06	; 6
    5040:	41 e0       	ldi	r20, 0x01	; 1
    5042:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    5046:	0f 90       	pop	r0
    5048:	cf 91       	pop	r28
    504a:	df 91       	pop	r29
    504c:	08 95       	ret

0000504e <HAL_void_H_BridgeBack>:
void HAL_void_H_BridgeBack(u8 copy_u8_speed) {
    504e:	df 93       	push	r29
    5050:	cf 93       	push	r28
    5052:	0f 92       	push	r0
    5054:	cd b7       	in	r28, 0x3d	; 61
    5056:	de b7       	in	r29, 0x3e	; 62
    5058:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	69 81       	ldd	r22, Y+1	; 0x01
    505e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    5062:	80 e0       	ldi	r24, 0x00	; 0
    5064:	69 81       	ldd	r22, Y+1	; 0x01
    5066:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    506a:	82 e0       	ldi	r24, 0x02	; 2
    506c:	63 e0       	ldi	r22, 0x03	; 3
    506e:	40 e0       	ldi	r20, 0x00	; 0
    5070:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    5074:	82 e0       	ldi	r24, 0x02	; 2
    5076:	64 e0       	ldi	r22, 0x04	; 4
    5078:	41 e0       	ldi	r20, 0x01	; 1
    507a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    507e:	82 e0       	ldi	r24, 0x02	; 2
    5080:	65 e0       	ldi	r22, 0x05	; 5
    5082:	41 e0       	ldi	r20, 0x01	; 1
    5084:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    5088:	82 e0       	ldi	r24, 0x02	; 2
    508a:	66 e0       	ldi	r22, 0x06	; 6
    508c:	40 e0       	ldi	r20, 0x00	; 0
    508e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    5092:	0f 90       	pop	r0
    5094:	cf 91       	pop	r28
    5096:	df 91       	pop	r29
    5098:	08 95       	ret

0000509a <HAL_void_H_BridgeCCW>:
void HAL_void_H_BridgeCCW(u8 copy_u8_speed) {
    509a:	df 93       	push	r29
    509c:	cf 93       	push	r28
    509e:	0f 92       	push	r0
    50a0:	cd b7       	in	r28, 0x3d	; 61
    50a2:	de b7       	in	r29, 0x3e	; 62
    50a4:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	69 81       	ldd	r22, Y+1	; 0x01
    50aa:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    50ae:	80 e0       	ldi	r24, 0x00	; 0
    50b0:	69 81       	ldd	r22, Y+1	; 0x01
    50b2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    50b6:	82 e0       	ldi	r24, 0x02	; 2
    50b8:	63 e0       	ldi	r22, 0x03	; 3
    50ba:	41 e0       	ldi	r20, 0x01	; 1
    50bc:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    50c0:	82 e0       	ldi	r24, 0x02	; 2
    50c2:	64 e0       	ldi	r22, 0x04	; 4
    50c4:	40 e0       	ldi	r20, 0x00	; 0
    50c6:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    50ca:	82 e0       	ldi	r24, 0x02	; 2
    50cc:	65 e0       	ldi	r22, 0x05	; 5
    50ce:	40 e0       	ldi	r20, 0x00	; 0
    50d0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    50d4:	82 e0       	ldi	r24, 0x02	; 2
    50d6:	66 e0       	ldi	r22, 0x06	; 6
    50d8:	40 e0       	ldi	r20, 0x00	; 0
    50da:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    50de:	0f 90       	pop	r0
    50e0:	cf 91       	pop	r28
    50e2:	df 91       	pop	r29
    50e4:	08 95       	ret

000050e6 <HAL_void_H_BridgeStop>:

void HAL_void_H_BridgeStop(u8 copy_u8_speed) {
    50e6:	df 93       	push	r29
    50e8:	cf 93       	push	r28
    50ea:	0f 92       	push	r0
    50ec:	cd b7       	in	r28, 0x3d	; 61
    50ee:	de b7       	in	r29, 0x3e	; 62
    50f0:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    50f2:	81 e0       	ldi	r24, 0x01	; 1
    50f4:	69 81       	ldd	r22, Y+1	; 0x01
    50f6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    50fa:	80 e0       	ldi	r24, 0x00	; 0
    50fc:	69 81       	ldd	r22, Y+1	; 0x01
    50fe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    5102:	82 e0       	ldi	r24, 0x02	; 2
    5104:	63 e0       	ldi	r22, 0x03	; 3
    5106:	40 e0       	ldi	r20, 0x00	; 0
    5108:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    510c:	82 e0       	ldi	r24, 0x02	; 2
    510e:	64 e0       	ldi	r22, 0x04	; 4
    5110:	40 e0       	ldi	r20, 0x00	; 0
    5112:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    5116:	82 e0       	ldi	r24, 0x02	; 2
    5118:	65 e0       	ldi	r22, 0x05	; 5
    511a:	40 e0       	ldi	r20, 0x00	; 0
    511c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    5120:	82 e0       	ldi	r24, 0x02	; 2
    5122:	66 e0       	ldi	r22, 0x06	; 6
    5124:	40 e0       	ldi	r20, 0x00	; 0
    5126:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
}
    512a:	0f 90       	pop	r0
    512c:	cf 91       	pop	r28
    512e:	df 91       	pop	r29
    5130:	08 95       	ret

00005132 <HAL_Buzzer_u8BuzzerInit>:
 *      Author: Mohamed
 */

#include "Buzzer.h"

STD_Type HAL_Buzzer_u8BuzzerInit(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID) {
    5132:	df 93       	push	r29
    5134:	cf 93       	push	r28
    5136:	00 d0       	rcall	.+0      	; 0x5138 <HAL_Buzzer_u8BuzzerInit+0x6>
    5138:	0f 92       	push	r0
    513a:	cd b7       	in	r28, 0x3d	; 61
    513c:	de b7       	in	r29, 0x3e	; 62
    513e:	8a 83       	std	Y+2, r24	; 0x02
    5140:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    5142:	81 e0       	ldi	r24, 0x01	; 1
    5144:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins) {
    5146:	8a 81       	ldd	r24, Y+2	; 0x02
    5148:	84 30       	cpi	r24, 0x04	; 4
    514a:	48 f4       	brcc	.+18     	; 0x515e <HAL_Buzzer_u8BuzzerInit+0x2c>
    514c:	8b 81       	ldd	r24, Y+3	; 0x03
    514e:	88 30       	cpi	r24, 0x08	; 8
    5150:	30 f4       	brcc	.+12     	; 0x515e <HAL_Buzzer_u8BuzzerInit+0x2c>
		Loc_u8Return_Value=Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8BuzzerPortID,
    5152:	8a 81       	ldd	r24, Y+2	; 0x02
    5154:	6b 81       	ldd	r22, Y+3	; 0x03
    5156:	41 e0       	ldi	r20, 0x01	; 1
    5158:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <MCAL_DIO_u8SetPinDirection>
    515c:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8BuzzerPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    515e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5160:	0f 90       	pop	r0
    5162:	0f 90       	pop	r0
    5164:	0f 90       	pop	r0
    5166:	cf 91       	pop	r28
    5168:	df 91       	pop	r29
    516a:	08 95       	ret

0000516c <HAL_Buzzer_u8BuzzerMode>:

STD_Type HAL_Buzzer_u8BuzzerMode(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID,
		u8 Loc_u8BuzzerMode) {
    516c:	df 93       	push	r29
    516e:	cf 93       	push	r28
    5170:	00 d0       	rcall	.+0      	; 0x5172 <HAL_Buzzer_u8BuzzerMode+0x6>
    5172:	00 d0       	rcall	.+0      	; 0x5174 <HAL_Buzzer_u8BuzzerMode+0x8>
    5174:	cd b7       	in	r28, 0x3d	; 61
    5176:	de b7       	in	r29, 0x3e	; 62
    5178:	8a 83       	std	Y+2, r24	; 0x02
    517a:	6b 83       	std	Y+3, r22	; 0x03
    517c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    517e:	81 e0       	ldi	r24, 0x01	; 1
    5180:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins
    5182:	8a 81       	ldd	r24, Y+2	; 0x02
    5184:	84 30       	cpi	r24, 0x04	; 4
    5186:	10 f5       	brcc	.+68     	; 0x51cc <HAL_Buzzer_u8BuzzerMode+0x60>
    5188:	8b 81       	ldd	r24, Y+3	; 0x03
    518a:	88 30       	cpi	r24, 0x08	; 8
    518c:	f8 f4       	brcc	.+62     	; 0x51cc <HAL_Buzzer_u8BuzzerMode+0x60>
    518e:	8c 81       	ldd	r24, Y+4	; 0x04
    5190:	83 30       	cpi	r24, 0x03	; 3
    5192:	e0 f4       	brcc	.+56     	; 0x51cc <HAL_Buzzer_u8BuzzerMode+0x60>
			&& Loc_u8BuzzerMode <= Buzzer_TOG) {
		if (Loc_u8BuzzerMode == Buzzer_ON) {
    5194:	8c 81       	ldd	r24, Y+4	; 0x04
    5196:	81 30       	cpi	r24, 0x01	; 1
    5198:	39 f4       	brne	.+14     	; 0x51a8 <HAL_Buzzer_u8BuzzerMode+0x3c>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_High);
    519a:	8a 81       	ldd	r24, Y+2	; 0x02
    519c:	6b 81       	ldd	r22, Y+3	; 0x03
    519e:	41 e0       	ldi	r20, 0x01	; 1
    51a0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    51a4:	89 83       	std	Y+1, r24	; 0x01
    51a6:	12 c0       	rjmp	.+36     	; 0x51cc <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_OFF) {
    51a8:	8c 81       	ldd	r24, Y+4	; 0x04
    51aa:	88 23       	and	r24, r24
    51ac:	39 f4       	brne	.+14     	; 0x51bc <HAL_Buzzer_u8BuzzerMode+0x50>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_Low);
    51ae:	8a 81       	ldd	r24, Y+2	; 0x02
    51b0:	6b 81       	ldd	r22, Y+3	; 0x03
    51b2:	40 e0       	ldi	r20, 0x00	; 0
    51b4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <MCAL_DIO_u8SetPinValue>
    51b8:	89 83       	std	Y+1, r24	; 0x01
    51ba:	08 c0       	rjmp	.+16     	; 0x51cc <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_TOG) {
    51bc:	8c 81       	ldd	r24, Y+4	; 0x04
    51be:	82 30       	cpi	r24, 0x02	; 2
    51c0:	29 f4       	brne	.+10     	; 0x51cc <HAL_Buzzer_u8BuzzerMode+0x60>
			Loc_u8Return_Value=MCAL_DIO_u8TogglePinValue(Loc_u8BuzzerPortID,Loc_u8BuzzerPinID);
    51c2:	8a 81       	ldd	r24, Y+2	; 0x02
    51c4:	6b 81       	ldd	r22, Y+3	; 0x03
    51c6:	0e 94 52 19 	call	0x32a4	; 0x32a4 <MCAL_DIO_u8TogglePinValue>
    51ca:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    51cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    51ce:	0f 90       	pop	r0
    51d0:	0f 90       	pop	r0
    51d2:	0f 90       	pop	r0
    51d4:	0f 90       	pop	r0
    51d6:	cf 91       	pop	r28
    51d8:	df 91       	pop	r29
    51da:	08 95       	ret

000051dc <APP_Control_Car_Init>:
#include "Control_Car.h"
f32 Glob_f32distance = 0;
u8 Glob_u8Event = 'S';
void sensor(void *pt);
void lcd_display(void *ptr);
void APP_Control_Car_Init(void) {
    51dc:	df 93       	push	r29
    51de:	cf 93       	push	r28
    51e0:	cd b7       	in	r28, 0x3d	; 61
    51e2:	de b7       	in	r29, 0x3e	; 62
	//Init Buzzer
	HAL_Buzzer_u8BuzzerInit(PortA, Pin3);
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	63 e0       	ldi	r22, 0x03	; 3
    51e8:	0e 94 99 28 	call	0x5132	; 0x5132 <HAL_Buzzer_u8BuzzerInit>
	//Init LCD
	HAL_LCD_u8LCDInit();
    51ec:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HAL_LCD_u8LCDInit>
	//Init Servo Motor
	HAL_SM_voidSMInit();
    51f0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <HAL_SM_voidSMInit>
	//Init UltraSonic Sensor
	HAL_Ultrasonic_Sensor_voidInit();
    51f4:	0e 94 ca 19 	call	0x3394	; 0x3394 <HAL_Ultrasonic_Sensor_voidInit>
	//Init H_Bridge
	HAL_void_H_BridgeInit();
    51f8:	0e 94 93 27 	call	0x4f26	; 0x4f26 <HAL_void_H_BridgeInit>
	//Leds
	HAL_LED_u8LedInit(PortA, Pin0);
    51fc:	80 e0       	ldi	r24, 0x00	; 0
    51fe:	60 e0       	ldi	r22, 0x00	; 0
    5200:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <HAL_LED_u8LedInit>
	HAL_LED_u8LedInit(PortA, Pin1);
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	61 e0       	ldi	r22, 0x01	; 1
    5208:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <HAL_LED_u8LedInit>
	//UART
	MCAL_UART_UARTInit();
    520c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MCAL_UART_UARTInit>
	//Free Rtos
//	xTaskCreate(lcd_display, "lcd_display", 80, 0, 1, 0);
//	xTaskCreate(sensor, "sensor", 80, 0, 1, 0);
//	vTaskStartScheduler();
}
    5210:	cf 91       	pop	r28
    5212:	df 91       	pop	r29
    5214:	08 95       	ret

00005216 <APP_Control_Car_App>:
void APP_Control_Car_App(void) {
    5216:	df 93       	push	r29
    5218:	cf 93       	push	r28
    521a:	0f 92       	push	r0
    521c:	cd b7       	in	r28, 0x3d	; 61
    521e:	de b7       	in	r29, 0x3e	; 62

	//	Initially Set Servo Angle 90
	HAL_SM_voidSMSetAngle(START_ANGLE);
    5220:	8a e5       	ldi	r24, 0x5A	; 90
    5222:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <HAL_SM_voidSMSetAngle>
	//Light Front LEDS
	HAL_LED_u8LedMode(PortA, Pin0, LED_ON);
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	41 e0       	ldi	r20, 0x01	; 1
    522c:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
	while (1) {
		MCAL_UART_UARTReceive(&Glob_u8Event);
    5230:	80 e1       	ldi	r24, 0x10	; 16
    5232:	92 e0       	ldi	r25, 0x02	; 2
    5234:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <MCAL_UART_UARTReceive>
		if (Glob_u8Event == 'F') {
    5238:	80 91 10 02 	lds	r24, 0x0210
    523c:	86 34       	cpi	r24, 0x46	; 70
    523e:	71 f4       	brne	.+28     	; 0x525c <APP_Control_Car_App+0x46>
			//if(Glob_f32distance>30){
			HAL_LED_u8LedMode(PortA, Pin0, LED_ON);
    5240:	80 e0       	ldi	r24, 0x00	; 0
    5242:	60 e0       	ldi	r22, 0x00	; 0
    5244:	41 e0       	ldi	r20, 0x01	; 1
    5246:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
			HAL_LED_u8LedMode(PortA, Pin1, LED_OFF);
    524a:	80 e0       	ldi	r24, 0x00	; 0
    524c:	61 e0       	ldi	r22, 0x01	; 1
    524e:	40 e0       	ldi	r20, 0x00	; 0
    5250:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
			HAL_void_H_BridgeFront(MAX_SPEED);
    5254:	83 e6       	ldi	r24, 0x63	; 99
    5256:	0e 94 f7 27 	call	0x4fee	; 0x4fee <HAL_void_H_BridgeFront>
    525a:	ea cf       	rjmp	.-44     	; 0x5230 <APP_Control_Car_App+0x1a>
			//}else{
			//HAL_void_H_BridgeStop(NUM0);
			//}
		} else if (Glob_u8Event == 'B') {
    525c:	80 91 10 02 	lds	r24, 0x0210
    5260:	82 34       	cpi	r24, 0x42	; 66
    5262:	49 f4       	brne	.+18     	; 0x5276 <APP_Control_Car_App+0x60>
			HAL_void_H_BridgeBack(MAX_SPEED);
    5264:	83 e6       	ldi	r24, 0x63	; 99
    5266:	0e 94 27 28 	call	0x504e	; 0x504e <HAL_void_H_BridgeBack>
			HAL_LED_u8LedMode(PortA, Pin1, LED_ON);
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	61 e0       	ldi	r22, 0x01	; 1
    526e:	41 e0       	ldi	r20, 0x01	; 1
    5270:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
    5274:	dd cf       	rjmp	.-70     	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'L') {
    5276:	80 91 10 02 	lds	r24, 0x0210
    527a:	8c 34       	cpi	r24, 0x4C	; 76
    527c:	21 f4       	brne	.+8      	; 0x5286 <APP_Control_Car_App+0x70>
			HAL_void_H_BridgeCCW(MAX_SPEED);
    527e:	83 e6       	ldi	r24, 0x63	; 99
    5280:	0e 94 4d 28 	call	0x509a	; 0x509a <HAL_void_H_BridgeCCW>
    5284:	d5 cf       	rjmp	.-86     	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'R') {
    5286:	80 91 10 02 	lds	r24, 0x0210
    528a:	82 35       	cpi	r24, 0x52	; 82
    528c:	21 f4       	brne	.+8      	; 0x5296 <APP_Control_Car_App+0x80>
			HAL_void_H_BridgeCW(MAX_SPEED);
    528e:	83 e6       	ldi	r24, 0x63	; 99
    5290:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <HAL_void_H_BridgeCW>
    5294:	cd cf       	rjmp	.-102    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'S') {
    5296:	80 91 10 02 	lds	r24, 0x0210
    529a:	83 35       	cpi	r24, 0x53	; 83
    529c:	21 f4       	brne	.+8      	; 0x52a6 <APP_Control_Car_App+0x90>
			HAL_void_H_BridgeStop(NUM0);
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <HAL_void_H_BridgeStop>
    52a4:	c5 cf       	rjmp	.-118    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'W') {
    52a6:	80 91 10 02 	lds	r24, 0x0210
    52aa:	87 35       	cpi	r24, 0x57	; 87
    52ac:	31 f4       	brne	.+12     	; 0x52ba <APP_Control_Car_App+0xa4>
			HAL_LED_u8LedMode(PortA, PIN0, LED_ON);
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	60 e0       	ldi	r22, 0x00	; 0
    52b2:	41 e0       	ldi	r20, 0x01	; 1
    52b4:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
    52b8:	bb cf       	rjmp	.-138    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'w') {
    52ba:	80 91 10 02 	lds	r24, 0x0210
    52be:	87 37       	cpi	r24, 0x77	; 119
    52c0:	31 f4       	brne	.+12     	; 0x52ce <APP_Control_Car_App+0xb8>
			HAL_LED_u8LedMode(PortA, PIN0, LED_OFF);
    52c2:	80 e0       	ldi	r24, 0x00	; 0
    52c4:	60 e0       	ldi	r22, 0x00	; 0
    52c6:	40 e0       	ldi	r20, 0x00	; 0
    52c8:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
    52cc:	b1 cf       	rjmp	.-158    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'U') {
    52ce:	80 91 10 02 	lds	r24, 0x0210
    52d2:	85 35       	cpi	r24, 0x55	; 85
    52d4:	31 f4       	brne	.+12     	; 0x52e2 <APP_Control_Car_App+0xcc>
			HAL_LED_u8LedMode(PortA, PIN1, LED_ON);
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	61 e0       	ldi	r22, 0x01	; 1
    52da:	41 e0       	ldi	r20, 0x01	; 1
    52dc:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
    52e0:	a7 cf       	rjmp	.-178    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'u') {
    52e2:	80 91 10 02 	lds	r24, 0x0210
    52e6:	85 37       	cpi	r24, 0x75	; 117
    52e8:	31 f4       	brne	.+12     	; 0x52f6 <APP_Control_Car_App+0xe0>
			HAL_LED_u8LedMode(PortA, PIN1, LED_OFF);
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	61 e0       	ldi	r22, 0x01	; 1
    52ee:	40 e0       	ldi	r20, 0x00	; 0
    52f0:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
    52f4:	9d cf       	rjmp	.-198    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'V') {
    52f6:	80 91 10 02 	lds	r24, 0x0210
    52fa:	86 35       	cpi	r24, 0x56	; 86
    52fc:	31 f4       	brne	.+12     	; 0x530a <APP_Control_Car_App+0xf4>
			HAL_Buzzer_u8BuzzerMode(PortA, Pin3, Buzzer_ON);
    52fe:	80 e0       	ldi	r24, 0x00	; 0
    5300:	63 e0       	ldi	r22, 0x03	; 3
    5302:	41 e0       	ldi	r20, 0x01	; 1
    5304:	0e 94 b6 28 	call	0x516c	; 0x516c <HAL_Buzzer_u8BuzzerMode>
    5308:	93 cf       	rjmp	.-218    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'v') {
    530a:	80 91 10 02 	lds	r24, 0x0210
    530e:	86 37       	cpi	r24, 0x76	; 118
    5310:	31 f4       	brne	.+12     	; 0x531e <APP_Control_Car_App+0x108>
			HAL_Buzzer_u8BuzzerMode(PortA, Pin3, Buzzer_OFF);
    5312:	80 e0       	ldi	r24, 0x00	; 0
    5314:	63 e0       	ldi	r22, 0x03	; 3
    5316:	40 e0       	ldi	r20, 0x00	; 0
    5318:	0e 94 b6 28 	call	0x516c	; 0x516c <HAL_Buzzer_u8BuzzerMode>
    531c:	89 cf       	rjmp	.-238    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'X') {
    531e:	80 91 10 02 	lds	r24, 0x0210
    5322:	88 35       	cpi	r24, 0x58	; 88
    5324:	19 f4       	brne	.+6      	; 0x532c <APP_Control_Car_App+0x116>
			APP_Autonomous_Car_voidApp();
    5326:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <APP_Autonomous_Car_voidApp>
    532a:	82 cf       	rjmp	.-252    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'G') {
    532c:	80 91 10 02 	lds	r24, 0x0210
    5330:	87 34       	cpi	r24, 0x47	; 71
    5332:	19 f4       	brne	.+6      	; 0x533a <APP_Control_Car_App+0x124>
			HAL_void_H_BridgeFR();
    5334:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <HAL_void_H_BridgeFR>
    5338:	7b cf       	rjmp	.-266    	; 0x5230 <APP_Control_Car_App+0x1a>
		} else if (Glob_u8Event == 'I') {
    533a:	80 91 10 02 	lds	r24, 0x0210
    533e:	89 34       	cpi	r24, 0x49	; 73
    5340:	09 f4       	brne	.+2      	; 0x5344 <APP_Control_Car_App+0x12e>
    5342:	76 cf       	rjmp	.-276    	; 0x5230 <APP_Control_Car_App+0x1a>
//			HAL_void_H_BridgeCW(99);
//			HAL_void_H_BridgeCCW(60);
		} else if (Glob_u8Event == 'H') {
    5344:	80 91 10 02 	lds	r24, 0x0210
    5348:	73 cf       	rjmp	.-282    	; 0x5230 <APP_Control_Car_App+0x1a>

0000534a <lcd_display>:
			//NOTHING
		}
	}

}
void lcd_display(void *ptr) {
    534a:	0f 93       	push	r16
    534c:	1f 93       	push	r17
    534e:	df 93       	push	r29
    5350:	cf 93       	push	r28
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
    5356:	c8 55       	subi	r28, 0x58	; 88
    5358:	d0 40       	sbci	r29, 0x00	; 0
    535a:	0f b6       	in	r0, 0x3f	; 63
    535c:	f8 94       	cli
    535e:	de bf       	out	0x3e, r29	; 62
    5360:	0f be       	out	0x3f, r0	; 63
    5362:	cd bf       	out	0x3d, r28	; 61
    5364:	fe 01       	movw	r30, r28
    5366:	eb 5a       	subi	r30, 0xAB	; 171
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	91 83       	std	Z+1, r25	; 0x01
    536c:	80 83       	st	Z, r24
	while (1) {
		switch (Glob_u8Event) {
    536e:	80 91 10 02 	lds	r24, 0x0210
    5372:	28 2f       	mov	r18, r24
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	69 96       	adiw	r28, 0x19	; 25
    5378:	3f af       	std	Y+63, r19	; 0x3f
    537a:	2e af       	std	Y+62, r18	; 0x3e
    537c:	69 97       	sbiw	r28, 0x19	; 25
    537e:	69 96       	adiw	r28, 0x19	; 25
    5380:	8e ad       	ldd	r24, Y+62	; 0x3e
    5382:	9f ad       	ldd	r25, Y+63	; 0x3f
    5384:	69 97       	sbiw	r28, 0x19	; 25
    5386:	8c 34       	cpi	r24, 0x4C	; 76
    5388:	91 05       	cpc	r25, r1
    538a:	09 f4       	brne	.+2      	; 0x538e <lcd_display+0x44>
    538c:	82 c1       	rjmp	.+772    	; 0x5692 <lcd_display+0x348>
    538e:	69 96       	adiw	r28, 0x19	; 25
    5390:	ee ad       	ldd	r30, Y+62	; 0x3e
    5392:	ff ad       	ldd	r31, Y+63	; 0x3f
    5394:	69 97       	sbiw	r28, 0x19	; 25
    5396:	ed 34       	cpi	r30, 0x4D	; 77
    5398:	f1 05       	cpc	r31, r1
    539a:	84 f4       	brge	.+32     	; 0x53bc <lcd_display+0x72>
    539c:	69 96       	adiw	r28, 0x19	; 25
    539e:	2e ad       	ldd	r18, Y+62	; 0x3e
    53a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    53a2:	69 97       	sbiw	r28, 0x19	; 25
    53a4:	22 34       	cpi	r18, 0x42	; 66
    53a6:	31 05       	cpc	r19, r1
    53a8:	09 f4       	brne	.+2      	; 0x53ac <lcd_display+0x62>
    53aa:	de c2       	rjmp	.+1468   	; 0x5968 <lcd_display+0x61e>
    53ac:	69 96       	adiw	r28, 0x19	; 25
    53ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    53b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    53b2:	69 97       	sbiw	r28, 0x19	; 25
    53b4:	86 34       	cpi	r24, 0x46	; 70
    53b6:	91 05       	cpc	r25, r1
    53b8:	91 f0       	breq	.+36     	; 0x53de <lcd_display+0x94>
    53ba:	d9 cf       	rjmp	.-78     	; 0x536e <lcd_display+0x24>
    53bc:	69 96       	adiw	r28, 0x19	; 25
    53be:	ee ad       	ldd	r30, Y+62	; 0x3e
    53c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    53c2:	69 97       	sbiw	r28, 0x19	; 25
    53c4:	e2 35       	cpi	r30, 0x52	; 82
    53c6:	f1 05       	cpc	r31, r1
    53c8:	09 f4       	brne	.+2      	; 0x53cc <lcd_display+0x82>
    53ca:	dc c1       	rjmp	.+952    	; 0x5784 <lcd_display+0x43a>
    53cc:	69 96       	adiw	r28, 0x19	; 25
    53ce:	2e ad       	ldd	r18, Y+62	; 0x3e
    53d0:	3f ad       	ldd	r19, Y+63	; 0x3f
    53d2:	69 97       	sbiw	r28, 0x19	; 25
    53d4:	23 35       	cpi	r18, 0x53	; 83
    53d6:	31 05       	cpc	r19, r1
    53d8:	09 f4       	brne	.+2      	; 0x53dc <lcd_display+0x92>
    53da:	4d c2       	rjmp	.+1178   	; 0x5876 <lcd_display+0x52c>
    53dc:	c8 cf       	rjmp	.-112    	; 0x536e <lcd_display+0x24>
		case 'F':
			if (Glob_f32distance > 30) {
    53de:	80 91 2c 02 	lds	r24, 0x022C
    53e2:	90 91 2d 02 	lds	r25, 0x022D
    53e6:	a0 91 2e 02 	lds	r26, 0x022E
    53ea:	b0 91 2f 02 	lds	r27, 0x022F
    53ee:	bc 01       	movw	r22, r24
    53f0:	cd 01       	movw	r24, r26
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	40 ef       	ldi	r20, 0xF0	; 240
    53f8:	51 e4       	ldi	r21, 0x41	; 65
    53fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53fe:	18 16       	cp	r1, r24
    5400:	0c f0       	brlt	.+2      	; 0x5404 <lcd_display+0xba>
    5402:	bb c0       	rjmp	.+374    	; 0x557a <lcd_display+0x230>
				HAL_LCD_u8Clear();
    5404:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Moving Front: ");
    5408:	80 e6       	ldi	r24, 0x60	; 96
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    5410:	fe 01       	movw	r30, r28
    5412:	ef 5a       	subi	r30, 0xAF	; 175
    5414:	ff 4f       	sbci	r31, 0xFF	; 255
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	aa ef       	ldi	r26, 0xFA	; 250
    541c:	b3 e4       	ldi	r27, 0x43	; 67
    541e:	80 83       	st	Z, r24
    5420:	91 83       	std	Z+1, r25	; 0x01
    5422:	a2 83       	std	Z+2, r26	; 0x02
    5424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5426:	8e 01       	movw	r16, r28
    5428:	03 5b       	subi	r16, 0xB3	; 179
    542a:	1f 4f       	sbci	r17, 0xFF	; 255
    542c:	fe 01       	movw	r30, r28
    542e:	ef 5a       	subi	r30, 0xAF	; 175
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	60 81       	ld	r22, Z
    5434:	71 81       	ldd	r23, Z+1	; 0x01
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	93 81       	ldd	r25, Z+3	; 0x03
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	4a e7       	ldi	r20, 0x7A	; 122
    5440:	55 e4       	ldi	r21, 0x45	; 69
    5442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5446:	dc 01       	movw	r26, r24
    5448:	cb 01       	movw	r24, r22
    544a:	f8 01       	movw	r30, r16
    544c:	80 83       	st	Z, r24
    544e:	91 83       	std	Z+1, r25	; 0x01
    5450:	a2 83       	std	Z+2, r26	; 0x02
    5452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5454:	fe 01       	movw	r30, r28
    5456:	e3 5b       	subi	r30, 0xB3	; 179
    5458:	ff 4f       	sbci	r31, 0xFF	; 255
    545a:	60 81       	ld	r22, Z
    545c:	71 81       	ldd	r23, Z+1	; 0x01
    545e:	82 81       	ldd	r24, Z+2	; 0x02
    5460:	93 81       	ldd	r25, Z+3	; 0x03
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	40 e8       	ldi	r20, 0x80	; 128
    5468:	5f e3       	ldi	r21, 0x3F	; 63
    546a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    546e:	88 23       	and	r24, r24
    5470:	44 f4       	brge	.+16     	; 0x5482 <lcd_display+0x138>
		__ticks = 1;
    5472:	fe 01       	movw	r30, r28
    5474:	e5 5b       	subi	r30, 0xB5	; 181
    5476:	ff 4f       	sbci	r31, 0xFF	; 255
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	91 83       	std	Z+1, r25	; 0x01
    547e:	80 83       	st	Z, r24
    5480:	64 c0       	rjmp	.+200    	; 0x554a <lcd_display+0x200>
	else if (__tmp > 65535)
    5482:	fe 01       	movw	r30, r28
    5484:	e3 5b       	subi	r30, 0xB3	; 179
    5486:	ff 4f       	sbci	r31, 0xFF	; 255
    5488:	60 81       	ld	r22, Z
    548a:	71 81       	ldd	r23, Z+1	; 0x01
    548c:	82 81       	ldd	r24, Z+2	; 0x02
    548e:	93 81       	ldd	r25, Z+3	; 0x03
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	3f ef       	ldi	r19, 0xFF	; 255
    5494:	4f e7       	ldi	r20, 0x7F	; 127
    5496:	57 e4       	ldi	r21, 0x47	; 71
    5498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    549c:	18 16       	cp	r1, r24
    549e:	0c f0       	brlt	.+2      	; 0x54a2 <lcd_display+0x158>
    54a0:	43 c0       	rjmp	.+134    	; 0x5528 <lcd_display+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54a2:	fe 01       	movw	r30, r28
    54a4:	ef 5a       	subi	r30, 0xAF	; 175
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	60 81       	ld	r22, Z
    54aa:	71 81       	ldd	r23, Z+1	; 0x01
    54ac:	82 81       	ldd	r24, Z+2	; 0x02
    54ae:	93 81       	ldd	r25, Z+3	; 0x03
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	40 e2       	ldi	r20, 0x20	; 32
    54b6:	51 e4       	ldi	r21, 0x41	; 65
    54b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	8e 01       	movw	r16, r28
    54c2:	05 5b       	subi	r16, 0xB5	; 181
    54c4:	1f 4f       	sbci	r17, 0xFF	; 255
    54c6:	bc 01       	movw	r22, r24
    54c8:	cd 01       	movw	r24, r26
    54ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	f8 01       	movw	r30, r16
    54d4:	91 83       	std	Z+1, r25	; 0x01
    54d6:	80 83       	st	Z, r24
    54d8:	1f c0       	rjmp	.+62     	; 0x5518 <lcd_display+0x1ce>
    54da:	fe 01       	movw	r30, r28
    54dc:	e7 5b       	subi	r30, 0xB7	; 183
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	80 e9       	ldi	r24, 0x90	; 144
    54e2:	91 e0       	ldi	r25, 0x01	; 1
    54e4:	91 83       	std	Z+1, r25	; 0x01
    54e6:	80 83       	st	Z, r24
    54e8:	fe 01       	movw	r30, r28
    54ea:	e7 5b       	subi	r30, 0xB7	; 183
    54ec:	ff 4f       	sbci	r31, 0xFF	; 255
    54ee:	80 81       	ld	r24, Z
    54f0:	91 81       	ldd	r25, Z+1	; 0x01
    54f2:	01 97       	sbiw	r24, 0x01	; 1
    54f4:	f1 f7       	brne	.-4      	; 0x54f2 <lcd_display+0x1a8>
    54f6:	fe 01       	movw	r30, r28
    54f8:	e7 5b       	subi	r30, 0xB7	; 183
    54fa:	ff 4f       	sbci	r31, 0xFF	; 255
    54fc:	91 83       	std	Z+1, r25	; 0x01
    54fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5500:	de 01       	movw	r26, r28
    5502:	a5 5b       	subi	r26, 0xB5	; 181
    5504:	bf 4f       	sbci	r27, 0xFF	; 255
    5506:	fe 01       	movw	r30, r28
    5508:	e5 5b       	subi	r30, 0xB5	; 181
    550a:	ff 4f       	sbci	r31, 0xFF	; 255
    550c:	80 81       	ld	r24, Z
    550e:	91 81       	ldd	r25, Z+1	; 0x01
    5510:	01 97       	sbiw	r24, 0x01	; 1
    5512:	11 96       	adiw	r26, 0x01	; 1
    5514:	9c 93       	st	X, r25
    5516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5518:	fe 01       	movw	r30, r28
    551a:	e5 5b       	subi	r30, 0xB5	; 181
    551c:	ff 4f       	sbci	r31, 0xFF	; 255
    551e:	80 81       	ld	r24, Z
    5520:	91 81       	ldd	r25, Z+1	; 0x01
    5522:	00 97       	sbiw	r24, 0x00	; 0
    5524:	d1 f6       	brne	.-76     	; 0x54da <lcd_display+0x190>
    5526:	23 cf       	rjmp	.-442    	; 0x536e <lcd_display+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5528:	8e 01       	movw	r16, r28
    552a:	05 5b       	subi	r16, 0xB5	; 181
    552c:	1f 4f       	sbci	r17, 0xFF	; 255
    552e:	fe 01       	movw	r30, r28
    5530:	e3 5b       	subi	r30, 0xB3	; 179
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	60 81       	ld	r22, Z
    5536:	71 81       	ldd	r23, Z+1	; 0x01
    5538:	82 81       	ldd	r24, Z+2	; 0x02
    553a:	93 81       	ldd	r25, Z+3	; 0x03
    553c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5540:	dc 01       	movw	r26, r24
    5542:	cb 01       	movw	r24, r22
    5544:	f8 01       	movw	r30, r16
    5546:	91 83       	std	Z+1, r25	; 0x01
    5548:	80 83       	st	Z, r24
    554a:	de 01       	movw	r26, r28
    554c:	a9 5b       	subi	r26, 0xB9	; 185
    554e:	bf 4f       	sbci	r27, 0xFF	; 255
    5550:	fe 01       	movw	r30, r28
    5552:	e5 5b       	subi	r30, 0xB5	; 181
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	80 81       	ld	r24, Z
    5558:	91 81       	ldd	r25, Z+1	; 0x01
    555a:	11 96       	adiw	r26, 0x01	; 1
    555c:	9c 93       	st	X, r25
    555e:	8e 93       	st	-X, r24
    5560:	fe 01       	movw	r30, r28
    5562:	e9 5b       	subi	r30, 0xB9	; 185
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	80 81       	ld	r24, Z
    5568:	91 81       	ldd	r25, Z+1	; 0x01
    556a:	01 97       	sbiw	r24, 0x01	; 1
    556c:	f1 f7       	brne	.-4      	; 0x556a <lcd_display+0x220>
    556e:	fe 01       	movw	r30, r28
    5570:	e9 5b       	subi	r30, 0xB9	; 185
    5572:	ff 4f       	sbci	r31, 0xFF	; 255
    5574:	91 83       	std	Z+1, r25	; 0x01
    5576:	80 83       	st	Z, r24
    5578:	fa ce       	rjmp	.-524    	; 0x536e <lcd_display+0x24>
				_delay_ms(500);
			} else {
				HAL_LCD_u8Clear();
    557a:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Stopping!!");
    557e:	8f e6       	ldi	r24, 0x6F	; 111
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    5586:	fe 01       	movw	r30, r28
    5588:	ed 5b       	subi	r30, 0xBD	; 189
    558a:	ff 4f       	sbci	r31, 0xFF	; 255
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	aa ef       	ldi	r26, 0xFA	; 250
    5592:	b3 e4       	ldi	r27, 0x43	; 67
    5594:	80 83       	st	Z, r24
    5596:	91 83       	std	Z+1, r25	; 0x01
    5598:	a2 83       	std	Z+2, r26	; 0x02
    559a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    559c:	8e 01       	movw	r16, r28
    559e:	01 5c       	subi	r16, 0xC1	; 193
    55a0:	1f 4f       	sbci	r17, 0xFF	; 255
    55a2:	fe 01       	movw	r30, r28
    55a4:	ed 5b       	subi	r30, 0xBD	; 189
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	60 81       	ld	r22, Z
    55aa:	71 81       	ldd	r23, Z+1	; 0x01
    55ac:	82 81       	ldd	r24, Z+2	; 0x02
    55ae:	93 81       	ldd	r25, Z+3	; 0x03
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	4a e7       	ldi	r20, 0x7A	; 122
    55b6:	55 e4       	ldi	r21, 0x45	; 69
    55b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55bc:	dc 01       	movw	r26, r24
    55be:	cb 01       	movw	r24, r22
    55c0:	f8 01       	movw	r30, r16
    55c2:	80 83       	st	Z, r24
    55c4:	91 83       	std	Z+1, r25	; 0x01
    55c6:	a2 83       	std	Z+2, r26	; 0x02
    55c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55ca:	fe 01       	movw	r30, r28
    55cc:	ff 96       	adiw	r30, 0x3f	; 63
    55ce:	60 81       	ld	r22, Z
    55d0:	71 81       	ldd	r23, Z+1	; 0x01
    55d2:	82 81       	ldd	r24, Z+2	; 0x02
    55d4:	93 81       	ldd	r25, Z+3	; 0x03
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	40 e8       	ldi	r20, 0x80	; 128
    55dc:	5f e3       	ldi	r21, 0x3F	; 63
    55de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55e2:	88 23       	and	r24, r24
    55e4:	2c f4       	brge	.+10     	; 0x55f0 <lcd_display+0x2a6>
		__ticks = 1;
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	9e af       	std	Y+62, r25	; 0x3e
    55ec:	8d af       	std	Y+61, r24	; 0x3d
    55ee:	46 c0       	rjmp	.+140    	; 0x567c <lcd_display+0x332>
	else if (__tmp > 65535)
    55f0:	fe 01       	movw	r30, r28
    55f2:	ff 96       	adiw	r30, 0x3f	; 63
    55f4:	60 81       	ld	r22, Z
    55f6:	71 81       	ldd	r23, Z+1	; 0x01
    55f8:	82 81       	ldd	r24, Z+2	; 0x02
    55fa:	93 81       	ldd	r25, Z+3	; 0x03
    55fc:	20 e0       	ldi	r18, 0x00	; 0
    55fe:	3f ef       	ldi	r19, 0xFF	; 255
    5600:	4f e7       	ldi	r20, 0x7F	; 127
    5602:	57 e4       	ldi	r21, 0x47	; 71
    5604:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5608:	18 16       	cp	r1, r24
    560a:	64 f5       	brge	.+88     	; 0x5664 <lcd_display+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    560c:	fe 01       	movw	r30, r28
    560e:	ed 5b       	subi	r30, 0xBD	; 189
    5610:	ff 4f       	sbci	r31, 0xFF	; 255
    5612:	60 81       	ld	r22, Z
    5614:	71 81       	ldd	r23, Z+1	; 0x01
    5616:	82 81       	ldd	r24, Z+2	; 0x02
    5618:	93 81       	ldd	r25, Z+3	; 0x03
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	30 e0       	ldi	r19, 0x00	; 0
    561e:	40 e2       	ldi	r20, 0x20	; 32
    5620:	51 e4       	ldi	r21, 0x41	; 65
    5622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5626:	dc 01       	movw	r26, r24
    5628:	cb 01       	movw	r24, r22
    562a:	bc 01       	movw	r22, r24
    562c:	cd 01       	movw	r24, r26
    562e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5632:	dc 01       	movw	r26, r24
    5634:	cb 01       	movw	r24, r22
    5636:	9e af       	std	Y+62, r25	; 0x3e
    5638:	8d af       	std	Y+61, r24	; 0x3d
    563a:	0f c0       	rjmp	.+30     	; 0x565a <lcd_display+0x310>
    563c:	80 e9       	ldi	r24, 0x90	; 144
    563e:	91 e0       	ldi	r25, 0x01	; 1
    5640:	9c af       	std	Y+60, r25	; 0x3c
    5642:	8b af       	std	Y+59, r24	; 0x3b
    5644:	8b ad       	ldd	r24, Y+59	; 0x3b
    5646:	9c ad       	ldd	r25, Y+60	; 0x3c
    5648:	01 97       	sbiw	r24, 0x01	; 1
    564a:	f1 f7       	brne	.-4      	; 0x5648 <lcd_display+0x2fe>
    564c:	9c af       	std	Y+60, r25	; 0x3c
    564e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5650:	8d ad       	ldd	r24, Y+61	; 0x3d
    5652:	9e ad       	ldd	r25, Y+62	; 0x3e
    5654:	01 97       	sbiw	r24, 0x01	; 1
    5656:	9e af       	std	Y+62, r25	; 0x3e
    5658:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    565a:	8d ad       	ldd	r24, Y+61	; 0x3d
    565c:	9e ad       	ldd	r25, Y+62	; 0x3e
    565e:	00 97       	sbiw	r24, 0x00	; 0
    5660:	69 f7       	brne	.-38     	; 0x563c <lcd_display+0x2f2>
    5662:	85 ce       	rjmp	.-758    	; 0x536e <lcd_display+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5664:	fe 01       	movw	r30, r28
    5666:	ff 96       	adiw	r30, 0x3f	; 63
    5668:	60 81       	ld	r22, Z
    566a:	71 81       	ldd	r23, Z+1	; 0x01
    566c:	82 81       	ldd	r24, Z+2	; 0x02
    566e:	93 81       	ldd	r25, Z+3	; 0x03
    5670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	9e af       	std	Y+62, r25	; 0x3e
    567a:	8d af       	std	Y+61, r24	; 0x3d
    567c:	8d ad       	ldd	r24, Y+61	; 0x3d
    567e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5680:	9a af       	std	Y+58, r25	; 0x3a
    5682:	89 af       	std	Y+57, r24	; 0x39
    5684:	89 ad       	ldd	r24, Y+57	; 0x39
    5686:	9a ad       	ldd	r25, Y+58	; 0x3a
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	f1 f7       	brne	.-4      	; 0x5688 <lcd_display+0x33e>
    568c:	9a af       	std	Y+58, r25	; 0x3a
    568e:	89 af       	std	Y+57, r24	; 0x39
    5690:	6e ce       	rjmp	.-804    	; 0x536e <lcd_display+0x24>
				_delay_ms(500);
			}
			break;
		case 'L':
			HAL_LCD_u8Clear();
    5692:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
			HAL_LCD_u8SendString("Moving Left: ");
    5696:	8a e7       	ldi	r24, 0x7A	; 122
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	aa ef       	ldi	r26, 0xFA	; 250
    56a4:	b3 e4       	ldi	r27, 0x43	; 67
    56a6:	8d ab       	std	Y+53, r24	; 0x35
    56a8:	9e ab       	std	Y+54, r25	; 0x36
    56aa:	af ab       	std	Y+55, r26	; 0x37
    56ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ae:	6d a9       	ldd	r22, Y+53	; 0x35
    56b0:	7e a9       	ldd	r23, Y+54	; 0x36
    56b2:	8f a9       	ldd	r24, Y+55	; 0x37
    56b4:	98 ad       	ldd	r25, Y+56	; 0x38
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	4a e7       	ldi	r20, 0x7A	; 122
    56bc:	55 e4       	ldi	r21, 0x45	; 69
    56be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56c2:	dc 01       	movw	r26, r24
    56c4:	cb 01       	movw	r24, r22
    56c6:	89 ab       	std	Y+49, r24	; 0x31
    56c8:	9a ab       	std	Y+50, r25	; 0x32
    56ca:	ab ab       	std	Y+51, r26	; 0x33
    56cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    56ce:	69 a9       	ldd	r22, Y+49	; 0x31
    56d0:	7a a9       	ldd	r23, Y+50	; 0x32
    56d2:	8b a9       	ldd	r24, Y+51	; 0x33
    56d4:	9c a9       	ldd	r25, Y+52	; 0x34
    56d6:	20 e0       	ldi	r18, 0x00	; 0
    56d8:	30 e0       	ldi	r19, 0x00	; 0
    56da:	40 e8       	ldi	r20, 0x80	; 128
    56dc:	5f e3       	ldi	r21, 0x3F	; 63
    56de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56e2:	88 23       	and	r24, r24
    56e4:	2c f4       	brge	.+10     	; 0x56f0 <lcd_display+0x3a6>
		__ticks = 1;
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	98 ab       	std	Y+48, r25	; 0x30
    56ec:	8f a7       	std	Y+47, r24	; 0x2f
    56ee:	3f c0       	rjmp	.+126    	; 0x576e <lcd_display+0x424>
	else if (__tmp > 65535)
    56f0:	69 a9       	ldd	r22, Y+49	; 0x31
    56f2:	7a a9       	ldd	r23, Y+50	; 0x32
    56f4:	8b a9       	ldd	r24, Y+51	; 0x33
    56f6:	9c a9       	ldd	r25, Y+52	; 0x34
    56f8:	20 e0       	ldi	r18, 0x00	; 0
    56fa:	3f ef       	ldi	r19, 0xFF	; 255
    56fc:	4f e7       	ldi	r20, 0x7F	; 127
    56fe:	57 e4       	ldi	r21, 0x47	; 71
    5700:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5704:	18 16       	cp	r1, r24
    5706:	4c f5       	brge	.+82     	; 0x575a <lcd_display+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5708:	6d a9       	ldd	r22, Y+53	; 0x35
    570a:	7e a9       	ldd	r23, Y+54	; 0x36
    570c:	8f a9       	ldd	r24, Y+55	; 0x37
    570e:	98 ad       	ldd	r25, Y+56	; 0x38
    5710:	20 e0       	ldi	r18, 0x00	; 0
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	40 e2       	ldi	r20, 0x20	; 32
    5716:	51 e4       	ldi	r21, 0x41	; 65
    5718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    571c:	dc 01       	movw	r26, r24
    571e:	cb 01       	movw	r24, r22
    5720:	bc 01       	movw	r22, r24
    5722:	cd 01       	movw	r24, r26
    5724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5728:	dc 01       	movw	r26, r24
    572a:	cb 01       	movw	r24, r22
    572c:	98 ab       	std	Y+48, r25	; 0x30
    572e:	8f a7       	std	Y+47, r24	; 0x2f
    5730:	0f c0       	rjmp	.+30     	; 0x5750 <lcd_display+0x406>
    5732:	80 e9       	ldi	r24, 0x90	; 144
    5734:	91 e0       	ldi	r25, 0x01	; 1
    5736:	9e a7       	std	Y+46, r25	; 0x2e
    5738:	8d a7       	std	Y+45, r24	; 0x2d
    573a:	8d a5       	ldd	r24, Y+45	; 0x2d
    573c:	9e a5       	ldd	r25, Y+46	; 0x2e
    573e:	01 97       	sbiw	r24, 0x01	; 1
    5740:	f1 f7       	brne	.-4      	; 0x573e <lcd_display+0x3f4>
    5742:	9e a7       	std	Y+46, r25	; 0x2e
    5744:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5746:	8f a5       	ldd	r24, Y+47	; 0x2f
    5748:	98 a9       	ldd	r25, Y+48	; 0x30
    574a:	01 97       	sbiw	r24, 0x01	; 1
    574c:	98 ab       	std	Y+48, r25	; 0x30
    574e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5750:	8f a5       	ldd	r24, Y+47	; 0x2f
    5752:	98 a9       	ldd	r25, Y+48	; 0x30
    5754:	00 97       	sbiw	r24, 0x00	; 0
    5756:	69 f7       	brne	.-38     	; 0x5732 <lcd_display+0x3e8>
    5758:	0a ce       	rjmp	.-1004   	; 0x536e <lcd_display+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    575a:	69 a9       	ldd	r22, Y+49	; 0x31
    575c:	7a a9       	ldd	r23, Y+50	; 0x32
    575e:	8b a9       	ldd	r24, Y+51	; 0x33
    5760:	9c a9       	ldd	r25, Y+52	; 0x34
    5762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5766:	dc 01       	movw	r26, r24
    5768:	cb 01       	movw	r24, r22
    576a:	98 ab       	std	Y+48, r25	; 0x30
    576c:	8f a7       	std	Y+47, r24	; 0x2f
    576e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5770:	98 a9       	ldd	r25, Y+48	; 0x30
    5772:	9c a7       	std	Y+44, r25	; 0x2c
    5774:	8b a7       	std	Y+43, r24	; 0x2b
    5776:	8b a5       	ldd	r24, Y+43	; 0x2b
    5778:	9c a5       	ldd	r25, Y+44	; 0x2c
    577a:	01 97       	sbiw	r24, 0x01	; 1
    577c:	f1 f7       	brne	.-4      	; 0x577a <lcd_display+0x430>
    577e:	9c a7       	std	Y+44, r25	; 0x2c
    5780:	8b a7       	std	Y+43, r24	; 0x2b
    5782:	f5 cd       	rjmp	.-1046   	; 0x536e <lcd_display+0x24>
			_delay_ms(500);
			break;
		case 'R':
			HAL_LCD_u8Clear();
    5784:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
			HAL_LCD_u8SendString("Moving Right: ");
    5788:	88 e8       	ldi	r24, 0x88	; 136
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	aa ef       	ldi	r26, 0xFA	; 250
    5796:	b3 e4       	ldi	r27, 0x43	; 67
    5798:	8f a3       	std	Y+39, r24	; 0x27
    579a:	98 a7       	std	Y+40, r25	; 0x28
    579c:	a9 a7       	std	Y+41, r26	; 0x29
    579e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57a0:	6f a1       	ldd	r22, Y+39	; 0x27
    57a2:	78 a5       	ldd	r23, Y+40	; 0x28
    57a4:	89 a5       	ldd	r24, Y+41	; 0x29
    57a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    57a8:	20 e0       	ldi	r18, 0x00	; 0
    57aa:	30 e0       	ldi	r19, 0x00	; 0
    57ac:	4a e7       	ldi	r20, 0x7A	; 122
    57ae:	55 e4       	ldi	r21, 0x45	; 69
    57b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57b4:	dc 01       	movw	r26, r24
    57b6:	cb 01       	movw	r24, r22
    57b8:	8b a3       	std	Y+35, r24	; 0x23
    57ba:	9c a3       	std	Y+36, r25	; 0x24
    57bc:	ad a3       	std	Y+37, r26	; 0x25
    57be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    57c0:	6b a1       	ldd	r22, Y+35	; 0x23
    57c2:	7c a1       	ldd	r23, Y+36	; 0x24
    57c4:	8d a1       	ldd	r24, Y+37	; 0x25
    57c6:	9e a1       	ldd	r25, Y+38	; 0x26
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	30 e0       	ldi	r19, 0x00	; 0
    57cc:	40 e8       	ldi	r20, 0x80	; 128
    57ce:	5f e3       	ldi	r21, 0x3F	; 63
    57d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57d4:	88 23       	and	r24, r24
    57d6:	2c f4       	brge	.+10     	; 0x57e2 <lcd_display+0x498>
		__ticks = 1;
    57d8:	81 e0       	ldi	r24, 0x01	; 1
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	9a a3       	std	Y+34, r25	; 0x22
    57de:	89 a3       	std	Y+33, r24	; 0x21
    57e0:	3f c0       	rjmp	.+126    	; 0x5860 <lcd_display+0x516>
	else if (__tmp > 65535)
    57e2:	6b a1       	ldd	r22, Y+35	; 0x23
    57e4:	7c a1       	ldd	r23, Y+36	; 0x24
    57e6:	8d a1       	ldd	r24, Y+37	; 0x25
    57e8:	9e a1       	ldd	r25, Y+38	; 0x26
    57ea:	20 e0       	ldi	r18, 0x00	; 0
    57ec:	3f ef       	ldi	r19, 0xFF	; 255
    57ee:	4f e7       	ldi	r20, 0x7F	; 127
    57f0:	57 e4       	ldi	r21, 0x47	; 71
    57f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57f6:	18 16       	cp	r1, r24
    57f8:	4c f5       	brge	.+82     	; 0x584c <lcd_display+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57fa:	6f a1       	ldd	r22, Y+39	; 0x27
    57fc:	78 a5       	ldd	r23, Y+40	; 0x28
    57fe:	89 a5       	ldd	r24, Y+41	; 0x29
    5800:	9a a5       	ldd	r25, Y+42	; 0x2a
    5802:	20 e0       	ldi	r18, 0x00	; 0
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	40 e2       	ldi	r20, 0x20	; 32
    5808:	51 e4       	ldi	r21, 0x41	; 65
    580a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	bc 01       	movw	r22, r24
    5814:	cd 01       	movw	r24, r26
    5816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    581a:	dc 01       	movw	r26, r24
    581c:	cb 01       	movw	r24, r22
    581e:	9a a3       	std	Y+34, r25	; 0x22
    5820:	89 a3       	std	Y+33, r24	; 0x21
    5822:	0f c0       	rjmp	.+30     	; 0x5842 <lcd_display+0x4f8>
    5824:	80 e9       	ldi	r24, 0x90	; 144
    5826:	91 e0       	ldi	r25, 0x01	; 1
    5828:	98 a3       	std	Y+32, r25	; 0x20
    582a:	8f 8f       	std	Y+31, r24	; 0x1f
    582c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    582e:	98 a1       	ldd	r25, Y+32	; 0x20
    5830:	01 97       	sbiw	r24, 0x01	; 1
    5832:	f1 f7       	brne	.-4      	; 0x5830 <lcd_display+0x4e6>
    5834:	98 a3       	std	Y+32, r25	; 0x20
    5836:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5838:	89 a1       	ldd	r24, Y+33	; 0x21
    583a:	9a a1       	ldd	r25, Y+34	; 0x22
    583c:	01 97       	sbiw	r24, 0x01	; 1
    583e:	9a a3       	std	Y+34, r25	; 0x22
    5840:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5842:	89 a1       	ldd	r24, Y+33	; 0x21
    5844:	9a a1       	ldd	r25, Y+34	; 0x22
    5846:	00 97       	sbiw	r24, 0x00	; 0
    5848:	69 f7       	brne	.-38     	; 0x5824 <lcd_display+0x4da>
    584a:	91 cd       	rjmp	.-1246   	; 0x536e <lcd_display+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    584c:	6b a1       	ldd	r22, Y+35	; 0x23
    584e:	7c a1       	ldd	r23, Y+36	; 0x24
    5850:	8d a1       	ldd	r24, Y+37	; 0x25
    5852:	9e a1       	ldd	r25, Y+38	; 0x26
    5854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5858:	dc 01       	movw	r26, r24
    585a:	cb 01       	movw	r24, r22
    585c:	9a a3       	std	Y+34, r25	; 0x22
    585e:	89 a3       	std	Y+33, r24	; 0x21
    5860:	89 a1       	ldd	r24, Y+33	; 0x21
    5862:	9a a1       	ldd	r25, Y+34	; 0x22
    5864:	9e 8f       	std	Y+30, r25	; 0x1e
    5866:	8d 8f       	std	Y+29, r24	; 0x1d
    5868:	8d 8d       	ldd	r24, Y+29	; 0x1d
    586a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    586c:	01 97       	sbiw	r24, 0x01	; 1
    586e:	f1 f7       	brne	.-4      	; 0x586c <lcd_display+0x522>
    5870:	9e 8f       	std	Y+30, r25	; 0x1e
    5872:	8d 8f       	std	Y+29, r24	; 0x1d
    5874:	7c cd       	rjmp	.-1288   	; 0x536e <lcd_display+0x24>
			_delay_ms(500);
			break;
		case 'S':
			HAL_LCD_u8Clear();
    5876:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
			HAL_LCD_u8SendString("Stopping!!");
    587a:	8f e6       	ldi	r24, 0x6F	; 111
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	aa ef       	ldi	r26, 0xFA	; 250
    5888:	b3 e4       	ldi	r27, 0x43	; 67
    588a:	89 8f       	std	Y+25, r24	; 0x19
    588c:	9a 8f       	std	Y+26, r25	; 0x1a
    588e:	ab 8f       	std	Y+27, r26	; 0x1b
    5890:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5892:	69 8d       	ldd	r22, Y+25	; 0x19
    5894:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	4a e7       	ldi	r20, 0x7A	; 122
    58a0:	55 e4       	ldi	r21, 0x45	; 69
    58a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	8d 8b       	std	Y+21, r24	; 0x15
    58ac:	9e 8b       	std	Y+22, r25	; 0x16
    58ae:	af 8b       	std	Y+23, r26	; 0x17
    58b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    58b2:	6d 89       	ldd	r22, Y+21	; 0x15
    58b4:	7e 89       	ldd	r23, Y+22	; 0x16
    58b6:	8f 89       	ldd	r24, Y+23	; 0x17
    58b8:	98 8d       	ldd	r25, Y+24	; 0x18
    58ba:	20 e0       	ldi	r18, 0x00	; 0
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	40 e8       	ldi	r20, 0x80	; 128
    58c0:	5f e3       	ldi	r21, 0x3F	; 63
    58c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58c6:	88 23       	and	r24, r24
    58c8:	2c f4       	brge	.+10     	; 0x58d4 <lcd_display+0x58a>
		__ticks = 1;
    58ca:	81 e0       	ldi	r24, 0x01	; 1
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	9c 8b       	std	Y+20, r25	; 0x14
    58d0:	8b 8b       	std	Y+19, r24	; 0x13
    58d2:	3f c0       	rjmp	.+126    	; 0x5952 <lcd_display+0x608>
	else if (__tmp > 65535)
    58d4:	6d 89       	ldd	r22, Y+21	; 0x15
    58d6:	7e 89       	ldd	r23, Y+22	; 0x16
    58d8:	8f 89       	ldd	r24, Y+23	; 0x17
    58da:	98 8d       	ldd	r25, Y+24	; 0x18
    58dc:	20 e0       	ldi	r18, 0x00	; 0
    58de:	3f ef       	ldi	r19, 0xFF	; 255
    58e0:	4f e7       	ldi	r20, 0x7F	; 127
    58e2:	57 e4       	ldi	r21, 0x47	; 71
    58e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58e8:	18 16       	cp	r1, r24
    58ea:	4c f5       	brge	.+82     	; 0x593e <lcd_display+0x5f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ec:	69 8d       	ldd	r22, Y+25	; 0x19
    58ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58f4:	20 e0       	ldi	r18, 0x00	; 0
    58f6:	30 e0       	ldi	r19, 0x00	; 0
    58f8:	40 e2       	ldi	r20, 0x20	; 32
    58fa:	51 e4       	ldi	r21, 0x41	; 65
    58fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5900:	dc 01       	movw	r26, r24
    5902:	cb 01       	movw	r24, r22
    5904:	bc 01       	movw	r22, r24
    5906:	cd 01       	movw	r24, r26
    5908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    590c:	dc 01       	movw	r26, r24
    590e:	cb 01       	movw	r24, r22
    5910:	9c 8b       	std	Y+20, r25	; 0x14
    5912:	8b 8b       	std	Y+19, r24	; 0x13
    5914:	0f c0       	rjmp	.+30     	; 0x5934 <lcd_display+0x5ea>
    5916:	80 e9       	ldi	r24, 0x90	; 144
    5918:	91 e0       	ldi	r25, 0x01	; 1
    591a:	9a 8b       	std	Y+18, r25	; 0x12
    591c:	89 8b       	std	Y+17, r24	; 0x11
    591e:	89 89       	ldd	r24, Y+17	; 0x11
    5920:	9a 89       	ldd	r25, Y+18	; 0x12
    5922:	01 97       	sbiw	r24, 0x01	; 1
    5924:	f1 f7       	brne	.-4      	; 0x5922 <lcd_display+0x5d8>
    5926:	9a 8b       	std	Y+18, r25	; 0x12
    5928:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    592a:	8b 89       	ldd	r24, Y+19	; 0x13
    592c:	9c 89       	ldd	r25, Y+20	; 0x14
    592e:	01 97       	sbiw	r24, 0x01	; 1
    5930:	9c 8b       	std	Y+20, r25	; 0x14
    5932:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5934:	8b 89       	ldd	r24, Y+19	; 0x13
    5936:	9c 89       	ldd	r25, Y+20	; 0x14
    5938:	00 97       	sbiw	r24, 0x00	; 0
    593a:	69 f7       	brne	.-38     	; 0x5916 <lcd_display+0x5cc>
    593c:	18 cd       	rjmp	.-1488   	; 0x536e <lcd_display+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    593e:	6d 89       	ldd	r22, Y+21	; 0x15
    5940:	7e 89       	ldd	r23, Y+22	; 0x16
    5942:	8f 89       	ldd	r24, Y+23	; 0x17
    5944:	98 8d       	ldd	r25, Y+24	; 0x18
    5946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    594a:	dc 01       	movw	r26, r24
    594c:	cb 01       	movw	r24, r22
    594e:	9c 8b       	std	Y+20, r25	; 0x14
    5950:	8b 8b       	std	Y+19, r24	; 0x13
    5952:	8b 89       	ldd	r24, Y+19	; 0x13
    5954:	9c 89       	ldd	r25, Y+20	; 0x14
    5956:	98 8b       	std	Y+16, r25	; 0x10
    5958:	8f 87       	std	Y+15, r24	; 0x0f
    595a:	8f 85       	ldd	r24, Y+15	; 0x0f
    595c:	98 89       	ldd	r25, Y+16	; 0x10
    595e:	01 97       	sbiw	r24, 0x01	; 1
    5960:	f1 f7       	brne	.-4      	; 0x595e <lcd_display+0x614>
    5962:	98 8b       	std	Y+16, r25	; 0x10
    5964:	8f 87       	std	Y+15, r24	; 0x0f
    5966:	03 cd       	rjmp	.-1530   	; 0x536e <lcd_display+0x24>
			_delay_ms(500);
			break;
		case 'B':
			HAL_LCD_u8Clear();
    5968:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
			HAL_LCD_u8SendString("Moving Back:");
    596c:	87 e9       	ldi	r24, 0x97	; 151
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    5974:	80 e0       	ldi	r24, 0x00	; 0
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	aa ef       	ldi	r26, 0xFA	; 250
    597a:	b3 e4       	ldi	r27, 0x43	; 67
    597c:	8b 87       	std	Y+11, r24	; 0x0b
    597e:	9c 87       	std	Y+12, r25	; 0x0c
    5980:	ad 87       	std	Y+13, r26	; 0x0d
    5982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5984:	6b 85       	ldd	r22, Y+11	; 0x0b
    5986:	7c 85       	ldd	r23, Y+12	; 0x0c
    5988:	8d 85       	ldd	r24, Y+13	; 0x0d
    598a:	9e 85       	ldd	r25, Y+14	; 0x0e
    598c:	20 e0       	ldi	r18, 0x00	; 0
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	4a e7       	ldi	r20, 0x7A	; 122
    5992:	55 e4       	ldi	r21, 0x45	; 69
    5994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5998:	dc 01       	movw	r26, r24
    599a:	cb 01       	movw	r24, r22
    599c:	8f 83       	std	Y+7, r24	; 0x07
    599e:	98 87       	std	Y+8, r25	; 0x08
    59a0:	a9 87       	std	Y+9, r26	; 0x09
    59a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59a4:	6f 81       	ldd	r22, Y+7	; 0x07
    59a6:	78 85       	ldd	r23, Y+8	; 0x08
    59a8:	89 85       	ldd	r24, Y+9	; 0x09
    59aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    59ac:	20 e0       	ldi	r18, 0x00	; 0
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	40 e8       	ldi	r20, 0x80	; 128
    59b2:	5f e3       	ldi	r21, 0x3F	; 63
    59b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59b8:	88 23       	and	r24, r24
    59ba:	2c f4       	brge	.+10     	; 0x59c6 <lcd_display+0x67c>
		__ticks = 1;
    59bc:	81 e0       	ldi	r24, 0x01	; 1
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	9e 83       	std	Y+6, r25	; 0x06
    59c2:	8d 83       	std	Y+5, r24	; 0x05
    59c4:	3f c0       	rjmp	.+126    	; 0x5a44 <lcd_display+0x6fa>
	else if (__tmp > 65535)
    59c6:	6f 81       	ldd	r22, Y+7	; 0x07
    59c8:	78 85       	ldd	r23, Y+8	; 0x08
    59ca:	89 85       	ldd	r24, Y+9	; 0x09
    59cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	3f ef       	ldi	r19, 0xFF	; 255
    59d2:	4f e7       	ldi	r20, 0x7F	; 127
    59d4:	57 e4       	ldi	r21, 0x47	; 71
    59d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59da:	18 16       	cp	r1, r24
    59dc:	4c f5       	brge	.+82     	; 0x5a30 <lcd_display+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59de:	6b 85       	ldd	r22, Y+11	; 0x0b
    59e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    59e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    59e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	30 e0       	ldi	r19, 0x00	; 0
    59ea:	40 e2       	ldi	r20, 0x20	; 32
    59ec:	51 e4       	ldi	r21, 0x41	; 65
    59ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59f2:	dc 01       	movw	r26, r24
    59f4:	cb 01       	movw	r24, r22
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59fe:	dc 01       	movw	r26, r24
    5a00:	cb 01       	movw	r24, r22
    5a02:	9e 83       	std	Y+6, r25	; 0x06
    5a04:	8d 83       	std	Y+5, r24	; 0x05
    5a06:	0f c0       	rjmp	.+30     	; 0x5a26 <lcd_display+0x6dc>
    5a08:	80 e9       	ldi	r24, 0x90	; 144
    5a0a:	91 e0       	ldi	r25, 0x01	; 1
    5a0c:	9c 83       	std	Y+4, r25	; 0x04
    5a0e:	8b 83       	std	Y+3, r24	; 0x03
    5a10:	8b 81       	ldd	r24, Y+3	; 0x03
    5a12:	9c 81       	ldd	r25, Y+4	; 0x04
    5a14:	01 97       	sbiw	r24, 0x01	; 1
    5a16:	f1 f7       	brne	.-4      	; 0x5a14 <lcd_display+0x6ca>
    5a18:	9c 83       	std	Y+4, r25	; 0x04
    5a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a20:	01 97       	sbiw	r24, 0x01	; 1
    5a22:	9e 83       	std	Y+6, r25	; 0x06
    5a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a26:	8d 81       	ldd	r24, Y+5	; 0x05
    5a28:	9e 81       	ldd	r25, Y+6	; 0x06
    5a2a:	00 97       	sbiw	r24, 0x00	; 0
    5a2c:	69 f7       	brne	.-38     	; 0x5a08 <lcd_display+0x6be>
    5a2e:	9f cc       	rjmp	.-1730   	; 0x536e <lcd_display+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a30:	6f 81       	ldd	r22, Y+7	; 0x07
    5a32:	78 85       	ldd	r23, Y+8	; 0x08
    5a34:	89 85       	ldd	r24, Y+9	; 0x09
    5a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a3c:	dc 01       	movw	r26, r24
    5a3e:	cb 01       	movw	r24, r22
    5a40:	9e 83       	std	Y+6, r25	; 0x06
    5a42:	8d 83       	std	Y+5, r24	; 0x05
    5a44:	8d 81       	ldd	r24, Y+5	; 0x05
    5a46:	9e 81       	ldd	r25, Y+6	; 0x06
    5a48:	9a 83       	std	Y+2, r25	; 0x02
    5a4a:	89 83       	std	Y+1, r24	; 0x01
    5a4c:	89 81       	ldd	r24, Y+1	; 0x01
    5a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a50:	01 97       	sbiw	r24, 0x01	; 1
    5a52:	f1 f7       	brne	.-4      	; 0x5a50 <lcd_display+0x706>
    5a54:	9a 83       	std	Y+2, r25	; 0x02
    5a56:	89 83       	std	Y+1, r24	; 0x01
    5a58:	8a cc       	rjmp	.-1772   	; 0x536e <lcd_display+0x24>

00005a5a <sensor>:
			_delay_ms(500);
			break;
		}
	}
}
void sensor(void *pt) {
    5a5a:	df 93       	push	r29
    5a5c:	cf 93       	push	r28
    5a5e:	00 d0       	rcall	.+0      	; 0x5a60 <sensor+0x6>
    5a60:	cd b7       	in	r28, 0x3d	; 61
    5a62:	de b7       	in	r29, 0x3e	; 62
    5a64:	9a 83       	std	Y+2, r25	; 0x02
    5a66:	89 83       	std	Y+1, r24	; 0x01
	while (1) {
		HAL_Ultrasonic_Sensor_voidCalcDistancse(&Glob_f32distance);
    5a68:	8c e2       	ldi	r24, 0x2C	; 44
    5a6a:	92 e0       	ldi	r25, 0x02	; 2
    5a6c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
    5a70:	fb cf       	rjmp	.-10     	; 0x5a68 <sensor+0xe>

00005a72 <APP_Autonomous_Car_voidInit>:

#include "Autonomous_Car.h"
volatile u16 Glob_u16DirLeft = NUM0;
volatile u16 Glob_u16DirRight = NUM0;
volatile u16 Glob_u16DirFront = NUM0;
void APP_Autonomous_Car_voidInit(void) {
    5a72:	df 93       	push	r29
    5a74:	cf 93       	push	r28
    5a76:	cd b7       	in	r28, 0x3d	; 61
    5a78:	de b7       	in	r29, 0x3e	; 62
	//Init Buzzer
//	HAL_Buzzer_u8BuzzerInit(PortA, Pin3);
	//Init LCD
	HAL_LCD_u8LCDInit();
    5a7a:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <HAL_LCD_u8LCDInit>
	//Init Servo Motor
	HAL_SM_voidSMInit();
    5a7e:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <HAL_SM_voidSMInit>
	//Init UltraSonic Sensor
	HAL_Ultrasonic_Sensor_voidInit();
    5a82:	0e 94 ca 19 	call	0x3394	; 0x3394 <HAL_Ultrasonic_Sensor_voidInit>
	//Init H_Bridge
	HAL_void_H_BridgeInit();
    5a86:	0e 94 93 27 	call	0x4f26	; 0x4f26 <HAL_void_H_BridgeInit>
	//Leds
	HAL_LED_u8LedInit(PortA, Pin0);
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	60 e0       	ldi	r22, 0x00	; 0
    5a8e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <HAL_LED_u8LedInit>
	HAL_LED_u8LedInit(PortA, Pin1);
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	61 e0       	ldi	r22, 0x01	; 1
    5a96:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <HAL_LED_u8LedInit>
}
    5a9a:	cf 91       	pop	r28
    5a9c:	df 91       	pop	r29
    5a9e:	08 95       	ret

00005aa0 <APP_Autonomous_Car_voidApp>:
void APP_Autonomous_Car_voidApp(void) {
    5aa0:	0f 93       	push	r16
    5aa2:	1f 93       	push	r17
    5aa4:	df 93       	push	r29
    5aa6:	cf 93       	push	r28
    5aa8:	cd b7       	in	r28, 0x3d	; 61
    5aaa:	de b7       	in	r29, 0x3e	; 62
    5aac:	c1 5c       	subi	r28, 0xC1	; 193
    5aae:	d0 40       	sbci	r29, 0x00	; 0
    5ab0:	0f b6       	in	r0, 0x3f	; 63
    5ab2:	f8 94       	cli
    5ab4:	de bf       	out	0x3e, r29	; 62
    5ab6:	0f be       	out	0x3f, r0	; 63
    5ab8:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8direction = 'E';
    5aba:	fe 01       	movw	r30, r28
    5abc:	e3 54       	subi	r30, 0x43	; 67
    5abe:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac0:	85 e4       	ldi	r24, 0x45	; 69
    5ac2:	80 83       	st	Z, r24
	f32 LOC_f32Distance = NUM0;
    5ac4:	fe 01       	movw	r30, r28
    5ac6:	e2 54       	subi	r30, 0x42	; 66
    5ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    5aca:	80 e0       	ldi	r24, 0x00	; 0
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	a0 e0       	ldi	r26, 0x00	; 0
    5ad0:	b0 e0       	ldi	r27, 0x00	; 0
    5ad2:	80 83       	st	Z, r24
    5ad4:	91 83       	std	Z+1, r25	; 0x01
    5ad6:	a2 83       	std	Z+2, r26	; 0x02
    5ad8:	b3 83       	std	Z+3, r27	; 0x03
	//	Initially Set Servo Angle 90
	HAL_SM_voidSMSetAngle(START_ANGLE);
    5ada:	8a e5       	ldi	r24, 0x5A	; 90
    5adc:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <HAL_SM_voidSMSetAngle>
	//Light Front LEDS
	HAL_LED_u8LedMode(PortA, Pin0, LED_ON);
    5ae0:	80 e0       	ldi	r24, 0x00	; 0
    5ae2:	60 e0       	ldi	r22, 0x00	; 0
    5ae4:	41 e0       	ldi	r20, 0x01	; 1
    5ae6:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
	while (NUM1) {
		MCAL_UART_UARTReceive(Loc_u8direction);
    5aea:	fe 01       	movw	r30, r28
    5aec:	e3 54       	subi	r30, 0x43	; 67
    5aee:	ff 4f       	sbci	r31, 0xFF	; 255
    5af0:	80 81       	ld	r24, Z
    5af2:	88 2f       	mov	r24, r24
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <MCAL_UART_UARTReceive>
		if(Loc_u8direction=='x'){
    5afa:	fe 01       	movw	r30, r28
    5afc:	e3 54       	subi	r30, 0x43	; 67
    5afe:	ff 4f       	sbci	r31, 0xFF	; 255
    5b00:	80 81       	ld	r24, Z
    5b02:	88 37       	cpi	r24, 0x78	; 120
    5b04:	11 f4       	brne	.+4      	; 0x5b0a <APP_Autonomous_Car_voidApp+0x6a>
			APP_Control_Car_App();
    5b06:	0e 94 0b 29 	call	0x5216	; 0x5216 <APP_Control_Car_App>
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	ed 54       	subi	r30, 0x4D	; 77
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	80 e0       	ldi	r24, 0x00	; 0
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	a8 e4       	ldi	r26, 0x48	; 72
    5b16:	b2 e4       	ldi	r27, 0x42	; 66
    5b18:	80 83       	st	Z, r24
    5b1a:	91 83       	std	Z+1, r25	; 0x01
    5b1c:	a2 83       	std	Z+2, r26	; 0x02
    5b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b20:	8e 01       	movw	r16, r28
    5b22:	01 55       	subi	r16, 0x51	; 81
    5b24:	1f 4f       	sbci	r17, 0xFF	; 255
    5b26:	fe 01       	movw	r30, r28
    5b28:	ed 54       	subi	r30, 0x4D	; 77
    5b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2c:	60 81       	ld	r22, Z
    5b2e:	71 81       	ldd	r23, Z+1	; 0x01
    5b30:	82 81       	ldd	r24, Z+2	; 0x02
    5b32:	93 81       	ldd	r25, Z+3	; 0x03
    5b34:	20 e0       	ldi	r18, 0x00	; 0
    5b36:	30 e0       	ldi	r19, 0x00	; 0
    5b38:	4a e7       	ldi	r20, 0x7A	; 122
    5b3a:	55 e4       	ldi	r21, 0x45	; 69
    5b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	f8 01       	movw	r30, r16
    5b46:	80 83       	st	Z, r24
    5b48:	91 83       	std	Z+1, r25	; 0x01
    5b4a:	a2 83       	std	Z+2, r26	; 0x02
    5b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b4e:	fe 01       	movw	r30, r28
    5b50:	e1 55       	subi	r30, 0x51	; 81
    5b52:	ff 4f       	sbci	r31, 0xFF	; 255
    5b54:	60 81       	ld	r22, Z
    5b56:	71 81       	ldd	r23, Z+1	; 0x01
    5b58:	82 81       	ldd	r24, Z+2	; 0x02
    5b5a:	93 81       	ldd	r25, Z+3	; 0x03
    5b5c:	20 e0       	ldi	r18, 0x00	; 0
    5b5e:	30 e0       	ldi	r19, 0x00	; 0
    5b60:	40 e8       	ldi	r20, 0x80	; 128
    5b62:	5f e3       	ldi	r21, 0x3F	; 63
    5b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b68:	88 23       	and	r24, r24
    5b6a:	44 f4       	brge	.+16     	; 0x5b7c <APP_Autonomous_Car_voidApp+0xdc>
		__ticks = 1;
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	e3 55       	subi	r30, 0x53	; 83
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	81 e0       	ldi	r24, 0x01	; 1
    5b74:	90 e0       	ldi	r25, 0x00	; 0
    5b76:	91 83       	std	Z+1, r25	; 0x01
    5b78:	80 83       	st	Z, r24
    5b7a:	64 c0       	rjmp	.+200    	; 0x5c44 <APP_Autonomous_Car_voidApp+0x1a4>
	else if (__tmp > 65535)
    5b7c:	fe 01       	movw	r30, r28
    5b7e:	e1 55       	subi	r30, 0x51	; 81
    5b80:	ff 4f       	sbci	r31, 0xFF	; 255
    5b82:	60 81       	ld	r22, Z
    5b84:	71 81       	ldd	r23, Z+1	; 0x01
    5b86:	82 81       	ldd	r24, Z+2	; 0x02
    5b88:	93 81       	ldd	r25, Z+3	; 0x03
    5b8a:	20 e0       	ldi	r18, 0x00	; 0
    5b8c:	3f ef       	ldi	r19, 0xFF	; 255
    5b8e:	4f e7       	ldi	r20, 0x7F	; 127
    5b90:	57 e4       	ldi	r21, 0x47	; 71
    5b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b96:	18 16       	cp	r1, r24
    5b98:	0c f0       	brlt	.+2      	; 0x5b9c <APP_Autonomous_Car_voidApp+0xfc>
    5b9a:	43 c0       	rjmp	.+134    	; 0x5c22 <APP_Autonomous_Car_voidApp+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b9c:	fe 01       	movw	r30, r28
    5b9e:	ed 54       	subi	r30, 0x4D	; 77
    5ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba2:	60 81       	ld	r22, Z
    5ba4:	71 81       	ldd	r23, Z+1	; 0x01
    5ba6:	82 81       	ldd	r24, Z+2	; 0x02
    5ba8:	93 81       	ldd	r25, Z+3	; 0x03
    5baa:	20 e0       	ldi	r18, 0x00	; 0
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	40 e2       	ldi	r20, 0x20	; 32
    5bb0:	51 e4       	ldi	r21, 0x41	; 65
    5bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bb6:	dc 01       	movw	r26, r24
    5bb8:	cb 01       	movw	r24, r22
    5bba:	8e 01       	movw	r16, r28
    5bbc:	03 55       	subi	r16, 0x53	; 83
    5bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc0:	bc 01       	movw	r22, r24
    5bc2:	cd 01       	movw	r24, r26
    5bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	f8 01       	movw	r30, r16
    5bce:	91 83       	std	Z+1, r25	; 0x01
    5bd0:	80 83       	st	Z, r24
    5bd2:	1f c0       	rjmp	.+62     	; 0x5c12 <APP_Autonomous_Car_voidApp+0x172>
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	e5 55       	subi	r30, 0x55	; 85
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	80 e9       	ldi	r24, 0x90	; 144
    5bdc:	91 e0       	ldi	r25, 0x01	; 1
    5bde:	91 83       	std	Z+1, r25	; 0x01
    5be0:	80 83       	st	Z, r24
    5be2:	fe 01       	movw	r30, r28
    5be4:	e5 55       	subi	r30, 0x55	; 85
    5be6:	ff 4f       	sbci	r31, 0xFF	; 255
    5be8:	80 81       	ld	r24, Z
    5bea:	91 81       	ldd	r25, Z+1	; 0x01
    5bec:	01 97       	sbiw	r24, 0x01	; 1
    5bee:	f1 f7       	brne	.-4      	; 0x5bec <APP_Autonomous_Car_voidApp+0x14c>
    5bf0:	fe 01       	movw	r30, r28
    5bf2:	e5 55       	subi	r30, 0x55	; 85
    5bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf6:	91 83       	std	Z+1, r25	; 0x01
    5bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bfa:	de 01       	movw	r26, r28
    5bfc:	a3 55       	subi	r26, 0x53	; 83
    5bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    5c00:	fe 01       	movw	r30, r28
    5c02:	e3 55       	subi	r30, 0x53	; 83
    5c04:	ff 4f       	sbci	r31, 0xFF	; 255
    5c06:	80 81       	ld	r24, Z
    5c08:	91 81       	ldd	r25, Z+1	; 0x01
    5c0a:	01 97       	sbiw	r24, 0x01	; 1
    5c0c:	11 96       	adiw	r26, 0x01	; 1
    5c0e:	9c 93       	st	X, r25
    5c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c12:	fe 01       	movw	r30, r28
    5c14:	e3 55       	subi	r30, 0x53	; 83
    5c16:	ff 4f       	sbci	r31, 0xFF	; 255
    5c18:	80 81       	ld	r24, Z
    5c1a:	91 81       	ldd	r25, Z+1	; 0x01
    5c1c:	00 97       	sbiw	r24, 0x00	; 0
    5c1e:	d1 f6       	brne	.-76     	; 0x5bd4 <APP_Autonomous_Car_voidApp+0x134>
    5c20:	27 c0       	rjmp	.+78     	; 0x5c70 <APP_Autonomous_Car_voidApp+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c22:	8e 01       	movw	r16, r28
    5c24:	03 55       	subi	r16, 0x53	; 83
    5c26:	1f 4f       	sbci	r17, 0xFF	; 255
    5c28:	fe 01       	movw	r30, r28
    5c2a:	e1 55       	subi	r30, 0x51	; 81
    5c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2e:	60 81       	ld	r22, Z
    5c30:	71 81       	ldd	r23, Z+1	; 0x01
    5c32:	82 81       	ldd	r24, Z+2	; 0x02
    5c34:	93 81       	ldd	r25, Z+3	; 0x03
    5c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	cb 01       	movw	r24, r22
    5c3e:	f8 01       	movw	r30, r16
    5c40:	91 83       	std	Z+1, r25	; 0x01
    5c42:	80 83       	st	Z, r24
    5c44:	de 01       	movw	r26, r28
    5c46:	a7 55       	subi	r26, 0x57	; 87
    5c48:	bf 4f       	sbci	r27, 0xFF	; 255
    5c4a:	fe 01       	movw	r30, r28
    5c4c:	e3 55       	subi	r30, 0x53	; 83
    5c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c50:	80 81       	ld	r24, Z
    5c52:	91 81       	ldd	r25, Z+1	; 0x01
    5c54:	8d 93       	st	X+, r24
    5c56:	9c 93       	st	X, r25
    5c58:	fe 01       	movw	r30, r28
    5c5a:	e7 55       	subi	r30, 0x57	; 87
    5c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5e:	80 81       	ld	r24, Z
    5c60:	91 81       	ldd	r25, Z+1	; 0x01
    5c62:	01 97       	sbiw	r24, 0x01	; 1
    5c64:	f1 f7       	brne	.-4      	; 0x5c62 <APP_Autonomous_Car_voidApp+0x1c2>
    5c66:	fe 01       	movw	r30, r28
    5c68:	e7 55       	subi	r30, 0x57	; 87
    5c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6c:	91 83       	std	Z+1, r25	; 0x01
    5c6e:	80 83       	st	Z, r24
		}
		_delay_ms(50);
		HAL_Ultrasonic_Sensor_voidCalcDistancse(&LOC_f32Distance);
    5c70:	ce 01       	movw	r24, r28
    5c72:	82 54       	subi	r24, 0x42	; 66
    5c74:	9f 4f       	sbci	r25, 0xFF	; 255
    5c76:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
//		Glob_u16DirFront = LOC_f32Distance;
		if (LOC_f32Distance > DISTANCE_30) {
    5c7a:	fe 01       	movw	r30, r28
    5c7c:	e2 54       	subi	r30, 0x42	; 66
    5c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c80:	80 81       	ld	r24, Z
    5c82:	91 81       	ldd	r25, Z+1	; 0x01
    5c84:	a2 81       	ldd	r26, Z+2	; 0x02
    5c86:	b3 81       	ldd	r27, Z+3	; 0x03
    5c88:	bc 01       	movw	r22, r24
    5c8a:	cd 01       	movw	r24, r26
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	30 e0       	ldi	r19, 0x00	; 0
    5c90:	40 ef       	ldi	r20, 0xF0	; 240
    5c92:	51 e4       	ldi	r21, 0x41	; 65
    5c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c98:	18 16       	cp	r1, r24
    5c9a:	0c f0       	brlt	.+2      	; 0x5c9e <APP_Autonomous_Car_voidApp+0x1fe>
    5c9c:	50 c2       	rjmp	.+1184   	; 0x613e <APP_Autonomous_Car_voidApp+0x69e>
			HAL_LCD_u8Clear();
    5c9e:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
			HAL_LCD_u8SendString("Moving Front...");
    5ca2:	84 ea       	ldi	r24, 0xA4	; 164
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
			HAL_LCD_u8GoTo(Second_Line, NUM0);
    5caa:	83 e0       	ldi	r24, 0x03	; 3
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	0e 94 22 24 	call	0x4844	; 0x4844 <HAL_LCD_u8GoTo>
			HAL_LCD_u8SendString("Distance: ");
    5cb2:	84 eb       	ldi	r24, 0xB4	; 180
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    5cba:	fe 01       	movw	r30, r28
    5cbc:	eb 55       	subi	r30, 0x5B	; 91
    5cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc0:	80 e0       	ldi	r24, 0x00	; 0
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	a8 e4       	ldi	r26, 0x48	; 72
    5cc6:	b2 e4       	ldi	r27, 0x42	; 66
    5cc8:	80 83       	st	Z, r24
    5cca:	91 83       	std	Z+1, r25	; 0x01
    5ccc:	a2 83       	std	Z+2, r26	; 0x02
    5cce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cd0:	8e 01       	movw	r16, r28
    5cd2:	0f 55       	subi	r16, 0x5F	; 95
    5cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd6:	fe 01       	movw	r30, r28
    5cd8:	eb 55       	subi	r30, 0x5B	; 91
    5cda:	ff 4f       	sbci	r31, 0xFF	; 255
    5cdc:	60 81       	ld	r22, Z
    5cde:	71 81       	ldd	r23, Z+1	; 0x01
    5ce0:	82 81       	ldd	r24, Z+2	; 0x02
    5ce2:	93 81       	ldd	r25, Z+3	; 0x03
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	30 e0       	ldi	r19, 0x00	; 0
    5ce8:	4a e7       	ldi	r20, 0x7A	; 122
    5cea:	55 e4       	ldi	r21, 0x45	; 69
    5cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cf0:	dc 01       	movw	r26, r24
    5cf2:	cb 01       	movw	r24, r22
    5cf4:	f8 01       	movw	r30, r16
    5cf6:	80 83       	st	Z, r24
    5cf8:	91 83       	std	Z+1, r25	; 0x01
    5cfa:	a2 83       	std	Z+2, r26	; 0x02
    5cfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cfe:	fe 01       	movw	r30, r28
    5d00:	ef 55       	subi	r30, 0x5F	; 95
    5d02:	ff 4f       	sbci	r31, 0xFF	; 255
    5d04:	60 81       	ld	r22, Z
    5d06:	71 81       	ldd	r23, Z+1	; 0x01
    5d08:	82 81       	ldd	r24, Z+2	; 0x02
    5d0a:	93 81       	ldd	r25, Z+3	; 0x03
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	40 e8       	ldi	r20, 0x80	; 128
    5d12:	5f e3       	ldi	r21, 0x3F	; 63
    5d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d18:	88 23       	and	r24, r24
    5d1a:	44 f4       	brge	.+16     	; 0x5d2c <APP_Autonomous_Car_voidApp+0x28c>
		__ticks = 1;
    5d1c:	fe 01       	movw	r30, r28
    5d1e:	e1 56       	subi	r30, 0x61	; 97
    5d20:	ff 4f       	sbci	r31, 0xFF	; 255
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	91 83       	std	Z+1, r25	; 0x01
    5d28:	80 83       	st	Z, r24
    5d2a:	64 c0       	rjmp	.+200    	; 0x5df4 <APP_Autonomous_Car_voidApp+0x354>
	else if (__tmp > 65535)
    5d2c:	fe 01       	movw	r30, r28
    5d2e:	ef 55       	subi	r30, 0x5F	; 95
    5d30:	ff 4f       	sbci	r31, 0xFF	; 255
    5d32:	60 81       	ld	r22, Z
    5d34:	71 81       	ldd	r23, Z+1	; 0x01
    5d36:	82 81       	ldd	r24, Z+2	; 0x02
    5d38:	93 81       	ldd	r25, Z+3	; 0x03
    5d3a:	20 e0       	ldi	r18, 0x00	; 0
    5d3c:	3f ef       	ldi	r19, 0xFF	; 255
    5d3e:	4f e7       	ldi	r20, 0x7F	; 127
    5d40:	57 e4       	ldi	r21, 0x47	; 71
    5d42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d46:	18 16       	cp	r1, r24
    5d48:	0c f0       	brlt	.+2      	; 0x5d4c <APP_Autonomous_Car_voidApp+0x2ac>
    5d4a:	43 c0       	rjmp	.+134    	; 0x5dd2 <APP_Autonomous_Car_voidApp+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d4c:	fe 01       	movw	r30, r28
    5d4e:	eb 55       	subi	r30, 0x5B	; 91
    5d50:	ff 4f       	sbci	r31, 0xFF	; 255
    5d52:	60 81       	ld	r22, Z
    5d54:	71 81       	ldd	r23, Z+1	; 0x01
    5d56:	82 81       	ldd	r24, Z+2	; 0x02
    5d58:	93 81       	ldd	r25, Z+3	; 0x03
    5d5a:	20 e0       	ldi	r18, 0x00	; 0
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	40 e2       	ldi	r20, 0x20	; 32
    5d60:	51 e4       	ldi	r21, 0x41	; 65
    5d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d66:	dc 01       	movw	r26, r24
    5d68:	cb 01       	movw	r24, r22
    5d6a:	8e 01       	movw	r16, r28
    5d6c:	01 56       	subi	r16, 0x61	; 97
    5d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d70:	bc 01       	movw	r22, r24
    5d72:	cd 01       	movw	r24, r26
    5d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d78:	dc 01       	movw	r26, r24
    5d7a:	cb 01       	movw	r24, r22
    5d7c:	f8 01       	movw	r30, r16
    5d7e:	91 83       	std	Z+1, r25	; 0x01
    5d80:	80 83       	st	Z, r24
    5d82:	1f c0       	rjmp	.+62     	; 0x5dc2 <APP_Autonomous_Car_voidApp+0x322>
    5d84:	fe 01       	movw	r30, r28
    5d86:	e3 56       	subi	r30, 0x63	; 99
    5d88:	ff 4f       	sbci	r31, 0xFF	; 255
    5d8a:	80 e9       	ldi	r24, 0x90	; 144
    5d8c:	91 e0       	ldi	r25, 0x01	; 1
    5d8e:	91 83       	std	Z+1, r25	; 0x01
    5d90:	80 83       	st	Z, r24
    5d92:	fe 01       	movw	r30, r28
    5d94:	e3 56       	subi	r30, 0x63	; 99
    5d96:	ff 4f       	sbci	r31, 0xFF	; 255
    5d98:	80 81       	ld	r24, Z
    5d9a:	91 81       	ldd	r25, Z+1	; 0x01
    5d9c:	01 97       	sbiw	r24, 0x01	; 1
    5d9e:	f1 f7       	brne	.-4      	; 0x5d9c <APP_Autonomous_Car_voidApp+0x2fc>
    5da0:	fe 01       	movw	r30, r28
    5da2:	e3 56       	subi	r30, 0x63	; 99
    5da4:	ff 4f       	sbci	r31, 0xFF	; 255
    5da6:	91 83       	std	Z+1, r25	; 0x01
    5da8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5daa:	de 01       	movw	r26, r28
    5dac:	a1 56       	subi	r26, 0x61	; 97
    5dae:	bf 4f       	sbci	r27, 0xFF	; 255
    5db0:	fe 01       	movw	r30, r28
    5db2:	e1 56       	subi	r30, 0x61	; 97
    5db4:	ff 4f       	sbci	r31, 0xFF	; 255
    5db6:	80 81       	ld	r24, Z
    5db8:	91 81       	ldd	r25, Z+1	; 0x01
    5dba:	01 97       	sbiw	r24, 0x01	; 1
    5dbc:	11 96       	adiw	r26, 0x01	; 1
    5dbe:	9c 93       	st	X, r25
    5dc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dc2:	fe 01       	movw	r30, r28
    5dc4:	e1 56       	subi	r30, 0x61	; 97
    5dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc8:	80 81       	ld	r24, Z
    5dca:	91 81       	ldd	r25, Z+1	; 0x01
    5dcc:	00 97       	sbiw	r24, 0x00	; 0
    5dce:	d1 f6       	brne	.-76     	; 0x5d84 <APP_Autonomous_Car_voidApp+0x2e4>
    5dd0:	27 c0       	rjmp	.+78     	; 0x5e20 <APP_Autonomous_Car_voidApp+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dd2:	8e 01       	movw	r16, r28
    5dd4:	01 56       	subi	r16, 0x61	; 97
    5dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    5dd8:	fe 01       	movw	r30, r28
    5dda:	ef 55       	subi	r30, 0x5F	; 95
    5ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dde:	60 81       	ld	r22, Z
    5de0:	71 81       	ldd	r23, Z+1	; 0x01
    5de2:	82 81       	ldd	r24, Z+2	; 0x02
    5de4:	93 81       	ldd	r25, Z+3	; 0x03
    5de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dea:	dc 01       	movw	r26, r24
    5dec:	cb 01       	movw	r24, r22
    5dee:	f8 01       	movw	r30, r16
    5df0:	91 83       	std	Z+1, r25	; 0x01
    5df2:	80 83       	st	Z, r24
    5df4:	de 01       	movw	r26, r28
    5df6:	a5 56       	subi	r26, 0x65	; 101
    5df8:	bf 4f       	sbci	r27, 0xFF	; 255
    5dfa:	fe 01       	movw	r30, r28
    5dfc:	e1 56       	subi	r30, 0x61	; 97
    5dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5e00:	80 81       	ld	r24, Z
    5e02:	91 81       	ldd	r25, Z+1	; 0x01
    5e04:	8d 93       	st	X+, r24
    5e06:	9c 93       	st	X, r25
    5e08:	fe 01       	movw	r30, r28
    5e0a:	e5 56       	subi	r30, 0x65	; 101
    5e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0e:	80 81       	ld	r24, Z
    5e10:	91 81       	ldd	r25, Z+1	; 0x01
    5e12:	01 97       	sbiw	r24, 0x01	; 1
    5e14:	f1 f7       	brne	.-4      	; 0x5e12 <APP_Autonomous_Car_voidApp+0x372>
    5e16:	fe 01       	movw	r30, r28
    5e18:	e5 56       	subi	r30, 0x65	; 101
    5e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e1c:	91 83       	std	Z+1, r25	; 0x01
    5e1e:	80 83       	st	Z, r24
			_delay_ms(50);
			HAL_Ultrasonic_Sensor_voidCalcDistancse(&LOC_f32Distance);
    5e20:	ce 01       	movw	r24, r28
    5e22:	82 54       	subi	r24, 0x42	; 66
    5e24:	9f 4f       	sbci	r25, 0xFF	; 255
    5e26:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
    5e2a:	fe 01       	movw	r30, r28
    5e2c:	e9 56       	subi	r30, 0x69	; 105
    5e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e30:	80 e0       	ldi	r24, 0x00	; 0
    5e32:	90 e0       	ldi	r25, 0x00	; 0
    5e34:	a8 e4       	ldi	r26, 0x48	; 72
    5e36:	b2 e4       	ldi	r27, 0x42	; 66
    5e38:	80 83       	st	Z, r24
    5e3a:	91 83       	std	Z+1, r25	; 0x01
    5e3c:	a2 83       	std	Z+2, r26	; 0x02
    5e3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e40:	8e 01       	movw	r16, r28
    5e42:	0d 56       	subi	r16, 0x6D	; 109
    5e44:	1f 4f       	sbci	r17, 0xFF	; 255
    5e46:	fe 01       	movw	r30, r28
    5e48:	e9 56       	subi	r30, 0x69	; 105
    5e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4c:	60 81       	ld	r22, Z
    5e4e:	71 81       	ldd	r23, Z+1	; 0x01
    5e50:	82 81       	ldd	r24, Z+2	; 0x02
    5e52:	93 81       	ldd	r25, Z+3	; 0x03
    5e54:	20 e0       	ldi	r18, 0x00	; 0
    5e56:	30 e0       	ldi	r19, 0x00	; 0
    5e58:	4a e7       	ldi	r20, 0x7A	; 122
    5e5a:	55 e4       	ldi	r21, 0x45	; 69
    5e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e60:	dc 01       	movw	r26, r24
    5e62:	cb 01       	movw	r24, r22
    5e64:	f8 01       	movw	r30, r16
    5e66:	80 83       	st	Z, r24
    5e68:	91 83       	std	Z+1, r25	; 0x01
    5e6a:	a2 83       	std	Z+2, r26	; 0x02
    5e6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e6e:	fe 01       	movw	r30, r28
    5e70:	ed 56       	subi	r30, 0x6D	; 109
    5e72:	ff 4f       	sbci	r31, 0xFF	; 255
    5e74:	60 81       	ld	r22, Z
    5e76:	71 81       	ldd	r23, Z+1	; 0x01
    5e78:	82 81       	ldd	r24, Z+2	; 0x02
    5e7a:	93 81       	ldd	r25, Z+3	; 0x03
    5e7c:	20 e0       	ldi	r18, 0x00	; 0
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
    5e80:	40 e8       	ldi	r20, 0x80	; 128
    5e82:	5f e3       	ldi	r21, 0x3F	; 63
    5e84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e88:	88 23       	and	r24, r24
    5e8a:	44 f4       	brge	.+16     	; 0x5e9c <APP_Autonomous_Car_voidApp+0x3fc>
		__ticks = 1;
    5e8c:	fe 01       	movw	r30, r28
    5e8e:	ef 56       	subi	r30, 0x6F	; 111
    5e90:	ff 4f       	sbci	r31, 0xFF	; 255
    5e92:	81 e0       	ldi	r24, 0x01	; 1
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	91 83       	std	Z+1, r25	; 0x01
    5e98:	80 83       	st	Z, r24
    5e9a:	64 c0       	rjmp	.+200    	; 0x5f64 <APP_Autonomous_Car_voidApp+0x4c4>
	else if (__tmp > 65535)
    5e9c:	fe 01       	movw	r30, r28
    5e9e:	ed 56       	subi	r30, 0x6D	; 109
    5ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ea2:	60 81       	ld	r22, Z
    5ea4:	71 81       	ldd	r23, Z+1	; 0x01
    5ea6:	82 81       	ldd	r24, Z+2	; 0x02
    5ea8:	93 81       	ldd	r25, Z+3	; 0x03
    5eaa:	20 e0       	ldi	r18, 0x00	; 0
    5eac:	3f ef       	ldi	r19, 0xFF	; 255
    5eae:	4f e7       	ldi	r20, 0x7F	; 127
    5eb0:	57 e4       	ldi	r21, 0x47	; 71
    5eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5eb6:	18 16       	cp	r1, r24
    5eb8:	0c f0       	brlt	.+2      	; 0x5ebc <APP_Autonomous_Car_voidApp+0x41c>
    5eba:	43 c0       	rjmp	.+134    	; 0x5f42 <APP_Autonomous_Car_voidApp+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	e9 56       	subi	r30, 0x69	; 105
    5ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec2:	60 81       	ld	r22, Z
    5ec4:	71 81       	ldd	r23, Z+1	; 0x01
    5ec6:	82 81       	ldd	r24, Z+2	; 0x02
    5ec8:	93 81       	ldd	r25, Z+3	; 0x03
    5eca:	20 e0       	ldi	r18, 0x00	; 0
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	40 e2       	ldi	r20, 0x20	; 32
    5ed0:	51 e4       	ldi	r21, 0x41	; 65
    5ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ed6:	dc 01       	movw	r26, r24
    5ed8:	cb 01       	movw	r24, r22
    5eda:	8e 01       	movw	r16, r28
    5edc:	0f 56       	subi	r16, 0x6F	; 111
    5ede:	1f 4f       	sbci	r17, 0xFF	; 255
    5ee0:	bc 01       	movw	r22, r24
    5ee2:	cd 01       	movw	r24, r26
    5ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ee8:	dc 01       	movw	r26, r24
    5eea:	cb 01       	movw	r24, r22
    5eec:	f8 01       	movw	r30, r16
    5eee:	91 83       	std	Z+1, r25	; 0x01
    5ef0:	80 83       	st	Z, r24
    5ef2:	1f c0       	rjmp	.+62     	; 0x5f32 <APP_Autonomous_Car_voidApp+0x492>
    5ef4:	fe 01       	movw	r30, r28
    5ef6:	e1 57       	subi	r30, 0x71	; 113
    5ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    5efa:	80 e9       	ldi	r24, 0x90	; 144
    5efc:	91 e0       	ldi	r25, 0x01	; 1
    5efe:	91 83       	std	Z+1, r25	; 0x01
    5f00:	80 83       	st	Z, r24
    5f02:	fe 01       	movw	r30, r28
    5f04:	e1 57       	subi	r30, 0x71	; 113
    5f06:	ff 4f       	sbci	r31, 0xFF	; 255
    5f08:	80 81       	ld	r24, Z
    5f0a:	91 81       	ldd	r25, Z+1	; 0x01
    5f0c:	01 97       	sbiw	r24, 0x01	; 1
    5f0e:	f1 f7       	brne	.-4      	; 0x5f0c <APP_Autonomous_Car_voidApp+0x46c>
    5f10:	fe 01       	movw	r30, r28
    5f12:	e1 57       	subi	r30, 0x71	; 113
    5f14:	ff 4f       	sbci	r31, 0xFF	; 255
    5f16:	91 83       	std	Z+1, r25	; 0x01
    5f18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f1a:	de 01       	movw	r26, r28
    5f1c:	af 56       	subi	r26, 0x6F	; 111
    5f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    5f20:	fe 01       	movw	r30, r28
    5f22:	ef 56       	subi	r30, 0x6F	; 111
    5f24:	ff 4f       	sbci	r31, 0xFF	; 255
    5f26:	80 81       	ld	r24, Z
    5f28:	91 81       	ldd	r25, Z+1	; 0x01
    5f2a:	01 97       	sbiw	r24, 0x01	; 1
    5f2c:	11 96       	adiw	r26, 0x01	; 1
    5f2e:	9c 93       	st	X, r25
    5f30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f32:	fe 01       	movw	r30, r28
    5f34:	ef 56       	subi	r30, 0x6F	; 111
    5f36:	ff 4f       	sbci	r31, 0xFF	; 255
    5f38:	80 81       	ld	r24, Z
    5f3a:	91 81       	ldd	r25, Z+1	; 0x01
    5f3c:	00 97       	sbiw	r24, 0x00	; 0
    5f3e:	d1 f6       	brne	.-76     	; 0x5ef4 <APP_Autonomous_Car_voidApp+0x454>
    5f40:	27 c0       	rjmp	.+78     	; 0x5f90 <APP_Autonomous_Car_voidApp+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f42:	8e 01       	movw	r16, r28
    5f44:	0f 56       	subi	r16, 0x6F	; 111
    5f46:	1f 4f       	sbci	r17, 0xFF	; 255
    5f48:	fe 01       	movw	r30, r28
    5f4a:	ed 56       	subi	r30, 0x6D	; 109
    5f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4e:	60 81       	ld	r22, Z
    5f50:	71 81       	ldd	r23, Z+1	; 0x01
    5f52:	82 81       	ldd	r24, Z+2	; 0x02
    5f54:	93 81       	ldd	r25, Z+3	; 0x03
    5f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f5a:	dc 01       	movw	r26, r24
    5f5c:	cb 01       	movw	r24, r22
    5f5e:	f8 01       	movw	r30, r16
    5f60:	91 83       	std	Z+1, r25	; 0x01
    5f62:	80 83       	st	Z, r24
    5f64:	de 01       	movw	r26, r28
    5f66:	a3 57       	subi	r26, 0x73	; 115
    5f68:	bf 4f       	sbci	r27, 0xFF	; 255
    5f6a:	fe 01       	movw	r30, r28
    5f6c:	ef 56       	subi	r30, 0x6F	; 111
    5f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f70:	80 81       	ld	r24, Z
    5f72:	91 81       	ldd	r25, Z+1	; 0x01
    5f74:	8d 93       	st	X+, r24
    5f76:	9c 93       	st	X, r25
    5f78:	fe 01       	movw	r30, r28
    5f7a:	e3 57       	subi	r30, 0x73	; 115
    5f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7e:	80 81       	ld	r24, Z
    5f80:	91 81       	ldd	r25, Z+1	; 0x01
    5f82:	01 97       	sbiw	r24, 0x01	; 1
    5f84:	f1 f7       	brne	.-4      	; 0x5f82 <APP_Autonomous_Car_voidApp+0x4e2>
    5f86:	fe 01       	movw	r30, r28
    5f88:	e3 57       	subi	r30, 0x73	; 115
    5f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f8c:	91 83       	std	Z+1, r25	; 0x01
    5f8e:	80 83       	st	Z, r24
			_delay_ms(50);
			Glob_u16DirFront = LOC_f32Distance;
    5f90:	fe 01       	movw	r30, r28
    5f92:	e2 54       	subi	r30, 0x42	; 66
    5f94:	ff 4f       	sbci	r31, 0xFF	; 255
    5f96:	80 81       	ld	r24, Z
    5f98:	91 81       	ldd	r25, Z+1	; 0x01
    5f9a:	a2 81       	ldd	r26, Z+2	; 0x02
    5f9c:	b3 81       	ldd	r27, Z+3	; 0x03
    5f9e:	bc 01       	movw	r22, r24
    5fa0:	cd 01       	movw	r24, r26
    5fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fa6:	dc 01       	movw	r26, r24
    5fa8:	cb 01       	movw	r24, r22
    5faa:	90 93 35 02 	sts	0x0235, r25
    5fae:	80 93 34 02 	sts	0x0234, r24
			HAL_LCD_u8SendNumber(Glob_u16DirFront);
    5fb2:	80 91 34 02 	lds	r24, 0x0234
    5fb6:	90 91 35 02 	lds	r25, 0x0235
    5fba:	0e 94 ff 23 	call	0x47fe	; 0x47fe <HAL_LCD_u8SendNumber>
    5fbe:	fe 01       	movw	r30, r28
    5fc0:	e7 57       	subi	r30, 0x77	; 119
    5fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc4:	80 e0       	ldi	r24, 0x00	; 0
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	a0 ea       	ldi	r26, 0xA0	; 160
    5fca:	b1 e4       	ldi	r27, 0x41	; 65
    5fcc:	80 83       	st	Z, r24
    5fce:	91 83       	std	Z+1, r25	; 0x01
    5fd0:	a2 83       	std	Z+2, r26	; 0x02
    5fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fd4:	8e 01       	movw	r16, r28
    5fd6:	0b 57       	subi	r16, 0x7B	; 123
    5fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    5fda:	fe 01       	movw	r30, r28
    5fdc:	e7 57       	subi	r30, 0x77	; 119
    5fde:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe0:	60 81       	ld	r22, Z
    5fe2:	71 81       	ldd	r23, Z+1	; 0x01
    5fe4:	82 81       	ldd	r24, Z+2	; 0x02
    5fe6:	93 81       	ldd	r25, Z+3	; 0x03
    5fe8:	20 e0       	ldi	r18, 0x00	; 0
    5fea:	30 e0       	ldi	r19, 0x00	; 0
    5fec:	4a e7       	ldi	r20, 0x7A	; 122
    5fee:	55 e4       	ldi	r21, 0x45	; 69
    5ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ff4:	dc 01       	movw	r26, r24
    5ff6:	cb 01       	movw	r24, r22
    5ff8:	f8 01       	movw	r30, r16
    5ffa:	80 83       	st	Z, r24
    5ffc:	91 83       	std	Z+1, r25	; 0x01
    5ffe:	a2 83       	std	Z+2, r26	; 0x02
    6000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6002:	fe 01       	movw	r30, r28
    6004:	eb 57       	subi	r30, 0x7B	; 123
    6006:	ff 4f       	sbci	r31, 0xFF	; 255
    6008:	60 81       	ld	r22, Z
    600a:	71 81       	ldd	r23, Z+1	; 0x01
    600c:	82 81       	ldd	r24, Z+2	; 0x02
    600e:	93 81       	ldd	r25, Z+3	; 0x03
    6010:	20 e0       	ldi	r18, 0x00	; 0
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	40 e8       	ldi	r20, 0x80	; 128
    6016:	5f e3       	ldi	r21, 0x3F	; 63
    6018:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    601c:	88 23       	and	r24, r24
    601e:	44 f4       	brge	.+16     	; 0x6030 <APP_Autonomous_Car_voidApp+0x590>
		__ticks = 1;
    6020:	fe 01       	movw	r30, r28
    6022:	ed 57       	subi	r30, 0x7D	; 125
    6024:	ff 4f       	sbci	r31, 0xFF	; 255
    6026:	81 e0       	ldi	r24, 0x01	; 1
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	91 83       	std	Z+1, r25	; 0x01
    602c:	80 83       	st	Z, r24
    602e:	64 c0       	rjmp	.+200    	; 0x60f8 <APP_Autonomous_Car_voidApp+0x658>
	else if (__tmp > 65535)
    6030:	fe 01       	movw	r30, r28
    6032:	eb 57       	subi	r30, 0x7B	; 123
    6034:	ff 4f       	sbci	r31, 0xFF	; 255
    6036:	60 81       	ld	r22, Z
    6038:	71 81       	ldd	r23, Z+1	; 0x01
    603a:	82 81       	ldd	r24, Z+2	; 0x02
    603c:	93 81       	ldd	r25, Z+3	; 0x03
    603e:	20 e0       	ldi	r18, 0x00	; 0
    6040:	3f ef       	ldi	r19, 0xFF	; 255
    6042:	4f e7       	ldi	r20, 0x7F	; 127
    6044:	57 e4       	ldi	r21, 0x47	; 71
    6046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    604a:	18 16       	cp	r1, r24
    604c:	0c f0       	brlt	.+2      	; 0x6050 <APP_Autonomous_Car_voidApp+0x5b0>
    604e:	43 c0       	rjmp	.+134    	; 0x60d6 <APP_Autonomous_Car_voidApp+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6050:	fe 01       	movw	r30, r28
    6052:	e7 57       	subi	r30, 0x77	; 119
    6054:	ff 4f       	sbci	r31, 0xFF	; 255
    6056:	60 81       	ld	r22, Z
    6058:	71 81       	ldd	r23, Z+1	; 0x01
    605a:	82 81       	ldd	r24, Z+2	; 0x02
    605c:	93 81       	ldd	r25, Z+3	; 0x03
    605e:	20 e0       	ldi	r18, 0x00	; 0
    6060:	30 e0       	ldi	r19, 0x00	; 0
    6062:	40 e2       	ldi	r20, 0x20	; 32
    6064:	51 e4       	ldi	r21, 0x41	; 65
    6066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    606a:	dc 01       	movw	r26, r24
    606c:	cb 01       	movw	r24, r22
    606e:	8e 01       	movw	r16, r28
    6070:	0d 57       	subi	r16, 0x7D	; 125
    6072:	1f 4f       	sbci	r17, 0xFF	; 255
    6074:	bc 01       	movw	r22, r24
    6076:	cd 01       	movw	r24, r26
    6078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    607c:	dc 01       	movw	r26, r24
    607e:	cb 01       	movw	r24, r22
    6080:	f8 01       	movw	r30, r16
    6082:	91 83       	std	Z+1, r25	; 0x01
    6084:	80 83       	st	Z, r24
    6086:	1f c0       	rjmp	.+62     	; 0x60c6 <APP_Autonomous_Car_voidApp+0x626>
    6088:	fe 01       	movw	r30, r28
    608a:	ef 57       	subi	r30, 0x7F	; 127
    608c:	ff 4f       	sbci	r31, 0xFF	; 255
    608e:	80 e9       	ldi	r24, 0x90	; 144
    6090:	91 e0       	ldi	r25, 0x01	; 1
    6092:	91 83       	std	Z+1, r25	; 0x01
    6094:	80 83       	st	Z, r24
    6096:	fe 01       	movw	r30, r28
    6098:	ef 57       	subi	r30, 0x7F	; 127
    609a:	ff 4f       	sbci	r31, 0xFF	; 255
    609c:	80 81       	ld	r24, Z
    609e:	91 81       	ldd	r25, Z+1	; 0x01
    60a0:	01 97       	sbiw	r24, 0x01	; 1
    60a2:	f1 f7       	brne	.-4      	; 0x60a0 <APP_Autonomous_Car_voidApp+0x600>
    60a4:	fe 01       	movw	r30, r28
    60a6:	ef 57       	subi	r30, 0x7F	; 127
    60a8:	ff 4f       	sbci	r31, 0xFF	; 255
    60aa:	91 83       	std	Z+1, r25	; 0x01
    60ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60ae:	de 01       	movw	r26, r28
    60b0:	ad 57       	subi	r26, 0x7D	; 125
    60b2:	bf 4f       	sbci	r27, 0xFF	; 255
    60b4:	fe 01       	movw	r30, r28
    60b6:	ed 57       	subi	r30, 0x7D	; 125
    60b8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ba:	80 81       	ld	r24, Z
    60bc:	91 81       	ldd	r25, Z+1	; 0x01
    60be:	01 97       	sbiw	r24, 0x01	; 1
    60c0:	11 96       	adiw	r26, 0x01	; 1
    60c2:	9c 93       	st	X, r25
    60c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60c6:	fe 01       	movw	r30, r28
    60c8:	ed 57       	subi	r30, 0x7D	; 125
    60ca:	ff 4f       	sbci	r31, 0xFF	; 255
    60cc:	80 81       	ld	r24, Z
    60ce:	91 81       	ldd	r25, Z+1	; 0x01
    60d0:	00 97       	sbiw	r24, 0x00	; 0
    60d2:	d1 f6       	brne	.-76     	; 0x6088 <APP_Autonomous_Car_voidApp+0x5e8>
    60d4:	27 c0       	rjmp	.+78     	; 0x6124 <APP_Autonomous_Car_voidApp+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60d6:	8e 01       	movw	r16, r28
    60d8:	0d 57       	subi	r16, 0x7D	; 125
    60da:	1f 4f       	sbci	r17, 0xFF	; 255
    60dc:	fe 01       	movw	r30, r28
    60de:	eb 57       	subi	r30, 0x7B	; 123
    60e0:	ff 4f       	sbci	r31, 0xFF	; 255
    60e2:	60 81       	ld	r22, Z
    60e4:	71 81       	ldd	r23, Z+1	; 0x01
    60e6:	82 81       	ldd	r24, Z+2	; 0x02
    60e8:	93 81       	ldd	r25, Z+3	; 0x03
    60ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ee:	dc 01       	movw	r26, r24
    60f0:	cb 01       	movw	r24, r22
    60f2:	f8 01       	movw	r30, r16
    60f4:	91 83       	std	Z+1, r25	; 0x01
    60f6:	80 83       	st	Z, r24
    60f8:	de 01       	movw	r26, r28
    60fa:	a1 58       	subi	r26, 0x81	; 129
    60fc:	bf 4f       	sbci	r27, 0xFF	; 255
    60fe:	fe 01       	movw	r30, r28
    6100:	ed 57       	subi	r30, 0x7D	; 125
    6102:	ff 4f       	sbci	r31, 0xFF	; 255
    6104:	80 81       	ld	r24, Z
    6106:	91 81       	ldd	r25, Z+1	; 0x01
    6108:	8d 93       	st	X+, r24
    610a:	9c 93       	st	X, r25
    610c:	fe 01       	movw	r30, r28
    610e:	e1 58       	subi	r30, 0x81	; 129
    6110:	ff 4f       	sbci	r31, 0xFF	; 255
    6112:	80 81       	ld	r24, Z
    6114:	91 81       	ldd	r25, Z+1	; 0x01
    6116:	01 97       	sbiw	r24, 0x01	; 1
    6118:	f1 f7       	brne	.-4      	; 0x6116 <APP_Autonomous_Car_voidApp+0x676>
    611a:	fe 01       	movw	r30, r28
    611c:	e1 58       	subi	r30, 0x81	; 129
    611e:	ff 4f       	sbci	r31, 0xFF	; 255
    6120:	91 83       	std	Z+1, r25	; 0x01
    6122:	80 83       	st	Z, r24
			_delay_ms(20);
			HAL_LCD_u8SendString("cm");
    6124:	8f eb       	ldi	r24, 0xBF	; 191
    6126:	90 e0       	ldi	r25, 0x00	; 0
    6128:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
			HAL_void_H_BridgeFront(MAX_SPEED);
    612c:	83 e6       	ldi	r24, 0x63	; 99
    612e:	0e 94 f7 27 	call	0x4fee	; 0x4fee <HAL_void_H_BridgeFront>
			HAL_LED_u8LedMode(PortA, Pin1, LED_OFF);
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	61 e0       	ldi	r22, 0x01	; 1
    6136:	40 e0       	ldi	r20, 0x00	; 0
    6138:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
    613c:	d6 cc       	rjmp	.-1620   	; 0x5aea <APP_Autonomous_Car_voidApp+0x4a>
		} else if (LOC_f32Distance <= DISTANCE_30) {
    613e:	fe 01       	movw	r30, r28
    6140:	e2 54       	subi	r30, 0x42	; 66
    6142:	ff 4f       	sbci	r31, 0xFF	; 255
    6144:	80 81       	ld	r24, Z
    6146:	91 81       	ldd	r25, Z+1	; 0x01
    6148:	a2 81       	ldd	r26, Z+2	; 0x02
    614a:	b3 81       	ldd	r27, Z+3	; 0x03
    614c:	bc 01       	movw	r22, r24
    614e:	cd 01       	movw	r24, r26
    6150:	20 e0       	ldi	r18, 0x00	; 0
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	40 ef       	ldi	r20, 0xF0	; 240
    6156:	51 e4       	ldi	r21, 0x41	; 65
    6158:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    615c:	18 16       	cp	r1, r24
    615e:	0c f4       	brge	.+2      	; 0x6162 <APP_Autonomous_Car_voidApp+0x6c2>
    6160:	c4 cc       	rjmp	.-1656   	; 0x5aea <APP_Autonomous_Car_voidApp+0x4a>
			if (LOC_f32Distance <= DISTANCE_10) {
    6162:	fe 01       	movw	r30, r28
    6164:	e2 54       	subi	r30, 0x42	; 66
    6166:	ff 4f       	sbci	r31, 0xFF	; 255
    6168:	80 81       	ld	r24, Z
    616a:	91 81       	ldd	r25, Z+1	; 0x01
    616c:	a2 81       	ldd	r26, Z+2	; 0x02
    616e:	b3 81       	ldd	r27, Z+3	; 0x03
    6170:	bc 01       	movw	r22, r24
    6172:	cd 01       	movw	r24, r26
    6174:	20 e0       	ldi	r18, 0x00	; 0
    6176:	30 e0       	ldi	r19, 0x00	; 0
    6178:	40 e2       	ldi	r20, 0x20	; 32
    617a:	51 e4       	ldi	r21, 0x41	; 65
    617c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    6180:	18 16       	cp	r1, r24
    6182:	0c f4       	brge	.+2      	; 0x6186 <APP_Autonomous_Car_voidApp+0x6e6>
    6184:	bc c0       	rjmp	.+376    	; 0x62fe <APP_Autonomous_Car_voidApp+0x85e>
//				HAL_Buzzer_u8BuzzerMode(PortA, Pin3, Pin_High);
				HAL_LCD_u8Clear();
    6186:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Moving Back...");
    618a:	82 ec       	ldi	r24, 0xC2	; 194
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
				HAL_void_H_BridgeBack(MAX_SPEED);
    6192:	83 e6       	ldi	r24, 0x63	; 99
    6194:	0e 94 27 28 	call	0x504e	; 0x504e <HAL_void_H_BridgeBack>
    6198:	fe 01       	movw	r30, r28
    619a:	e5 58       	subi	r30, 0x85	; 133
    619c:	ff 4f       	sbci	r31, 0xFF	; 255
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	90 e0       	ldi	r25, 0x00	; 0
    61a2:	aa e7       	ldi	r26, 0x7A	; 122
    61a4:	b4 e4       	ldi	r27, 0x44	; 68
    61a6:	80 83       	st	Z, r24
    61a8:	91 83       	std	Z+1, r25	; 0x01
    61aa:	a2 83       	std	Z+2, r26	; 0x02
    61ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61ae:	8e 01       	movw	r16, r28
    61b0:	09 58       	subi	r16, 0x89	; 137
    61b2:	1f 4f       	sbci	r17, 0xFF	; 255
    61b4:	fe 01       	movw	r30, r28
    61b6:	e5 58       	subi	r30, 0x85	; 133
    61b8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ba:	60 81       	ld	r22, Z
    61bc:	71 81       	ldd	r23, Z+1	; 0x01
    61be:	82 81       	ldd	r24, Z+2	; 0x02
    61c0:	93 81       	ldd	r25, Z+3	; 0x03
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	4a e7       	ldi	r20, 0x7A	; 122
    61c8:	55 e4       	ldi	r21, 0x45	; 69
    61ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61ce:	dc 01       	movw	r26, r24
    61d0:	cb 01       	movw	r24, r22
    61d2:	f8 01       	movw	r30, r16
    61d4:	80 83       	st	Z, r24
    61d6:	91 83       	std	Z+1, r25	; 0x01
    61d8:	a2 83       	std	Z+2, r26	; 0x02
    61da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    61dc:	fe 01       	movw	r30, r28
    61de:	e9 58       	subi	r30, 0x89	; 137
    61e0:	ff 4f       	sbci	r31, 0xFF	; 255
    61e2:	60 81       	ld	r22, Z
    61e4:	71 81       	ldd	r23, Z+1	; 0x01
    61e6:	82 81       	ldd	r24, Z+2	; 0x02
    61e8:	93 81       	ldd	r25, Z+3	; 0x03
    61ea:	20 e0       	ldi	r18, 0x00	; 0
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	40 e8       	ldi	r20, 0x80	; 128
    61f0:	5f e3       	ldi	r21, 0x3F	; 63
    61f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61f6:	88 23       	and	r24, r24
    61f8:	44 f4       	brge	.+16     	; 0x620a <APP_Autonomous_Car_voidApp+0x76a>
		__ticks = 1;
    61fa:	fe 01       	movw	r30, r28
    61fc:	eb 58       	subi	r30, 0x8B	; 139
    61fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6200:	81 e0       	ldi	r24, 0x01	; 1
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	91 83       	std	Z+1, r25	; 0x01
    6206:	80 83       	st	Z, r24
    6208:	64 c0       	rjmp	.+200    	; 0x62d2 <APP_Autonomous_Car_voidApp+0x832>
	else if (__tmp > 65535)
    620a:	fe 01       	movw	r30, r28
    620c:	e9 58       	subi	r30, 0x89	; 137
    620e:	ff 4f       	sbci	r31, 0xFF	; 255
    6210:	60 81       	ld	r22, Z
    6212:	71 81       	ldd	r23, Z+1	; 0x01
    6214:	82 81       	ldd	r24, Z+2	; 0x02
    6216:	93 81       	ldd	r25, Z+3	; 0x03
    6218:	20 e0       	ldi	r18, 0x00	; 0
    621a:	3f ef       	ldi	r19, 0xFF	; 255
    621c:	4f e7       	ldi	r20, 0x7F	; 127
    621e:	57 e4       	ldi	r21, 0x47	; 71
    6220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6224:	18 16       	cp	r1, r24
    6226:	0c f0       	brlt	.+2      	; 0x622a <APP_Autonomous_Car_voidApp+0x78a>
    6228:	43 c0       	rjmp	.+134    	; 0x62b0 <APP_Autonomous_Car_voidApp+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    622a:	fe 01       	movw	r30, r28
    622c:	e5 58       	subi	r30, 0x85	; 133
    622e:	ff 4f       	sbci	r31, 0xFF	; 255
    6230:	60 81       	ld	r22, Z
    6232:	71 81       	ldd	r23, Z+1	; 0x01
    6234:	82 81       	ldd	r24, Z+2	; 0x02
    6236:	93 81       	ldd	r25, Z+3	; 0x03
    6238:	20 e0       	ldi	r18, 0x00	; 0
    623a:	30 e0       	ldi	r19, 0x00	; 0
    623c:	40 e2       	ldi	r20, 0x20	; 32
    623e:	51 e4       	ldi	r21, 0x41	; 65
    6240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6244:	dc 01       	movw	r26, r24
    6246:	cb 01       	movw	r24, r22
    6248:	8e 01       	movw	r16, r28
    624a:	0b 58       	subi	r16, 0x8B	; 139
    624c:	1f 4f       	sbci	r17, 0xFF	; 255
    624e:	bc 01       	movw	r22, r24
    6250:	cd 01       	movw	r24, r26
    6252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6256:	dc 01       	movw	r26, r24
    6258:	cb 01       	movw	r24, r22
    625a:	f8 01       	movw	r30, r16
    625c:	91 83       	std	Z+1, r25	; 0x01
    625e:	80 83       	st	Z, r24
    6260:	1f c0       	rjmp	.+62     	; 0x62a0 <APP_Autonomous_Car_voidApp+0x800>
    6262:	fe 01       	movw	r30, r28
    6264:	ed 58       	subi	r30, 0x8D	; 141
    6266:	ff 4f       	sbci	r31, 0xFF	; 255
    6268:	80 e9       	ldi	r24, 0x90	; 144
    626a:	91 e0       	ldi	r25, 0x01	; 1
    626c:	91 83       	std	Z+1, r25	; 0x01
    626e:	80 83       	st	Z, r24
    6270:	fe 01       	movw	r30, r28
    6272:	ed 58       	subi	r30, 0x8D	; 141
    6274:	ff 4f       	sbci	r31, 0xFF	; 255
    6276:	80 81       	ld	r24, Z
    6278:	91 81       	ldd	r25, Z+1	; 0x01
    627a:	01 97       	sbiw	r24, 0x01	; 1
    627c:	f1 f7       	brne	.-4      	; 0x627a <APP_Autonomous_Car_voidApp+0x7da>
    627e:	fe 01       	movw	r30, r28
    6280:	ed 58       	subi	r30, 0x8D	; 141
    6282:	ff 4f       	sbci	r31, 0xFF	; 255
    6284:	91 83       	std	Z+1, r25	; 0x01
    6286:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6288:	de 01       	movw	r26, r28
    628a:	ab 58       	subi	r26, 0x8B	; 139
    628c:	bf 4f       	sbci	r27, 0xFF	; 255
    628e:	fe 01       	movw	r30, r28
    6290:	eb 58       	subi	r30, 0x8B	; 139
    6292:	ff 4f       	sbci	r31, 0xFF	; 255
    6294:	80 81       	ld	r24, Z
    6296:	91 81       	ldd	r25, Z+1	; 0x01
    6298:	01 97       	sbiw	r24, 0x01	; 1
    629a:	11 96       	adiw	r26, 0x01	; 1
    629c:	9c 93       	st	X, r25
    629e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62a0:	fe 01       	movw	r30, r28
    62a2:	eb 58       	subi	r30, 0x8B	; 139
    62a4:	ff 4f       	sbci	r31, 0xFF	; 255
    62a6:	80 81       	ld	r24, Z
    62a8:	91 81       	ldd	r25, Z+1	; 0x01
    62aa:	00 97       	sbiw	r24, 0x00	; 0
    62ac:	d1 f6       	brne	.-76     	; 0x6262 <APP_Autonomous_Car_voidApp+0x7c2>
    62ae:	27 c0       	rjmp	.+78     	; 0x62fe <APP_Autonomous_Car_voidApp+0x85e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62b0:	8e 01       	movw	r16, r28
    62b2:	0b 58       	subi	r16, 0x8B	; 139
    62b4:	1f 4f       	sbci	r17, 0xFF	; 255
    62b6:	fe 01       	movw	r30, r28
    62b8:	e9 58       	subi	r30, 0x89	; 137
    62ba:	ff 4f       	sbci	r31, 0xFF	; 255
    62bc:	60 81       	ld	r22, Z
    62be:	71 81       	ldd	r23, Z+1	; 0x01
    62c0:	82 81       	ldd	r24, Z+2	; 0x02
    62c2:	93 81       	ldd	r25, Z+3	; 0x03
    62c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62c8:	dc 01       	movw	r26, r24
    62ca:	cb 01       	movw	r24, r22
    62cc:	f8 01       	movw	r30, r16
    62ce:	91 83       	std	Z+1, r25	; 0x01
    62d0:	80 83       	st	Z, r24
    62d2:	de 01       	movw	r26, r28
    62d4:	af 58       	subi	r26, 0x8F	; 143
    62d6:	bf 4f       	sbci	r27, 0xFF	; 255
    62d8:	fe 01       	movw	r30, r28
    62da:	eb 58       	subi	r30, 0x8B	; 139
    62dc:	ff 4f       	sbci	r31, 0xFF	; 255
    62de:	80 81       	ld	r24, Z
    62e0:	91 81       	ldd	r25, Z+1	; 0x01
    62e2:	8d 93       	st	X+, r24
    62e4:	9c 93       	st	X, r25
    62e6:	fe 01       	movw	r30, r28
    62e8:	ef 58       	subi	r30, 0x8F	; 143
    62ea:	ff 4f       	sbci	r31, 0xFF	; 255
    62ec:	80 81       	ld	r24, Z
    62ee:	91 81       	ldd	r25, Z+1	; 0x01
    62f0:	01 97       	sbiw	r24, 0x01	; 1
    62f2:	f1 f7       	brne	.-4      	; 0x62f0 <APP_Autonomous_Car_voidApp+0x850>
    62f4:	fe 01       	movw	r30, r28
    62f6:	ef 58       	subi	r30, 0x8F	; 143
    62f8:	ff 4f       	sbci	r31, 0xFF	; 255
    62fa:	91 83       	std	Z+1, r25	; 0x01
    62fc:	80 83       	st	Z, r24
				_delay_ms(1000);
//				HAL_Buzzer_u8BuzzerMode(PortA, Pin3, Pin_Low);
			}
			HAL_void_H_BridgeStop(NUM0);
    62fe:	80 e0       	ldi	r24, 0x00	; 0
    6300:	0e 94 73 28 	call	0x50e6	; 0x50e6 <HAL_void_H_BridgeStop>
			HAL_LED_u8LedMode(PortA, Pin1, LED_ON);
    6304:	80 e0       	ldi	r24, 0x00	; 0
    6306:	61 e0       	ldi	r22, 0x01	; 1
    6308:	41 e0       	ldi	r20, 0x01	; 1
    630a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <HAL_LED_u8LedMode>
			for (int i = START_ANGLE; i >= MAX_CCW_ANGLE; i -= NUM_2) {
    630e:	fe 01       	movw	r30, r28
    6310:	e5 54       	subi	r30, 0x45	; 69
    6312:	ff 4f       	sbci	r31, 0xFF	; 255
    6314:	8a e5       	ldi	r24, 0x5A	; 90
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	91 83       	std	Z+1, r25	; 0x01
    631a:	80 83       	st	Z, r24
    631c:	35 c4       	rjmp	.+2154   	; 0x6b88 <APP_Autonomous_Car_voidApp+0x10e8>
				HAL_SM_voidSMSetAngle(i);
    631e:	fe 01       	movw	r30, r28
    6320:	e5 54       	subi	r30, 0x45	; 69
    6322:	ff 4f       	sbci	r31, 0xFF	; 255
    6324:	80 81       	ld	r24, Z
    6326:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <HAL_SM_voidSMSetAngle>
				if (i == MAX_CCW_ANGLE) {
    632a:	fe 01       	movw	r30, r28
    632c:	e5 54       	subi	r30, 0x45	; 69
    632e:	ff 4f       	sbci	r31, 0xFF	; 255
    6330:	80 81       	ld	r24, Z
    6332:	91 81       	ldd	r25, Z+1	; 0x01
    6334:	00 97       	sbiw	r24, 0x00	; 0
    6336:	09 f0       	breq	.+2      	; 0x633a <APP_Autonomous_Car_voidApp+0x89a>
    6338:	1b c4       	rjmp	.+2102   	; 0x6b70 <APP_Autonomous_Car_voidApp+0x10d0>
    633a:	fe 01       	movw	r30, r28
    633c:	e3 59       	subi	r30, 0x93	; 147
    633e:	ff 4f       	sbci	r31, 0xFF	; 255
    6340:	80 e0       	ldi	r24, 0x00	; 0
    6342:	90 e0       	ldi	r25, 0x00	; 0
    6344:	a8 e4       	ldi	r26, 0x48	; 72
    6346:	b2 e4       	ldi	r27, 0x42	; 66
    6348:	80 83       	st	Z, r24
    634a:	91 83       	std	Z+1, r25	; 0x01
    634c:	a2 83       	std	Z+2, r26	; 0x02
    634e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6350:	8e 01       	movw	r16, r28
    6352:	07 59       	subi	r16, 0x97	; 151
    6354:	1f 4f       	sbci	r17, 0xFF	; 255
    6356:	fe 01       	movw	r30, r28
    6358:	e3 59       	subi	r30, 0x93	; 147
    635a:	ff 4f       	sbci	r31, 0xFF	; 255
    635c:	60 81       	ld	r22, Z
    635e:	71 81       	ldd	r23, Z+1	; 0x01
    6360:	82 81       	ldd	r24, Z+2	; 0x02
    6362:	93 81       	ldd	r25, Z+3	; 0x03
    6364:	20 e0       	ldi	r18, 0x00	; 0
    6366:	30 e0       	ldi	r19, 0x00	; 0
    6368:	4a e7       	ldi	r20, 0x7A	; 122
    636a:	55 e4       	ldi	r21, 0x45	; 69
    636c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6370:	dc 01       	movw	r26, r24
    6372:	cb 01       	movw	r24, r22
    6374:	f8 01       	movw	r30, r16
    6376:	80 83       	st	Z, r24
    6378:	91 83       	std	Z+1, r25	; 0x01
    637a:	a2 83       	std	Z+2, r26	; 0x02
    637c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    637e:	fe 01       	movw	r30, r28
    6380:	e7 59       	subi	r30, 0x97	; 151
    6382:	ff 4f       	sbci	r31, 0xFF	; 255
    6384:	60 81       	ld	r22, Z
    6386:	71 81       	ldd	r23, Z+1	; 0x01
    6388:	82 81       	ldd	r24, Z+2	; 0x02
    638a:	93 81       	ldd	r25, Z+3	; 0x03
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	40 e8       	ldi	r20, 0x80	; 128
    6392:	5f e3       	ldi	r21, 0x3F	; 63
    6394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6398:	88 23       	and	r24, r24
    639a:	44 f4       	brge	.+16     	; 0x63ac <APP_Autonomous_Car_voidApp+0x90c>
		__ticks = 1;
    639c:	fe 01       	movw	r30, r28
    639e:	e9 59       	subi	r30, 0x99	; 153
    63a0:	ff 4f       	sbci	r31, 0xFF	; 255
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	91 83       	std	Z+1, r25	; 0x01
    63a8:	80 83       	st	Z, r24
    63aa:	64 c0       	rjmp	.+200    	; 0x6474 <APP_Autonomous_Car_voidApp+0x9d4>
	else if (__tmp > 65535)
    63ac:	fe 01       	movw	r30, r28
    63ae:	e7 59       	subi	r30, 0x97	; 151
    63b0:	ff 4f       	sbci	r31, 0xFF	; 255
    63b2:	60 81       	ld	r22, Z
    63b4:	71 81       	ldd	r23, Z+1	; 0x01
    63b6:	82 81       	ldd	r24, Z+2	; 0x02
    63b8:	93 81       	ldd	r25, Z+3	; 0x03
    63ba:	20 e0       	ldi	r18, 0x00	; 0
    63bc:	3f ef       	ldi	r19, 0xFF	; 255
    63be:	4f e7       	ldi	r20, 0x7F	; 127
    63c0:	57 e4       	ldi	r21, 0x47	; 71
    63c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    63c6:	18 16       	cp	r1, r24
    63c8:	0c f0       	brlt	.+2      	; 0x63cc <APP_Autonomous_Car_voidApp+0x92c>
    63ca:	43 c0       	rjmp	.+134    	; 0x6452 <APP_Autonomous_Car_voidApp+0x9b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63cc:	fe 01       	movw	r30, r28
    63ce:	e3 59       	subi	r30, 0x93	; 147
    63d0:	ff 4f       	sbci	r31, 0xFF	; 255
    63d2:	60 81       	ld	r22, Z
    63d4:	71 81       	ldd	r23, Z+1	; 0x01
    63d6:	82 81       	ldd	r24, Z+2	; 0x02
    63d8:	93 81       	ldd	r25, Z+3	; 0x03
    63da:	20 e0       	ldi	r18, 0x00	; 0
    63dc:	30 e0       	ldi	r19, 0x00	; 0
    63de:	40 e2       	ldi	r20, 0x20	; 32
    63e0:	51 e4       	ldi	r21, 0x41	; 65
    63e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63e6:	dc 01       	movw	r26, r24
    63e8:	cb 01       	movw	r24, r22
    63ea:	8e 01       	movw	r16, r28
    63ec:	09 59       	subi	r16, 0x99	; 153
    63ee:	1f 4f       	sbci	r17, 0xFF	; 255
    63f0:	bc 01       	movw	r22, r24
    63f2:	cd 01       	movw	r24, r26
    63f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63f8:	dc 01       	movw	r26, r24
    63fa:	cb 01       	movw	r24, r22
    63fc:	f8 01       	movw	r30, r16
    63fe:	91 83       	std	Z+1, r25	; 0x01
    6400:	80 83       	st	Z, r24
    6402:	1f c0       	rjmp	.+62     	; 0x6442 <APP_Autonomous_Car_voidApp+0x9a2>
    6404:	fe 01       	movw	r30, r28
    6406:	eb 59       	subi	r30, 0x9B	; 155
    6408:	ff 4f       	sbci	r31, 0xFF	; 255
    640a:	80 e9       	ldi	r24, 0x90	; 144
    640c:	91 e0       	ldi	r25, 0x01	; 1
    640e:	91 83       	std	Z+1, r25	; 0x01
    6410:	80 83       	st	Z, r24
    6412:	fe 01       	movw	r30, r28
    6414:	eb 59       	subi	r30, 0x9B	; 155
    6416:	ff 4f       	sbci	r31, 0xFF	; 255
    6418:	80 81       	ld	r24, Z
    641a:	91 81       	ldd	r25, Z+1	; 0x01
    641c:	01 97       	sbiw	r24, 0x01	; 1
    641e:	f1 f7       	brne	.-4      	; 0x641c <APP_Autonomous_Car_voidApp+0x97c>
    6420:	fe 01       	movw	r30, r28
    6422:	eb 59       	subi	r30, 0x9B	; 155
    6424:	ff 4f       	sbci	r31, 0xFF	; 255
    6426:	91 83       	std	Z+1, r25	; 0x01
    6428:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    642a:	de 01       	movw	r26, r28
    642c:	a9 59       	subi	r26, 0x99	; 153
    642e:	bf 4f       	sbci	r27, 0xFF	; 255
    6430:	fe 01       	movw	r30, r28
    6432:	e9 59       	subi	r30, 0x99	; 153
    6434:	ff 4f       	sbci	r31, 0xFF	; 255
    6436:	80 81       	ld	r24, Z
    6438:	91 81       	ldd	r25, Z+1	; 0x01
    643a:	01 97       	sbiw	r24, 0x01	; 1
    643c:	11 96       	adiw	r26, 0x01	; 1
    643e:	9c 93       	st	X, r25
    6440:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6442:	fe 01       	movw	r30, r28
    6444:	e9 59       	subi	r30, 0x99	; 153
    6446:	ff 4f       	sbci	r31, 0xFF	; 255
    6448:	80 81       	ld	r24, Z
    644a:	91 81       	ldd	r25, Z+1	; 0x01
    644c:	00 97       	sbiw	r24, 0x00	; 0
    644e:	d1 f6       	brne	.-76     	; 0x6404 <APP_Autonomous_Car_voidApp+0x964>
    6450:	27 c0       	rjmp	.+78     	; 0x64a0 <APP_Autonomous_Car_voidApp+0xa00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6452:	8e 01       	movw	r16, r28
    6454:	09 59       	subi	r16, 0x99	; 153
    6456:	1f 4f       	sbci	r17, 0xFF	; 255
    6458:	fe 01       	movw	r30, r28
    645a:	e7 59       	subi	r30, 0x97	; 151
    645c:	ff 4f       	sbci	r31, 0xFF	; 255
    645e:	60 81       	ld	r22, Z
    6460:	71 81       	ldd	r23, Z+1	; 0x01
    6462:	82 81       	ldd	r24, Z+2	; 0x02
    6464:	93 81       	ldd	r25, Z+3	; 0x03
    6466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    646a:	dc 01       	movw	r26, r24
    646c:	cb 01       	movw	r24, r22
    646e:	f8 01       	movw	r30, r16
    6470:	91 83       	std	Z+1, r25	; 0x01
    6472:	80 83       	st	Z, r24
    6474:	de 01       	movw	r26, r28
    6476:	ad 59       	subi	r26, 0x9D	; 157
    6478:	bf 4f       	sbci	r27, 0xFF	; 255
    647a:	fe 01       	movw	r30, r28
    647c:	e9 59       	subi	r30, 0x99	; 153
    647e:	ff 4f       	sbci	r31, 0xFF	; 255
    6480:	80 81       	ld	r24, Z
    6482:	91 81       	ldd	r25, Z+1	; 0x01
    6484:	8d 93       	st	X+, r24
    6486:	9c 93       	st	X, r25
    6488:	fe 01       	movw	r30, r28
    648a:	ed 59       	subi	r30, 0x9D	; 157
    648c:	ff 4f       	sbci	r31, 0xFF	; 255
    648e:	80 81       	ld	r24, Z
    6490:	91 81       	ldd	r25, Z+1	; 0x01
    6492:	01 97       	sbiw	r24, 0x01	; 1
    6494:	f1 f7       	brne	.-4      	; 0x6492 <APP_Autonomous_Car_voidApp+0x9f2>
    6496:	fe 01       	movw	r30, r28
    6498:	ed 59       	subi	r30, 0x9D	; 157
    649a:	ff 4f       	sbci	r31, 0xFF	; 255
    649c:	91 83       	std	Z+1, r25	; 0x01
    649e:	80 83       	st	Z, r24
					_delay_ms(50);
					HAL_Ultrasonic_Sensor_voidCalcDistancse(&LOC_f32Distance);
    64a0:	ce 01       	movw	r24, r28
    64a2:	82 54       	subi	r24, 0x42	; 66
    64a4:	9f 4f       	sbci	r25, 0xFF	; 255
    64a6:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
    64aa:	fe 01       	movw	r30, r28
    64ac:	e1 5a       	subi	r30, 0xA1	; 161
    64ae:	ff 4f       	sbci	r31, 0xFF	; 255
    64b0:	80 e0       	ldi	r24, 0x00	; 0
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	a8 e4       	ldi	r26, 0x48	; 72
    64b6:	b2 e4       	ldi	r27, 0x42	; 66
    64b8:	80 83       	st	Z, r24
    64ba:	91 83       	std	Z+1, r25	; 0x01
    64bc:	a2 83       	std	Z+2, r26	; 0x02
    64be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64c0:	8e 01       	movw	r16, r28
    64c2:	05 5a       	subi	r16, 0xA5	; 165
    64c4:	1f 4f       	sbci	r17, 0xFF	; 255
    64c6:	fe 01       	movw	r30, r28
    64c8:	e1 5a       	subi	r30, 0xA1	; 161
    64ca:	ff 4f       	sbci	r31, 0xFF	; 255
    64cc:	60 81       	ld	r22, Z
    64ce:	71 81       	ldd	r23, Z+1	; 0x01
    64d0:	82 81       	ldd	r24, Z+2	; 0x02
    64d2:	93 81       	ldd	r25, Z+3	; 0x03
    64d4:	20 e0       	ldi	r18, 0x00	; 0
    64d6:	30 e0       	ldi	r19, 0x00	; 0
    64d8:	4a e7       	ldi	r20, 0x7A	; 122
    64da:	55 e4       	ldi	r21, 0x45	; 69
    64dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64e0:	dc 01       	movw	r26, r24
    64e2:	cb 01       	movw	r24, r22
    64e4:	f8 01       	movw	r30, r16
    64e6:	80 83       	st	Z, r24
    64e8:	91 83       	std	Z+1, r25	; 0x01
    64ea:	a2 83       	std	Z+2, r26	; 0x02
    64ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    64ee:	fe 01       	movw	r30, r28
    64f0:	e5 5a       	subi	r30, 0xA5	; 165
    64f2:	ff 4f       	sbci	r31, 0xFF	; 255
    64f4:	60 81       	ld	r22, Z
    64f6:	71 81       	ldd	r23, Z+1	; 0x01
    64f8:	82 81       	ldd	r24, Z+2	; 0x02
    64fa:	93 81       	ldd	r25, Z+3	; 0x03
    64fc:	20 e0       	ldi	r18, 0x00	; 0
    64fe:	30 e0       	ldi	r19, 0x00	; 0
    6500:	40 e8       	ldi	r20, 0x80	; 128
    6502:	5f e3       	ldi	r21, 0x3F	; 63
    6504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6508:	88 23       	and	r24, r24
    650a:	44 f4       	brge	.+16     	; 0x651c <APP_Autonomous_Car_voidApp+0xa7c>
		__ticks = 1;
    650c:	fe 01       	movw	r30, r28
    650e:	e7 5a       	subi	r30, 0xA7	; 167
    6510:	ff 4f       	sbci	r31, 0xFF	; 255
    6512:	81 e0       	ldi	r24, 0x01	; 1
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	91 83       	std	Z+1, r25	; 0x01
    6518:	80 83       	st	Z, r24
    651a:	64 c0       	rjmp	.+200    	; 0x65e4 <APP_Autonomous_Car_voidApp+0xb44>
	else if (__tmp > 65535)
    651c:	fe 01       	movw	r30, r28
    651e:	e5 5a       	subi	r30, 0xA5	; 165
    6520:	ff 4f       	sbci	r31, 0xFF	; 255
    6522:	60 81       	ld	r22, Z
    6524:	71 81       	ldd	r23, Z+1	; 0x01
    6526:	82 81       	ldd	r24, Z+2	; 0x02
    6528:	93 81       	ldd	r25, Z+3	; 0x03
    652a:	20 e0       	ldi	r18, 0x00	; 0
    652c:	3f ef       	ldi	r19, 0xFF	; 255
    652e:	4f e7       	ldi	r20, 0x7F	; 127
    6530:	57 e4       	ldi	r21, 0x47	; 71
    6532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6536:	18 16       	cp	r1, r24
    6538:	0c f0       	brlt	.+2      	; 0x653c <APP_Autonomous_Car_voidApp+0xa9c>
    653a:	43 c0       	rjmp	.+134    	; 0x65c2 <APP_Autonomous_Car_voidApp+0xb22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    653c:	fe 01       	movw	r30, r28
    653e:	e1 5a       	subi	r30, 0xA1	; 161
    6540:	ff 4f       	sbci	r31, 0xFF	; 255
    6542:	60 81       	ld	r22, Z
    6544:	71 81       	ldd	r23, Z+1	; 0x01
    6546:	82 81       	ldd	r24, Z+2	; 0x02
    6548:	93 81       	ldd	r25, Z+3	; 0x03
    654a:	20 e0       	ldi	r18, 0x00	; 0
    654c:	30 e0       	ldi	r19, 0x00	; 0
    654e:	40 e2       	ldi	r20, 0x20	; 32
    6550:	51 e4       	ldi	r21, 0x41	; 65
    6552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6556:	dc 01       	movw	r26, r24
    6558:	cb 01       	movw	r24, r22
    655a:	8e 01       	movw	r16, r28
    655c:	07 5a       	subi	r16, 0xA7	; 167
    655e:	1f 4f       	sbci	r17, 0xFF	; 255
    6560:	bc 01       	movw	r22, r24
    6562:	cd 01       	movw	r24, r26
    6564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6568:	dc 01       	movw	r26, r24
    656a:	cb 01       	movw	r24, r22
    656c:	f8 01       	movw	r30, r16
    656e:	91 83       	std	Z+1, r25	; 0x01
    6570:	80 83       	st	Z, r24
    6572:	1f c0       	rjmp	.+62     	; 0x65b2 <APP_Autonomous_Car_voidApp+0xb12>
    6574:	fe 01       	movw	r30, r28
    6576:	e9 5a       	subi	r30, 0xA9	; 169
    6578:	ff 4f       	sbci	r31, 0xFF	; 255
    657a:	80 e9       	ldi	r24, 0x90	; 144
    657c:	91 e0       	ldi	r25, 0x01	; 1
    657e:	91 83       	std	Z+1, r25	; 0x01
    6580:	80 83       	st	Z, r24
    6582:	fe 01       	movw	r30, r28
    6584:	e9 5a       	subi	r30, 0xA9	; 169
    6586:	ff 4f       	sbci	r31, 0xFF	; 255
    6588:	80 81       	ld	r24, Z
    658a:	91 81       	ldd	r25, Z+1	; 0x01
    658c:	01 97       	sbiw	r24, 0x01	; 1
    658e:	f1 f7       	brne	.-4      	; 0x658c <APP_Autonomous_Car_voidApp+0xaec>
    6590:	fe 01       	movw	r30, r28
    6592:	e9 5a       	subi	r30, 0xA9	; 169
    6594:	ff 4f       	sbci	r31, 0xFF	; 255
    6596:	91 83       	std	Z+1, r25	; 0x01
    6598:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    659a:	de 01       	movw	r26, r28
    659c:	a7 5a       	subi	r26, 0xA7	; 167
    659e:	bf 4f       	sbci	r27, 0xFF	; 255
    65a0:	fe 01       	movw	r30, r28
    65a2:	e7 5a       	subi	r30, 0xA7	; 167
    65a4:	ff 4f       	sbci	r31, 0xFF	; 255
    65a6:	80 81       	ld	r24, Z
    65a8:	91 81       	ldd	r25, Z+1	; 0x01
    65aa:	01 97       	sbiw	r24, 0x01	; 1
    65ac:	11 96       	adiw	r26, 0x01	; 1
    65ae:	9c 93       	st	X, r25
    65b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65b2:	fe 01       	movw	r30, r28
    65b4:	e7 5a       	subi	r30, 0xA7	; 167
    65b6:	ff 4f       	sbci	r31, 0xFF	; 255
    65b8:	80 81       	ld	r24, Z
    65ba:	91 81       	ldd	r25, Z+1	; 0x01
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	d1 f6       	brne	.-76     	; 0x6574 <APP_Autonomous_Car_voidApp+0xad4>
    65c0:	27 c0       	rjmp	.+78     	; 0x6610 <APP_Autonomous_Car_voidApp+0xb70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65c2:	8e 01       	movw	r16, r28
    65c4:	07 5a       	subi	r16, 0xA7	; 167
    65c6:	1f 4f       	sbci	r17, 0xFF	; 255
    65c8:	fe 01       	movw	r30, r28
    65ca:	e5 5a       	subi	r30, 0xA5	; 165
    65cc:	ff 4f       	sbci	r31, 0xFF	; 255
    65ce:	60 81       	ld	r22, Z
    65d0:	71 81       	ldd	r23, Z+1	; 0x01
    65d2:	82 81       	ldd	r24, Z+2	; 0x02
    65d4:	93 81       	ldd	r25, Z+3	; 0x03
    65d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65da:	dc 01       	movw	r26, r24
    65dc:	cb 01       	movw	r24, r22
    65de:	f8 01       	movw	r30, r16
    65e0:	91 83       	std	Z+1, r25	; 0x01
    65e2:	80 83       	st	Z, r24
    65e4:	de 01       	movw	r26, r28
    65e6:	ab 5a       	subi	r26, 0xAB	; 171
    65e8:	bf 4f       	sbci	r27, 0xFF	; 255
    65ea:	fe 01       	movw	r30, r28
    65ec:	e7 5a       	subi	r30, 0xA7	; 167
    65ee:	ff 4f       	sbci	r31, 0xFF	; 255
    65f0:	80 81       	ld	r24, Z
    65f2:	91 81       	ldd	r25, Z+1	; 0x01
    65f4:	8d 93       	st	X+, r24
    65f6:	9c 93       	st	X, r25
    65f8:	fe 01       	movw	r30, r28
    65fa:	eb 5a       	subi	r30, 0xAB	; 171
    65fc:	ff 4f       	sbci	r31, 0xFF	; 255
    65fe:	80 81       	ld	r24, Z
    6600:	91 81       	ldd	r25, Z+1	; 0x01
    6602:	01 97       	sbiw	r24, 0x01	; 1
    6604:	f1 f7       	brne	.-4      	; 0x6602 <APP_Autonomous_Car_voidApp+0xb62>
    6606:	fe 01       	movw	r30, r28
    6608:	eb 5a       	subi	r30, 0xAB	; 171
    660a:	ff 4f       	sbci	r31, 0xFF	; 255
    660c:	91 83       	std	Z+1, r25	; 0x01
    660e:	80 83       	st	Z, r24
					_delay_ms(50);
					Glob_u16DirRight = LOC_f32Distance;
    6610:	fe 01       	movw	r30, r28
    6612:	e2 54       	subi	r30, 0x42	; 66
    6614:	ff 4f       	sbci	r31, 0xFF	; 255
    6616:	80 81       	ld	r24, Z
    6618:	91 81       	ldd	r25, Z+1	; 0x01
    661a:	a2 81       	ldd	r26, Z+2	; 0x02
    661c:	b3 81       	ldd	r27, Z+3	; 0x03
    661e:	bc 01       	movw	r22, r24
    6620:	cd 01       	movw	r24, r26
    6622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6626:	dc 01       	movw	r26, r24
    6628:	cb 01       	movw	r24, r22
    662a:	90 93 33 02 	sts	0x0233, r25
    662e:	80 93 32 02 	sts	0x0232, r24
					HAL_LCD_u8Clear();
    6632:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
					HAL_LCD_u8SendString("Dir Right: ");
    6636:	81 ed       	ldi	r24, 0xD1	; 209
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
					HAL_LCD_u8SendNumber(Glob_u16DirRight);
    663e:	80 91 32 02 	lds	r24, 0x0232
    6642:	90 91 33 02 	lds	r25, 0x0233
    6646:	0e 94 ff 23 	call	0x47fe	; 0x47fe <HAL_LCD_u8SendNumber>
					HAL_LCD_u8SendString("cm");
    664a:	8f eb       	ldi	r24, 0xBF	; 191
    664c:	90 e0       	ldi	r25, 0x00	; 0
    664e:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    6652:	fe 01       	movw	r30, r28
    6654:	ef 5a       	subi	r30, 0xAF	; 175
    6656:	ff 4f       	sbci	r31, 0xFF	; 255
    6658:	80 e0       	ldi	r24, 0x00	; 0
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	a8 e4       	ldi	r26, 0x48	; 72
    665e:	b3 e4       	ldi	r27, 0x43	; 67
    6660:	80 83       	st	Z, r24
    6662:	91 83       	std	Z+1, r25	; 0x01
    6664:	a2 83       	std	Z+2, r26	; 0x02
    6666:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6668:	8e 01       	movw	r16, r28
    666a:	03 5b       	subi	r16, 0xB3	; 179
    666c:	1f 4f       	sbci	r17, 0xFF	; 255
    666e:	fe 01       	movw	r30, r28
    6670:	ef 5a       	subi	r30, 0xAF	; 175
    6672:	ff 4f       	sbci	r31, 0xFF	; 255
    6674:	60 81       	ld	r22, Z
    6676:	71 81       	ldd	r23, Z+1	; 0x01
    6678:	82 81       	ldd	r24, Z+2	; 0x02
    667a:	93 81       	ldd	r25, Z+3	; 0x03
    667c:	20 e0       	ldi	r18, 0x00	; 0
    667e:	30 e0       	ldi	r19, 0x00	; 0
    6680:	4a e7       	ldi	r20, 0x7A	; 122
    6682:	55 e4       	ldi	r21, 0x45	; 69
    6684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6688:	dc 01       	movw	r26, r24
    668a:	cb 01       	movw	r24, r22
    668c:	f8 01       	movw	r30, r16
    668e:	80 83       	st	Z, r24
    6690:	91 83       	std	Z+1, r25	; 0x01
    6692:	a2 83       	std	Z+2, r26	; 0x02
    6694:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6696:	fe 01       	movw	r30, r28
    6698:	e3 5b       	subi	r30, 0xB3	; 179
    669a:	ff 4f       	sbci	r31, 0xFF	; 255
    669c:	60 81       	ld	r22, Z
    669e:	71 81       	ldd	r23, Z+1	; 0x01
    66a0:	82 81       	ldd	r24, Z+2	; 0x02
    66a2:	93 81       	ldd	r25, Z+3	; 0x03
    66a4:	20 e0       	ldi	r18, 0x00	; 0
    66a6:	30 e0       	ldi	r19, 0x00	; 0
    66a8:	40 e8       	ldi	r20, 0x80	; 128
    66aa:	5f e3       	ldi	r21, 0x3F	; 63
    66ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66b0:	88 23       	and	r24, r24
    66b2:	44 f4       	brge	.+16     	; 0x66c4 <APP_Autonomous_Car_voidApp+0xc24>
		__ticks = 1;
    66b4:	fe 01       	movw	r30, r28
    66b6:	e5 5b       	subi	r30, 0xB5	; 181
    66b8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ba:	81 e0       	ldi	r24, 0x01	; 1
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	91 83       	std	Z+1, r25	; 0x01
    66c0:	80 83       	st	Z, r24
    66c2:	64 c0       	rjmp	.+200    	; 0x678c <APP_Autonomous_Car_voidApp+0xcec>
	else if (__tmp > 65535)
    66c4:	fe 01       	movw	r30, r28
    66c6:	e3 5b       	subi	r30, 0xB3	; 179
    66c8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ca:	60 81       	ld	r22, Z
    66cc:	71 81       	ldd	r23, Z+1	; 0x01
    66ce:	82 81       	ldd	r24, Z+2	; 0x02
    66d0:	93 81       	ldd	r25, Z+3	; 0x03
    66d2:	20 e0       	ldi	r18, 0x00	; 0
    66d4:	3f ef       	ldi	r19, 0xFF	; 255
    66d6:	4f e7       	ldi	r20, 0x7F	; 127
    66d8:	57 e4       	ldi	r21, 0x47	; 71
    66da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    66de:	18 16       	cp	r1, r24
    66e0:	0c f0       	brlt	.+2      	; 0x66e4 <APP_Autonomous_Car_voidApp+0xc44>
    66e2:	43 c0       	rjmp	.+134    	; 0x676a <APP_Autonomous_Car_voidApp+0xcca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66e4:	fe 01       	movw	r30, r28
    66e6:	ef 5a       	subi	r30, 0xAF	; 175
    66e8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ea:	60 81       	ld	r22, Z
    66ec:	71 81       	ldd	r23, Z+1	; 0x01
    66ee:	82 81       	ldd	r24, Z+2	; 0x02
    66f0:	93 81       	ldd	r25, Z+3	; 0x03
    66f2:	20 e0       	ldi	r18, 0x00	; 0
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	40 e2       	ldi	r20, 0x20	; 32
    66f8:	51 e4       	ldi	r21, 0x41	; 65
    66fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66fe:	dc 01       	movw	r26, r24
    6700:	cb 01       	movw	r24, r22
    6702:	8e 01       	movw	r16, r28
    6704:	05 5b       	subi	r16, 0xB5	; 181
    6706:	1f 4f       	sbci	r17, 0xFF	; 255
    6708:	bc 01       	movw	r22, r24
    670a:	cd 01       	movw	r24, r26
    670c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6710:	dc 01       	movw	r26, r24
    6712:	cb 01       	movw	r24, r22
    6714:	f8 01       	movw	r30, r16
    6716:	91 83       	std	Z+1, r25	; 0x01
    6718:	80 83       	st	Z, r24
    671a:	1f c0       	rjmp	.+62     	; 0x675a <APP_Autonomous_Car_voidApp+0xcba>
    671c:	fe 01       	movw	r30, r28
    671e:	e7 5b       	subi	r30, 0xB7	; 183
    6720:	ff 4f       	sbci	r31, 0xFF	; 255
    6722:	80 e9       	ldi	r24, 0x90	; 144
    6724:	91 e0       	ldi	r25, 0x01	; 1
    6726:	91 83       	std	Z+1, r25	; 0x01
    6728:	80 83       	st	Z, r24
    672a:	fe 01       	movw	r30, r28
    672c:	e7 5b       	subi	r30, 0xB7	; 183
    672e:	ff 4f       	sbci	r31, 0xFF	; 255
    6730:	80 81       	ld	r24, Z
    6732:	91 81       	ldd	r25, Z+1	; 0x01
    6734:	01 97       	sbiw	r24, 0x01	; 1
    6736:	f1 f7       	brne	.-4      	; 0x6734 <APP_Autonomous_Car_voidApp+0xc94>
    6738:	fe 01       	movw	r30, r28
    673a:	e7 5b       	subi	r30, 0xB7	; 183
    673c:	ff 4f       	sbci	r31, 0xFF	; 255
    673e:	91 83       	std	Z+1, r25	; 0x01
    6740:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6742:	de 01       	movw	r26, r28
    6744:	a5 5b       	subi	r26, 0xB5	; 181
    6746:	bf 4f       	sbci	r27, 0xFF	; 255
    6748:	fe 01       	movw	r30, r28
    674a:	e5 5b       	subi	r30, 0xB5	; 181
    674c:	ff 4f       	sbci	r31, 0xFF	; 255
    674e:	80 81       	ld	r24, Z
    6750:	91 81       	ldd	r25, Z+1	; 0x01
    6752:	01 97       	sbiw	r24, 0x01	; 1
    6754:	11 96       	adiw	r26, 0x01	; 1
    6756:	9c 93       	st	X, r25
    6758:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    675a:	fe 01       	movw	r30, r28
    675c:	e5 5b       	subi	r30, 0xB5	; 181
    675e:	ff 4f       	sbci	r31, 0xFF	; 255
    6760:	80 81       	ld	r24, Z
    6762:	91 81       	ldd	r25, Z+1	; 0x01
    6764:	00 97       	sbiw	r24, 0x00	; 0
    6766:	d1 f6       	brne	.-76     	; 0x671c <APP_Autonomous_Car_voidApp+0xc7c>
    6768:	28 c0       	rjmp	.+80     	; 0x67ba <APP_Autonomous_Car_voidApp+0xd1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    676a:	8e 01       	movw	r16, r28
    676c:	05 5b       	subi	r16, 0xB5	; 181
    676e:	1f 4f       	sbci	r17, 0xFF	; 255
    6770:	fe 01       	movw	r30, r28
    6772:	e3 5b       	subi	r30, 0xB3	; 179
    6774:	ff 4f       	sbci	r31, 0xFF	; 255
    6776:	60 81       	ld	r22, Z
    6778:	71 81       	ldd	r23, Z+1	; 0x01
    677a:	82 81       	ldd	r24, Z+2	; 0x02
    677c:	93 81       	ldd	r25, Z+3	; 0x03
    677e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6782:	dc 01       	movw	r26, r24
    6784:	cb 01       	movw	r24, r22
    6786:	f8 01       	movw	r30, r16
    6788:	91 83       	std	Z+1, r25	; 0x01
    678a:	80 83       	st	Z, r24
    678c:	de 01       	movw	r26, r28
    678e:	a9 5b       	subi	r26, 0xB9	; 185
    6790:	bf 4f       	sbci	r27, 0xFF	; 255
    6792:	fe 01       	movw	r30, r28
    6794:	e5 5b       	subi	r30, 0xB5	; 181
    6796:	ff 4f       	sbci	r31, 0xFF	; 255
    6798:	80 81       	ld	r24, Z
    679a:	91 81       	ldd	r25, Z+1	; 0x01
    679c:	11 96       	adiw	r26, 0x01	; 1
    679e:	9c 93       	st	X, r25
    67a0:	8e 93       	st	-X, r24
    67a2:	fe 01       	movw	r30, r28
    67a4:	e9 5b       	subi	r30, 0xB9	; 185
    67a6:	ff 4f       	sbci	r31, 0xFF	; 255
    67a8:	80 81       	ld	r24, Z
    67aa:	91 81       	ldd	r25, Z+1	; 0x01
    67ac:	01 97       	sbiw	r24, 0x01	; 1
    67ae:	f1 f7       	brne	.-4      	; 0x67ac <APP_Autonomous_Car_voidApp+0xd0c>
    67b0:	fe 01       	movw	r30, r28
    67b2:	e9 5b       	subi	r30, 0xB9	; 185
    67b4:	ff 4f       	sbci	r31, 0xFF	; 255
    67b6:	91 83       	std	Z+1, r25	; 0x01
    67b8:	80 83       	st	Z, r24
					_delay_ms(200);
					for (int j = MAX_CCW_ANGLE; j <= MAX_CW_ANGLE; j += NUM_2) {
    67ba:	fe 01       	movw	r30, r28
    67bc:	e7 54       	subi	r30, 0x47	; 71
    67be:	ff 4f       	sbci	r31, 0xFF	; 255
    67c0:	11 82       	std	Z+1, r1	; 0x01
    67c2:	10 82       	st	Z, r1
    67c4:	cc c1       	rjmp	.+920    	; 0x6b5e <APP_Autonomous_Car_voidApp+0x10be>
						HAL_SM_voidSMSetAngle(j);
    67c6:	fe 01       	movw	r30, r28
    67c8:	e7 54       	subi	r30, 0x47	; 71
    67ca:	ff 4f       	sbci	r31, 0xFF	; 255
    67cc:	80 81       	ld	r24, Z
    67ce:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <HAL_SM_voidSMSetAngle>
						if (j == MAX_CW_ANGLE) {
    67d2:	fe 01       	movw	r30, r28
    67d4:	e7 54       	subi	r30, 0x47	; 71
    67d6:	ff 4f       	sbci	r31, 0xFF	; 255
    67d8:	80 81       	ld	r24, Z
    67da:	91 81       	ldd	r25, Z+1	; 0x01
    67dc:	84 3b       	cpi	r24, 0xB4	; 180
    67de:	91 05       	cpc	r25, r1
    67e0:	09 f0       	breq	.+2      	; 0x67e4 <APP_Autonomous_Car_voidApp+0xd44>
    67e2:	b1 c1       	rjmp	.+866    	; 0x6b46 <APP_Autonomous_Car_voidApp+0x10a6>
    67e4:	fe 01       	movw	r30, r28
    67e6:	ed 5b       	subi	r30, 0xBD	; 189
    67e8:	ff 4f       	sbci	r31, 0xFF	; 255
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	a8 e4       	ldi	r26, 0x48	; 72
    67f0:	b2 e4       	ldi	r27, 0x42	; 66
    67f2:	80 83       	st	Z, r24
    67f4:	91 83       	std	Z+1, r25	; 0x01
    67f6:	a2 83       	std	Z+2, r26	; 0x02
    67f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67fa:	8e 01       	movw	r16, r28
    67fc:	01 5c       	subi	r16, 0xC1	; 193
    67fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6800:	fe 01       	movw	r30, r28
    6802:	ed 5b       	subi	r30, 0xBD	; 189
    6804:	ff 4f       	sbci	r31, 0xFF	; 255
    6806:	60 81       	ld	r22, Z
    6808:	71 81       	ldd	r23, Z+1	; 0x01
    680a:	82 81       	ldd	r24, Z+2	; 0x02
    680c:	93 81       	ldd	r25, Z+3	; 0x03
    680e:	20 e0       	ldi	r18, 0x00	; 0
    6810:	30 e0       	ldi	r19, 0x00	; 0
    6812:	4a e7       	ldi	r20, 0x7A	; 122
    6814:	55 e4       	ldi	r21, 0x45	; 69
    6816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    681a:	dc 01       	movw	r26, r24
    681c:	cb 01       	movw	r24, r22
    681e:	f8 01       	movw	r30, r16
    6820:	80 83       	st	Z, r24
    6822:	91 83       	std	Z+1, r25	; 0x01
    6824:	a2 83       	std	Z+2, r26	; 0x02
    6826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6828:	fe 01       	movw	r30, r28
    682a:	ff 96       	adiw	r30, 0x3f	; 63
    682c:	60 81       	ld	r22, Z
    682e:	71 81       	ldd	r23, Z+1	; 0x01
    6830:	82 81       	ldd	r24, Z+2	; 0x02
    6832:	93 81       	ldd	r25, Z+3	; 0x03
    6834:	20 e0       	ldi	r18, 0x00	; 0
    6836:	30 e0       	ldi	r19, 0x00	; 0
    6838:	40 e8       	ldi	r20, 0x80	; 128
    683a:	5f e3       	ldi	r21, 0x3F	; 63
    683c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6840:	88 23       	and	r24, r24
    6842:	2c f4       	brge	.+10     	; 0x684e <APP_Autonomous_Car_voidApp+0xdae>
		__ticks = 1;
    6844:	81 e0       	ldi	r24, 0x01	; 1
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	9e af       	std	Y+62, r25	; 0x3e
    684a:	8d af       	std	Y+61, r24	; 0x3d
    684c:	46 c0       	rjmp	.+140    	; 0x68da <APP_Autonomous_Car_voidApp+0xe3a>
	else if (__tmp > 65535)
    684e:	fe 01       	movw	r30, r28
    6850:	ff 96       	adiw	r30, 0x3f	; 63
    6852:	60 81       	ld	r22, Z
    6854:	71 81       	ldd	r23, Z+1	; 0x01
    6856:	82 81       	ldd	r24, Z+2	; 0x02
    6858:	93 81       	ldd	r25, Z+3	; 0x03
    685a:	20 e0       	ldi	r18, 0x00	; 0
    685c:	3f ef       	ldi	r19, 0xFF	; 255
    685e:	4f e7       	ldi	r20, 0x7F	; 127
    6860:	57 e4       	ldi	r21, 0x47	; 71
    6862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6866:	18 16       	cp	r1, r24
    6868:	64 f5       	brge	.+88     	; 0x68c2 <APP_Autonomous_Car_voidApp+0xe22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    686a:	fe 01       	movw	r30, r28
    686c:	ed 5b       	subi	r30, 0xBD	; 189
    686e:	ff 4f       	sbci	r31, 0xFF	; 255
    6870:	60 81       	ld	r22, Z
    6872:	71 81       	ldd	r23, Z+1	; 0x01
    6874:	82 81       	ldd	r24, Z+2	; 0x02
    6876:	93 81       	ldd	r25, Z+3	; 0x03
    6878:	20 e0       	ldi	r18, 0x00	; 0
    687a:	30 e0       	ldi	r19, 0x00	; 0
    687c:	40 e2       	ldi	r20, 0x20	; 32
    687e:	51 e4       	ldi	r21, 0x41	; 65
    6880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6884:	dc 01       	movw	r26, r24
    6886:	cb 01       	movw	r24, r22
    6888:	bc 01       	movw	r22, r24
    688a:	cd 01       	movw	r24, r26
    688c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6890:	dc 01       	movw	r26, r24
    6892:	cb 01       	movw	r24, r22
    6894:	9e af       	std	Y+62, r25	; 0x3e
    6896:	8d af       	std	Y+61, r24	; 0x3d
    6898:	0f c0       	rjmp	.+30     	; 0x68b8 <APP_Autonomous_Car_voidApp+0xe18>
    689a:	80 e9       	ldi	r24, 0x90	; 144
    689c:	91 e0       	ldi	r25, 0x01	; 1
    689e:	9c af       	std	Y+60, r25	; 0x3c
    68a0:	8b af       	std	Y+59, r24	; 0x3b
    68a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    68a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    68a6:	01 97       	sbiw	r24, 0x01	; 1
    68a8:	f1 f7       	brne	.-4      	; 0x68a6 <APP_Autonomous_Car_voidApp+0xe06>
    68aa:	9c af       	std	Y+60, r25	; 0x3c
    68ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    68b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    68b2:	01 97       	sbiw	r24, 0x01	; 1
    68b4:	9e af       	std	Y+62, r25	; 0x3e
    68b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    68ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    68bc:	00 97       	sbiw	r24, 0x00	; 0
    68be:	69 f7       	brne	.-38     	; 0x689a <APP_Autonomous_Car_voidApp+0xdfa>
    68c0:	16 c0       	rjmp	.+44     	; 0x68ee <APP_Autonomous_Car_voidApp+0xe4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68c2:	fe 01       	movw	r30, r28
    68c4:	ff 96       	adiw	r30, 0x3f	; 63
    68c6:	60 81       	ld	r22, Z
    68c8:	71 81       	ldd	r23, Z+1	; 0x01
    68ca:	82 81       	ldd	r24, Z+2	; 0x02
    68cc:	93 81       	ldd	r25, Z+3	; 0x03
    68ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68d2:	dc 01       	movw	r26, r24
    68d4:	cb 01       	movw	r24, r22
    68d6:	9e af       	std	Y+62, r25	; 0x3e
    68d8:	8d af       	std	Y+61, r24	; 0x3d
    68da:	8d ad       	ldd	r24, Y+61	; 0x3d
    68dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    68de:	9a af       	std	Y+58, r25	; 0x3a
    68e0:	89 af       	std	Y+57, r24	; 0x39
    68e2:	89 ad       	ldd	r24, Y+57	; 0x39
    68e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    68e6:	01 97       	sbiw	r24, 0x01	; 1
    68e8:	f1 f7       	brne	.-4      	; 0x68e6 <APP_Autonomous_Car_voidApp+0xe46>
    68ea:	9a af       	std	Y+58, r25	; 0x3a
    68ec:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(50);
							HAL_Ultrasonic_Sensor_voidCalcDistancse(
    68ee:	ce 01       	movw	r24, r28
    68f0:	82 54       	subi	r24, 0x42	; 66
    68f2:	9f 4f       	sbci	r25, 0xFF	; 255
    68f4:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
    68f8:	80 e0       	ldi	r24, 0x00	; 0
    68fa:	90 e0       	ldi	r25, 0x00	; 0
    68fc:	a8 e4       	ldi	r26, 0x48	; 72
    68fe:	b2 e4       	ldi	r27, 0x42	; 66
    6900:	8d ab       	std	Y+53, r24	; 0x35
    6902:	9e ab       	std	Y+54, r25	; 0x36
    6904:	af ab       	std	Y+55, r26	; 0x37
    6906:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6908:	6d a9       	ldd	r22, Y+53	; 0x35
    690a:	7e a9       	ldd	r23, Y+54	; 0x36
    690c:	8f a9       	ldd	r24, Y+55	; 0x37
    690e:	98 ad       	ldd	r25, Y+56	; 0x38
    6910:	20 e0       	ldi	r18, 0x00	; 0
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	4a e7       	ldi	r20, 0x7A	; 122
    6916:	55 e4       	ldi	r21, 0x45	; 69
    6918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    691c:	dc 01       	movw	r26, r24
    691e:	cb 01       	movw	r24, r22
    6920:	89 ab       	std	Y+49, r24	; 0x31
    6922:	9a ab       	std	Y+50, r25	; 0x32
    6924:	ab ab       	std	Y+51, r26	; 0x33
    6926:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6928:	69 a9       	ldd	r22, Y+49	; 0x31
    692a:	7a a9       	ldd	r23, Y+50	; 0x32
    692c:	8b a9       	ldd	r24, Y+51	; 0x33
    692e:	9c a9       	ldd	r25, Y+52	; 0x34
    6930:	20 e0       	ldi	r18, 0x00	; 0
    6932:	30 e0       	ldi	r19, 0x00	; 0
    6934:	40 e8       	ldi	r20, 0x80	; 128
    6936:	5f e3       	ldi	r21, 0x3F	; 63
    6938:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    693c:	88 23       	and	r24, r24
    693e:	2c f4       	brge	.+10     	; 0x694a <APP_Autonomous_Car_voidApp+0xeaa>
		__ticks = 1;
    6940:	81 e0       	ldi	r24, 0x01	; 1
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	98 ab       	std	Y+48, r25	; 0x30
    6946:	8f a7       	std	Y+47, r24	; 0x2f
    6948:	3f c0       	rjmp	.+126    	; 0x69c8 <APP_Autonomous_Car_voidApp+0xf28>
	else if (__tmp > 65535)
    694a:	69 a9       	ldd	r22, Y+49	; 0x31
    694c:	7a a9       	ldd	r23, Y+50	; 0x32
    694e:	8b a9       	ldd	r24, Y+51	; 0x33
    6950:	9c a9       	ldd	r25, Y+52	; 0x34
    6952:	20 e0       	ldi	r18, 0x00	; 0
    6954:	3f ef       	ldi	r19, 0xFF	; 255
    6956:	4f e7       	ldi	r20, 0x7F	; 127
    6958:	57 e4       	ldi	r21, 0x47	; 71
    695a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    695e:	18 16       	cp	r1, r24
    6960:	4c f5       	brge	.+82     	; 0x69b4 <APP_Autonomous_Car_voidApp+0xf14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6962:	6d a9       	ldd	r22, Y+53	; 0x35
    6964:	7e a9       	ldd	r23, Y+54	; 0x36
    6966:	8f a9       	ldd	r24, Y+55	; 0x37
    6968:	98 ad       	ldd	r25, Y+56	; 0x38
    696a:	20 e0       	ldi	r18, 0x00	; 0
    696c:	30 e0       	ldi	r19, 0x00	; 0
    696e:	40 e2       	ldi	r20, 0x20	; 32
    6970:	51 e4       	ldi	r21, 0x41	; 65
    6972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6976:	dc 01       	movw	r26, r24
    6978:	cb 01       	movw	r24, r22
    697a:	bc 01       	movw	r22, r24
    697c:	cd 01       	movw	r24, r26
    697e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6982:	dc 01       	movw	r26, r24
    6984:	cb 01       	movw	r24, r22
    6986:	98 ab       	std	Y+48, r25	; 0x30
    6988:	8f a7       	std	Y+47, r24	; 0x2f
    698a:	0f c0       	rjmp	.+30     	; 0x69aa <APP_Autonomous_Car_voidApp+0xf0a>
    698c:	80 e9       	ldi	r24, 0x90	; 144
    698e:	91 e0       	ldi	r25, 0x01	; 1
    6990:	9e a7       	std	Y+46, r25	; 0x2e
    6992:	8d a7       	std	Y+45, r24	; 0x2d
    6994:	8d a5       	ldd	r24, Y+45	; 0x2d
    6996:	9e a5       	ldd	r25, Y+46	; 0x2e
    6998:	01 97       	sbiw	r24, 0x01	; 1
    699a:	f1 f7       	brne	.-4      	; 0x6998 <APP_Autonomous_Car_voidApp+0xef8>
    699c:	9e a7       	std	Y+46, r25	; 0x2e
    699e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    69a2:	98 a9       	ldd	r25, Y+48	; 0x30
    69a4:	01 97       	sbiw	r24, 0x01	; 1
    69a6:	98 ab       	std	Y+48, r25	; 0x30
    69a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    69ac:	98 a9       	ldd	r25, Y+48	; 0x30
    69ae:	00 97       	sbiw	r24, 0x00	; 0
    69b0:	69 f7       	brne	.-38     	; 0x698c <APP_Autonomous_Car_voidApp+0xeec>
    69b2:	14 c0       	rjmp	.+40     	; 0x69dc <APP_Autonomous_Car_voidApp+0xf3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69b4:	69 a9       	ldd	r22, Y+49	; 0x31
    69b6:	7a a9       	ldd	r23, Y+50	; 0x32
    69b8:	8b a9       	ldd	r24, Y+51	; 0x33
    69ba:	9c a9       	ldd	r25, Y+52	; 0x34
    69bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69c0:	dc 01       	movw	r26, r24
    69c2:	cb 01       	movw	r24, r22
    69c4:	98 ab       	std	Y+48, r25	; 0x30
    69c6:	8f a7       	std	Y+47, r24	; 0x2f
    69c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    69ca:	98 a9       	ldd	r25, Y+48	; 0x30
    69cc:	9c a7       	std	Y+44, r25	; 0x2c
    69ce:	8b a7       	std	Y+43, r24	; 0x2b
    69d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    69d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    69d4:	01 97       	sbiw	r24, 0x01	; 1
    69d6:	f1 f7       	brne	.-4      	; 0x69d4 <APP_Autonomous_Car_voidApp+0xf34>
    69d8:	9c a7       	std	Y+44, r25	; 0x2c
    69da:	8b a7       	std	Y+43, r24	; 0x2b
									&LOC_f32Distance);
							_delay_ms(50);
							Glob_u16DirLeft = LOC_f32Distance;
    69dc:	fe 01       	movw	r30, r28
    69de:	e2 54       	subi	r30, 0x42	; 66
    69e0:	ff 4f       	sbci	r31, 0xFF	; 255
    69e2:	80 81       	ld	r24, Z
    69e4:	91 81       	ldd	r25, Z+1	; 0x01
    69e6:	a2 81       	ldd	r26, Z+2	; 0x02
    69e8:	b3 81       	ldd	r27, Z+3	; 0x03
    69ea:	bc 01       	movw	r22, r24
    69ec:	cd 01       	movw	r24, r26
    69ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69f2:	dc 01       	movw	r26, r24
    69f4:	cb 01       	movw	r24, r22
    69f6:	90 93 31 02 	sts	0x0231, r25
    69fa:	80 93 30 02 	sts	0x0230, r24
							HAL_LCD_u8Clear();
    69fe:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
							HAL_LCD_u8SendString("Dir Left: ");
    6a02:	8d ed       	ldi	r24, 0xDD	; 221
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
							HAL_LCD_u8SendNumber(Glob_u16DirLeft);
    6a0a:	80 91 30 02 	lds	r24, 0x0230
    6a0e:	90 91 31 02 	lds	r25, 0x0231
    6a12:	0e 94 ff 23 	call	0x47fe	; 0x47fe <HAL_LCD_u8SendNumber>
							HAL_LCD_u8SendString("cm");
    6a16:	8f eb       	ldi	r24, 0xBF	; 191
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
    6a1e:	80 e0       	ldi	r24, 0x00	; 0
    6a20:	90 e0       	ldi	r25, 0x00	; 0
    6a22:	a8 e4       	ldi	r26, 0x48	; 72
    6a24:	b3 e4       	ldi	r27, 0x43	; 67
    6a26:	8f a3       	std	Y+39, r24	; 0x27
    6a28:	98 a7       	std	Y+40, r25	; 0x28
    6a2a:	a9 a7       	std	Y+41, r26	; 0x29
    6a2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    6a30:	78 a5       	ldd	r23, Y+40	; 0x28
    6a32:	89 a5       	ldd	r24, Y+41	; 0x29
    6a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    6a36:	20 e0       	ldi	r18, 0x00	; 0
    6a38:	30 e0       	ldi	r19, 0x00	; 0
    6a3a:	4a e7       	ldi	r20, 0x7A	; 122
    6a3c:	55 e4       	ldi	r21, 0x45	; 69
    6a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a42:	dc 01       	movw	r26, r24
    6a44:	cb 01       	movw	r24, r22
    6a46:	8b a3       	std	Y+35, r24	; 0x23
    6a48:	9c a3       	std	Y+36, r25	; 0x24
    6a4a:	ad a3       	std	Y+37, r26	; 0x25
    6a4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    6a50:	7c a1       	ldd	r23, Y+36	; 0x24
    6a52:	8d a1       	ldd	r24, Y+37	; 0x25
    6a54:	9e a1       	ldd	r25, Y+38	; 0x26
    6a56:	20 e0       	ldi	r18, 0x00	; 0
    6a58:	30 e0       	ldi	r19, 0x00	; 0
    6a5a:	40 e8       	ldi	r20, 0x80	; 128
    6a5c:	5f e3       	ldi	r21, 0x3F	; 63
    6a5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a62:	88 23       	and	r24, r24
    6a64:	2c f4       	brge	.+10     	; 0x6a70 <APP_Autonomous_Car_voidApp+0xfd0>
		__ticks = 1;
    6a66:	81 e0       	ldi	r24, 0x01	; 1
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	9a a3       	std	Y+34, r25	; 0x22
    6a6c:	89 a3       	std	Y+33, r24	; 0x21
    6a6e:	3f c0       	rjmp	.+126    	; 0x6aee <APP_Autonomous_Car_voidApp+0x104e>
	else if (__tmp > 65535)
    6a70:	6b a1       	ldd	r22, Y+35	; 0x23
    6a72:	7c a1       	ldd	r23, Y+36	; 0x24
    6a74:	8d a1       	ldd	r24, Y+37	; 0x25
    6a76:	9e a1       	ldd	r25, Y+38	; 0x26
    6a78:	20 e0       	ldi	r18, 0x00	; 0
    6a7a:	3f ef       	ldi	r19, 0xFF	; 255
    6a7c:	4f e7       	ldi	r20, 0x7F	; 127
    6a7e:	57 e4       	ldi	r21, 0x47	; 71
    6a80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a84:	18 16       	cp	r1, r24
    6a86:	4c f5       	brge	.+82     	; 0x6ada <APP_Autonomous_Car_voidApp+0x103a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a88:	6f a1       	ldd	r22, Y+39	; 0x27
    6a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    6a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    6a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6a90:	20 e0       	ldi	r18, 0x00	; 0
    6a92:	30 e0       	ldi	r19, 0x00	; 0
    6a94:	40 e2       	ldi	r20, 0x20	; 32
    6a96:	51 e4       	ldi	r21, 0x41	; 65
    6a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a9c:	dc 01       	movw	r26, r24
    6a9e:	cb 01       	movw	r24, r22
    6aa0:	bc 01       	movw	r22, r24
    6aa2:	cd 01       	movw	r24, r26
    6aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6aa8:	dc 01       	movw	r26, r24
    6aaa:	cb 01       	movw	r24, r22
    6aac:	9a a3       	std	Y+34, r25	; 0x22
    6aae:	89 a3       	std	Y+33, r24	; 0x21
    6ab0:	0f c0       	rjmp	.+30     	; 0x6ad0 <APP_Autonomous_Car_voidApp+0x1030>
    6ab2:	80 e9       	ldi	r24, 0x90	; 144
    6ab4:	91 e0       	ldi	r25, 0x01	; 1
    6ab6:	98 a3       	std	Y+32, r25	; 0x20
    6ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    6aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6abc:	98 a1       	ldd	r25, Y+32	; 0x20
    6abe:	01 97       	sbiw	r24, 0x01	; 1
    6ac0:	f1 f7       	brne	.-4      	; 0x6abe <APP_Autonomous_Car_voidApp+0x101e>
    6ac2:	98 a3       	std	Y+32, r25	; 0x20
    6ac4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    6ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    6aca:	01 97       	sbiw	r24, 0x01	; 1
    6acc:	9a a3       	std	Y+34, r25	; 0x22
    6ace:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    6ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    6ad4:	00 97       	sbiw	r24, 0x00	; 0
    6ad6:	69 f7       	brne	.-38     	; 0x6ab2 <APP_Autonomous_Car_voidApp+0x1012>
    6ad8:	14 c0       	rjmp	.+40     	; 0x6b02 <APP_Autonomous_Car_voidApp+0x1062>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ada:	6b a1       	ldd	r22, Y+35	; 0x23
    6adc:	7c a1       	ldd	r23, Y+36	; 0x24
    6ade:	8d a1       	ldd	r24, Y+37	; 0x25
    6ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    6ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ae6:	dc 01       	movw	r26, r24
    6ae8:	cb 01       	movw	r24, r22
    6aea:	9a a3       	std	Y+34, r25	; 0x22
    6aec:	89 a3       	std	Y+33, r24	; 0x21
    6aee:	89 a1       	ldd	r24, Y+33	; 0x21
    6af0:	9a a1       	ldd	r25, Y+34	; 0x22
    6af2:	9e 8f       	std	Y+30, r25	; 0x1e
    6af4:	8d 8f       	std	Y+29, r24	; 0x1d
    6af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6af8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6afa:	01 97       	sbiw	r24, 0x01	; 1
    6afc:	f1 f7       	brne	.-4      	; 0x6afa <APP_Autonomous_Car_voidApp+0x105a>
    6afe:	9e 8f       	std	Y+30, r25	; 0x1e
    6b00:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(200);
							for (int k = MAX_CW_ANGLE; k >= START_ANGLE; k -=
    6b02:	fe 01       	movw	r30, r28
    6b04:	e9 54       	subi	r30, 0x49	; 73
    6b06:	ff 4f       	sbci	r31, 0xFF	; 255
    6b08:	84 eb       	ldi	r24, 0xB4	; 180
    6b0a:	90 e0       	ldi	r25, 0x00	; 0
    6b0c:	91 83       	std	Z+1, r25	; 0x01
    6b0e:	80 83       	st	Z, r24
    6b10:	12 c0       	rjmp	.+36     	; 0x6b36 <APP_Autonomous_Car_voidApp+0x1096>
							NUM_2) {
								HAL_SM_voidSMSetAngle(k);
    6b12:	fe 01       	movw	r30, r28
    6b14:	e9 54       	subi	r30, 0x49	; 73
    6b16:	ff 4f       	sbci	r31, 0xFF	; 255
    6b18:	80 81       	ld	r24, Z
    6b1a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <HAL_SM_voidSMSetAngle>
							HAL_LCD_u8SendString("Dir Left: ");
							HAL_LCD_u8SendNumber(Glob_u16DirLeft);
							HAL_LCD_u8SendString("cm");
							_delay_ms(200);
							for (int k = MAX_CW_ANGLE; k >= START_ANGLE; k -=
							NUM_2) {
    6b1e:	de 01       	movw	r26, r28
    6b20:	a9 54       	subi	r26, 0x49	; 73
    6b22:	bf 4f       	sbci	r27, 0xFF	; 255
    6b24:	fe 01       	movw	r30, r28
    6b26:	e9 54       	subi	r30, 0x49	; 73
    6b28:	ff 4f       	sbci	r31, 0xFF	; 255
    6b2a:	80 81       	ld	r24, Z
    6b2c:	91 81       	ldd	r25, Z+1	; 0x01
    6b2e:	02 97       	sbiw	r24, 0x02	; 2
    6b30:	11 96       	adiw	r26, 0x01	; 1
    6b32:	9c 93       	st	X, r25
    6b34:	8e 93       	st	-X, r24
							HAL_LCD_u8Clear();
							HAL_LCD_u8SendString("Dir Left: ");
							HAL_LCD_u8SendNumber(Glob_u16DirLeft);
							HAL_LCD_u8SendString("cm");
							_delay_ms(200);
							for (int k = MAX_CW_ANGLE; k >= START_ANGLE; k -=
    6b36:	fe 01       	movw	r30, r28
    6b38:	e9 54       	subi	r30, 0x49	; 73
    6b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b3c:	80 81       	ld	r24, Z
    6b3e:	91 81       	ldd	r25, Z+1	; 0x01
    6b40:	8a 35       	cpi	r24, 0x5A	; 90
    6b42:	91 05       	cpc	r25, r1
    6b44:	34 f7       	brge	.-52     	; 0x6b12 <APP_Autonomous_Car_voidApp+0x1072>
					HAL_LCD_u8Clear();
					HAL_LCD_u8SendString("Dir Right: ");
					HAL_LCD_u8SendNumber(Glob_u16DirRight);
					HAL_LCD_u8SendString("cm");
					_delay_ms(200);
					for (int j = MAX_CCW_ANGLE; j <= MAX_CW_ANGLE; j += NUM_2) {
    6b46:	de 01       	movw	r26, r28
    6b48:	a7 54       	subi	r26, 0x47	; 71
    6b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    6b4c:	fe 01       	movw	r30, r28
    6b4e:	e7 54       	subi	r30, 0x47	; 71
    6b50:	ff 4f       	sbci	r31, 0xFF	; 255
    6b52:	80 81       	ld	r24, Z
    6b54:	91 81       	ldd	r25, Z+1	; 0x01
    6b56:	02 96       	adiw	r24, 0x02	; 2
    6b58:	11 96       	adiw	r26, 0x01	; 1
    6b5a:	9c 93       	st	X, r25
    6b5c:	8e 93       	st	-X, r24
    6b5e:	fe 01       	movw	r30, r28
    6b60:	e7 54       	subi	r30, 0x47	; 71
    6b62:	ff 4f       	sbci	r31, 0xFF	; 255
    6b64:	80 81       	ld	r24, Z
    6b66:	91 81       	ldd	r25, Z+1	; 0x01
    6b68:	85 3b       	cpi	r24, 0xB5	; 181
    6b6a:	91 05       	cpc	r25, r1
    6b6c:	0c f4       	brge	.+2      	; 0x6b70 <APP_Autonomous_Car_voidApp+0x10d0>
    6b6e:	2b ce       	rjmp	.-938    	; 0x67c6 <APP_Autonomous_Car_voidApp+0xd26>
				_delay_ms(1000);
//				HAL_Buzzer_u8BuzzerMode(PortA, Pin3, Pin_Low);
			}
			HAL_void_H_BridgeStop(NUM0);
			HAL_LED_u8LedMode(PortA, Pin1, LED_ON);
			for (int i = START_ANGLE; i >= MAX_CCW_ANGLE; i -= NUM_2) {
    6b70:	de 01       	movw	r26, r28
    6b72:	a5 54       	subi	r26, 0x45	; 69
    6b74:	bf 4f       	sbci	r27, 0xFF	; 255
    6b76:	fe 01       	movw	r30, r28
    6b78:	e5 54       	subi	r30, 0x45	; 69
    6b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b7c:	80 81       	ld	r24, Z
    6b7e:	91 81       	ldd	r25, Z+1	; 0x01
    6b80:	02 97       	sbiw	r24, 0x02	; 2
    6b82:	11 96       	adiw	r26, 0x01	; 1
    6b84:	9c 93       	st	X, r25
    6b86:	8e 93       	st	-X, r24
    6b88:	fe 01       	movw	r30, r28
    6b8a:	e5 54       	subi	r30, 0x45	; 69
    6b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b8e:	80 81       	ld	r24, Z
    6b90:	91 81       	ldd	r25, Z+1	; 0x01
    6b92:	99 23       	and	r25, r25
    6b94:	0c f0       	brlt	.+2      	; 0x6b98 <APP_Autonomous_Car_voidApp+0x10f8>
    6b96:	c3 cb       	rjmp	.-2170   	; 0x631e <APP_Autonomous_Car_voidApp+0x87e>
							}
						}
					}
				}
			}
			if (Glob_u16DirLeft > Glob_u16DirRight) {
    6b98:	20 91 30 02 	lds	r18, 0x0230
    6b9c:	30 91 31 02 	lds	r19, 0x0231
    6ba0:	80 91 32 02 	lds	r24, 0x0232
    6ba4:	90 91 33 02 	lds	r25, 0x0233
    6ba8:	82 17       	cp	r24, r18
    6baa:	93 07       	cpc	r25, r19
    6bac:	08 f0       	brcs	.+2      	; 0x6bb0 <APP_Autonomous_Car_voidApp+0x1110>
    6bae:	90 c0       	rjmp	.+288    	; 0x6cd0 <APP_Autonomous_Car_voidApp+0x1230>
				HAL_LCD_u8Clear();
    6bb0:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Moving Left...");
    6bb4:	88 ee       	ldi	r24, 0xE8	; 232
    6bb6:	90 e0       	ldi	r25, 0x00	; 0
    6bb8:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
				HAL_LCD_u8GoTo(Second_Line, NUM0);
    6bbc:	83 e0       	ldi	r24, 0x03	; 3
    6bbe:	60 e0       	ldi	r22, 0x00	; 0
    6bc0:	0e 94 22 24 	call	0x4844	; 0x4844 <HAL_LCD_u8GoTo>
				HAL_LCD_u8SendString("Distance: ");
    6bc4:	84 eb       	ldi	r24, 0xB4	; 180
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
				HAL_LCD_u8SendNumber((u16) Glob_u16DirLeft);
    6bcc:	80 91 30 02 	lds	r24, 0x0230
    6bd0:	90 91 31 02 	lds	r25, 0x0231
    6bd4:	0e 94 ff 23 	call	0x47fe	; 0x47fe <HAL_LCD_u8SendNumber>
				HAL_LCD_u8SendString("cm");
    6bd8:	8f eb       	ldi	r24, 0xBF	; 191
    6bda:	90 e0       	ldi	r25, 0x00	; 0
    6bdc:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
				HAL_void_H_BridgeCCW(MAX_SPEED);
    6be0:	83 e6       	ldi	r24, 0x63	; 99
    6be2:	0e 94 4d 28 	call	0x509a	; 0x509a <HAL_void_H_BridgeCCW>
    6be6:	80 e0       	ldi	r24, 0x00	; 0
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	a1 e6       	ldi	r26, 0x61	; 97
    6bec:	b4 e4       	ldi	r27, 0x44	; 68
    6bee:	89 8f       	std	Y+25, r24	; 0x19
    6bf0:	9a 8f       	std	Y+26, r25	; 0x1a
    6bf2:	ab 8f       	std	Y+27, r26	; 0x1b
    6bf4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bf6:	69 8d       	ldd	r22, Y+25	; 0x19
    6bf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6bfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6bfe:	20 e0       	ldi	r18, 0x00	; 0
    6c00:	30 e0       	ldi	r19, 0x00	; 0
    6c02:	4a e7       	ldi	r20, 0x7A	; 122
    6c04:	55 e4       	ldi	r21, 0x45	; 69
    6c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c0a:	dc 01       	movw	r26, r24
    6c0c:	cb 01       	movw	r24, r22
    6c0e:	8d 8b       	std	Y+21, r24	; 0x15
    6c10:	9e 8b       	std	Y+22, r25	; 0x16
    6c12:	af 8b       	std	Y+23, r26	; 0x17
    6c14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6c16:	6d 89       	ldd	r22, Y+21	; 0x15
    6c18:	7e 89       	ldd	r23, Y+22	; 0x16
    6c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    6c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    6c1e:	20 e0       	ldi	r18, 0x00	; 0
    6c20:	30 e0       	ldi	r19, 0x00	; 0
    6c22:	40 e8       	ldi	r20, 0x80	; 128
    6c24:	5f e3       	ldi	r21, 0x3F	; 63
    6c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c2a:	88 23       	and	r24, r24
    6c2c:	2c f4       	brge	.+10     	; 0x6c38 <APP_Autonomous_Car_voidApp+0x1198>
		__ticks = 1;
    6c2e:	81 e0       	ldi	r24, 0x01	; 1
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	9c 8b       	std	Y+20, r25	; 0x14
    6c34:	8b 8b       	std	Y+19, r24	; 0x13
    6c36:	40 c0       	rjmp	.+128    	; 0x6cb8 <APP_Autonomous_Car_voidApp+0x1218>
	else if (__tmp > 65535)
    6c38:	6d 89       	ldd	r22, Y+21	; 0x15
    6c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    6c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    6c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    6c40:	20 e0       	ldi	r18, 0x00	; 0
    6c42:	3f ef       	ldi	r19, 0xFF	; 255
    6c44:	4f e7       	ldi	r20, 0x7F	; 127
    6c46:	57 e4       	ldi	r21, 0x47	; 71
    6c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c4c:	18 16       	cp	r1, r24
    6c4e:	54 f5       	brge	.+84     	; 0x6ca4 <APP_Autonomous_Car_voidApp+0x1204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c50:	69 8d       	ldd	r22, Y+25	; 0x19
    6c52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c58:	20 e0       	ldi	r18, 0x00	; 0
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	40 e2       	ldi	r20, 0x20	; 32
    6c5e:	51 e4       	ldi	r21, 0x41	; 65
    6c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c64:	dc 01       	movw	r26, r24
    6c66:	cb 01       	movw	r24, r22
    6c68:	bc 01       	movw	r22, r24
    6c6a:	cd 01       	movw	r24, r26
    6c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c70:	dc 01       	movw	r26, r24
    6c72:	cb 01       	movw	r24, r22
    6c74:	9c 8b       	std	Y+20, r25	; 0x14
    6c76:	8b 8b       	std	Y+19, r24	; 0x13
    6c78:	0f c0       	rjmp	.+30     	; 0x6c98 <APP_Autonomous_Car_voidApp+0x11f8>
    6c7a:	80 e9       	ldi	r24, 0x90	; 144
    6c7c:	91 e0       	ldi	r25, 0x01	; 1
    6c7e:	9a 8b       	std	Y+18, r25	; 0x12
    6c80:	89 8b       	std	Y+17, r24	; 0x11
    6c82:	89 89       	ldd	r24, Y+17	; 0x11
    6c84:	9a 89       	ldd	r25, Y+18	; 0x12
    6c86:	01 97       	sbiw	r24, 0x01	; 1
    6c88:	f1 f7       	brne	.-4      	; 0x6c86 <APP_Autonomous_Car_voidApp+0x11e6>
    6c8a:	9a 8b       	std	Y+18, r25	; 0x12
    6c8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    6c90:	9c 89       	ldd	r25, Y+20	; 0x14
    6c92:	01 97       	sbiw	r24, 0x01	; 1
    6c94:	9c 8b       	std	Y+20, r25	; 0x14
    6c96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c98:	8b 89       	ldd	r24, Y+19	; 0x13
    6c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    6c9c:	00 97       	sbiw	r24, 0x00	; 0
    6c9e:	69 f7       	brne	.-38     	; 0x6c7a <APP_Autonomous_Car_voidApp+0x11da>
    6ca0:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <APP_Autonomous_Car_voidApp+0x4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    6ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    6ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    6caa:	98 8d       	ldd	r25, Y+24	; 0x18
    6cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cb0:	dc 01       	movw	r26, r24
    6cb2:	cb 01       	movw	r24, r22
    6cb4:	9c 8b       	std	Y+20, r25	; 0x14
    6cb6:	8b 8b       	std	Y+19, r24	; 0x13
    6cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    6cba:	9c 89       	ldd	r25, Y+20	; 0x14
    6cbc:	98 8b       	std	Y+16, r25	; 0x10
    6cbe:	8f 87       	std	Y+15, r24	; 0x0f
    6cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    6cc2:	98 89       	ldd	r25, Y+16	; 0x10
    6cc4:	01 97       	sbiw	r24, 0x01	; 1
    6cc6:	f1 f7       	brne	.-4      	; 0x6cc4 <APP_Autonomous_Car_voidApp+0x1224>
    6cc8:	98 8b       	std	Y+16, r25	; 0x10
    6cca:	8f 87       	std	Y+15, r24	; 0x0f
    6ccc:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <APP_Autonomous_Car_voidApp+0x4a>
				_delay_ms(900);
			} else if (Glob_u16DirRight >= Glob_u16DirLeft) {
    6cd0:	20 91 32 02 	lds	r18, 0x0232
    6cd4:	30 91 33 02 	lds	r19, 0x0233
    6cd8:	80 91 30 02 	lds	r24, 0x0230
    6cdc:	90 91 31 02 	lds	r25, 0x0231
    6ce0:	28 17       	cp	r18, r24
    6ce2:	39 07       	cpc	r19, r25
    6ce4:	10 f4       	brcc	.+4      	; 0x6cea <APP_Autonomous_Car_voidApp+0x124a>
    6ce6:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <APP_Autonomous_Car_voidApp+0x4a>
				HAL_LCD_u8Clear();
    6cea:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Moving Right...");
    6cee:	87 ef       	ldi	r24, 0xF7	; 247
    6cf0:	90 e0       	ldi	r25, 0x00	; 0
    6cf2:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
				HAL_LCD_u8GoTo(Second_Line, NUM0);
    6cf6:	83 e0       	ldi	r24, 0x03	; 3
    6cf8:	60 e0       	ldi	r22, 0x00	; 0
    6cfa:	0e 94 22 24 	call	0x4844	; 0x4844 <HAL_LCD_u8GoTo>
				HAL_LCD_u8SendString("Distance: ");
    6cfe:	84 eb       	ldi	r24, 0xB4	; 180
    6d00:	90 e0       	ldi	r25, 0x00	; 0
    6d02:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
				HAL_LCD_u8SendNumber((u16) Glob_u16DirRight);
    6d06:	80 91 32 02 	lds	r24, 0x0232
    6d0a:	90 91 33 02 	lds	r25, 0x0233
    6d0e:	0e 94 ff 23 	call	0x47fe	; 0x47fe <HAL_LCD_u8SendNumber>
				HAL_LCD_u8SendString("cm");
    6d12:	8f eb       	ldi	r24, 0xBF	; 191
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	0e 94 c9 23 	call	0x4792	; 0x4792 <HAL_LCD_u8SendString>
				HAL_void_H_BridgeCW(MAX_SPEED);
    6d1a:	83 e6       	ldi	r24, 0x63	; 99
    6d1c:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <HAL_void_H_BridgeCW>
    6d20:	80 e0       	ldi	r24, 0x00	; 0
    6d22:	90 e0       	ldi	r25, 0x00	; 0
    6d24:	a1 e6       	ldi	r26, 0x61	; 97
    6d26:	b4 e4       	ldi	r27, 0x44	; 68
    6d28:	8b 87       	std	Y+11, r24	; 0x0b
    6d2a:	9c 87       	std	Y+12, r25	; 0x0c
    6d2c:	ad 87       	std	Y+13, r26	; 0x0d
    6d2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d38:	20 e0       	ldi	r18, 0x00	; 0
    6d3a:	30 e0       	ldi	r19, 0x00	; 0
    6d3c:	4a e7       	ldi	r20, 0x7A	; 122
    6d3e:	55 e4       	ldi	r21, 0x45	; 69
    6d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d44:	dc 01       	movw	r26, r24
    6d46:	cb 01       	movw	r24, r22
    6d48:	8f 83       	std	Y+7, r24	; 0x07
    6d4a:	98 87       	std	Y+8, r25	; 0x08
    6d4c:	a9 87       	std	Y+9, r26	; 0x09
    6d4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d50:	6f 81       	ldd	r22, Y+7	; 0x07
    6d52:	78 85       	ldd	r23, Y+8	; 0x08
    6d54:	89 85       	ldd	r24, Y+9	; 0x09
    6d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d58:	20 e0       	ldi	r18, 0x00	; 0
    6d5a:	30 e0       	ldi	r19, 0x00	; 0
    6d5c:	40 e8       	ldi	r20, 0x80	; 128
    6d5e:	5f e3       	ldi	r21, 0x3F	; 63
    6d60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d64:	88 23       	and	r24, r24
    6d66:	2c f4       	brge	.+10     	; 0x6d72 <APP_Autonomous_Car_voidApp+0x12d2>
		__ticks = 1;
    6d68:	81 e0       	ldi	r24, 0x01	; 1
    6d6a:	90 e0       	ldi	r25, 0x00	; 0
    6d6c:	9e 83       	std	Y+6, r25	; 0x06
    6d6e:	8d 83       	std	Y+5, r24	; 0x05
    6d70:	40 c0       	rjmp	.+128    	; 0x6df2 <APP_Autonomous_Car_voidApp+0x1352>
	else if (__tmp > 65535)
    6d72:	6f 81       	ldd	r22, Y+7	; 0x07
    6d74:	78 85       	ldd	r23, Y+8	; 0x08
    6d76:	89 85       	ldd	r24, Y+9	; 0x09
    6d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d7a:	20 e0       	ldi	r18, 0x00	; 0
    6d7c:	3f ef       	ldi	r19, 0xFF	; 255
    6d7e:	4f e7       	ldi	r20, 0x7F	; 127
    6d80:	57 e4       	ldi	r21, 0x47	; 71
    6d82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d86:	18 16       	cp	r1, r24
    6d88:	54 f5       	brge	.+84     	; 0x6dde <APP_Autonomous_Car_voidApp+0x133e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d92:	20 e0       	ldi	r18, 0x00	; 0
    6d94:	30 e0       	ldi	r19, 0x00	; 0
    6d96:	40 e2       	ldi	r20, 0x20	; 32
    6d98:	51 e4       	ldi	r21, 0x41	; 65
    6d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d9e:	dc 01       	movw	r26, r24
    6da0:	cb 01       	movw	r24, r22
    6da2:	bc 01       	movw	r22, r24
    6da4:	cd 01       	movw	r24, r26
    6da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6daa:	dc 01       	movw	r26, r24
    6dac:	cb 01       	movw	r24, r22
    6dae:	9e 83       	std	Y+6, r25	; 0x06
    6db0:	8d 83       	std	Y+5, r24	; 0x05
    6db2:	0f c0       	rjmp	.+30     	; 0x6dd2 <APP_Autonomous_Car_voidApp+0x1332>
    6db4:	80 e9       	ldi	r24, 0x90	; 144
    6db6:	91 e0       	ldi	r25, 0x01	; 1
    6db8:	9c 83       	std	Y+4, r25	; 0x04
    6dba:	8b 83       	std	Y+3, r24	; 0x03
    6dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    6dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    6dc0:	01 97       	sbiw	r24, 0x01	; 1
    6dc2:	f1 f7       	brne	.-4      	; 0x6dc0 <APP_Autonomous_Car_voidApp+0x1320>
    6dc4:	9c 83       	std	Y+4, r25	; 0x04
    6dc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    6dca:	9e 81       	ldd	r25, Y+6	; 0x06
    6dcc:	01 97       	sbiw	r24, 0x01	; 1
    6dce:	9e 83       	std	Y+6, r25	; 0x06
    6dd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    6dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    6dd6:	00 97       	sbiw	r24, 0x00	; 0
    6dd8:	69 f7       	brne	.-38     	; 0x6db4 <APP_Autonomous_Car_voidApp+0x1314>
    6dda:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <APP_Autonomous_Car_voidApp+0x4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6dde:	6f 81       	ldd	r22, Y+7	; 0x07
    6de0:	78 85       	ldd	r23, Y+8	; 0x08
    6de2:	89 85       	ldd	r24, Y+9	; 0x09
    6de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dea:	dc 01       	movw	r26, r24
    6dec:	cb 01       	movw	r24, r22
    6dee:	9e 83       	std	Y+6, r25	; 0x06
    6df0:	8d 83       	std	Y+5, r24	; 0x05
    6df2:	8d 81       	ldd	r24, Y+5	; 0x05
    6df4:	9e 81       	ldd	r25, Y+6	; 0x06
    6df6:	9a 83       	std	Y+2, r25	; 0x02
    6df8:	89 83       	std	Y+1, r24	; 0x01
    6dfa:	89 81       	ldd	r24, Y+1	; 0x01
    6dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    6dfe:	01 97       	sbiw	r24, 0x01	; 1
    6e00:	f1 f7       	brne	.-4      	; 0x6dfe <APP_Autonomous_Car_voidApp+0x135e>
    6e02:	9a 83       	std	Y+2, r25	; 0x02
    6e04:	89 83       	std	Y+1, r24	; 0x01
    6e06:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <APP_Autonomous_Car_voidApp+0x4a>

00006e0a <main>:
 *      Author: Mohamed
 */

#include "Autonomous_Car/Autonomous_Car.h"
#include "Control_Car/Control_Car.h"
int main(void) {
    6e0a:	df 93       	push	r29
    6e0c:	cf 93       	push	r28
    6e0e:	0f 92       	push	r0
    6e10:	cd b7       	in	r28, 0x3d	; 61
    6e12:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Mode = 'X';
    6e14:	88 e5       	ldi	r24, 0x58	; 88
    6e16:	89 83       	std	Y+1, r24	; 0x01
	//APP_Autonomous_Car_voidInit();
	APP_Control_Car_Init();
    6e18:	0e 94 ee 28 	call	0x51dc	; 0x51dc <APP_Control_Car_Init>
	while (1) {
		//MCAL_UART_UARTReceive(&Loc_u8Mode);
		//if (Loc_u8Mode == 'x') {
			APP_Control_Car_App();
    6e1c:	0e 94 0b 29 	call	0x5216	; 0x5216 <APP_Control_Car_App>
    6e20:	fd cf       	rjmp	.-6      	; 0x6e1c <main+0x12>

00006e22 <__udivmodsi4>:
    6e22:	a1 e2       	ldi	r26, 0x21	; 33
    6e24:	1a 2e       	mov	r1, r26
    6e26:	aa 1b       	sub	r26, r26
    6e28:	bb 1b       	sub	r27, r27
    6e2a:	fd 01       	movw	r30, r26
    6e2c:	0d c0       	rjmp	.+26     	; 0x6e48 <__udivmodsi4_ep>

00006e2e <__udivmodsi4_loop>:
    6e2e:	aa 1f       	adc	r26, r26
    6e30:	bb 1f       	adc	r27, r27
    6e32:	ee 1f       	adc	r30, r30
    6e34:	ff 1f       	adc	r31, r31
    6e36:	a2 17       	cp	r26, r18
    6e38:	b3 07       	cpc	r27, r19
    6e3a:	e4 07       	cpc	r30, r20
    6e3c:	f5 07       	cpc	r31, r21
    6e3e:	20 f0       	brcs	.+8      	; 0x6e48 <__udivmodsi4_ep>
    6e40:	a2 1b       	sub	r26, r18
    6e42:	b3 0b       	sbc	r27, r19
    6e44:	e4 0b       	sbc	r30, r20
    6e46:	f5 0b       	sbc	r31, r21

00006e48 <__udivmodsi4_ep>:
    6e48:	66 1f       	adc	r22, r22
    6e4a:	77 1f       	adc	r23, r23
    6e4c:	88 1f       	adc	r24, r24
    6e4e:	99 1f       	adc	r25, r25
    6e50:	1a 94       	dec	r1
    6e52:	69 f7       	brne	.-38     	; 0x6e2e <__udivmodsi4_loop>
    6e54:	60 95       	com	r22
    6e56:	70 95       	com	r23
    6e58:	80 95       	com	r24
    6e5a:	90 95       	com	r25
    6e5c:	9b 01       	movw	r18, r22
    6e5e:	ac 01       	movw	r20, r24
    6e60:	bd 01       	movw	r22, r26
    6e62:	cf 01       	movw	r24, r30
    6e64:	08 95       	ret

00006e66 <__prologue_saves__>:
    6e66:	2f 92       	push	r2
    6e68:	3f 92       	push	r3
    6e6a:	4f 92       	push	r4
    6e6c:	5f 92       	push	r5
    6e6e:	6f 92       	push	r6
    6e70:	7f 92       	push	r7
    6e72:	8f 92       	push	r8
    6e74:	9f 92       	push	r9
    6e76:	af 92       	push	r10
    6e78:	bf 92       	push	r11
    6e7a:	cf 92       	push	r12
    6e7c:	df 92       	push	r13
    6e7e:	ef 92       	push	r14
    6e80:	ff 92       	push	r15
    6e82:	0f 93       	push	r16
    6e84:	1f 93       	push	r17
    6e86:	cf 93       	push	r28
    6e88:	df 93       	push	r29
    6e8a:	cd b7       	in	r28, 0x3d	; 61
    6e8c:	de b7       	in	r29, 0x3e	; 62
    6e8e:	ca 1b       	sub	r28, r26
    6e90:	db 0b       	sbc	r29, r27
    6e92:	0f b6       	in	r0, 0x3f	; 63
    6e94:	f8 94       	cli
    6e96:	de bf       	out	0x3e, r29	; 62
    6e98:	0f be       	out	0x3f, r0	; 63
    6e9a:	cd bf       	out	0x3d, r28	; 61
    6e9c:	09 94       	ijmp

00006e9e <__epilogue_restores__>:
    6e9e:	2a 88       	ldd	r2, Y+18	; 0x12
    6ea0:	39 88       	ldd	r3, Y+17	; 0x11
    6ea2:	48 88       	ldd	r4, Y+16	; 0x10
    6ea4:	5f 84       	ldd	r5, Y+15	; 0x0f
    6ea6:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ea8:	7d 84       	ldd	r7, Y+13	; 0x0d
    6eaa:	8c 84       	ldd	r8, Y+12	; 0x0c
    6eac:	9b 84       	ldd	r9, Y+11	; 0x0b
    6eae:	aa 84       	ldd	r10, Y+10	; 0x0a
    6eb0:	b9 84       	ldd	r11, Y+9	; 0x09
    6eb2:	c8 84       	ldd	r12, Y+8	; 0x08
    6eb4:	df 80       	ldd	r13, Y+7	; 0x07
    6eb6:	ee 80       	ldd	r14, Y+6	; 0x06
    6eb8:	fd 80       	ldd	r15, Y+5	; 0x05
    6eba:	0c 81       	ldd	r16, Y+4	; 0x04
    6ebc:	1b 81       	ldd	r17, Y+3	; 0x03
    6ebe:	aa 81       	ldd	r26, Y+2	; 0x02
    6ec0:	b9 81       	ldd	r27, Y+1	; 0x01
    6ec2:	ce 0f       	add	r28, r30
    6ec4:	d1 1d       	adc	r29, r1
    6ec6:	0f b6       	in	r0, 0x3f	; 63
    6ec8:	f8 94       	cli
    6eca:	de bf       	out	0x3e, r29	; 62
    6ecc:	0f be       	out	0x3f, r0	; 63
    6ece:	cd bf       	out	0x3d, r28	; 61
    6ed0:	ed 01       	movw	r28, r26
    6ed2:	08 95       	ret

00006ed4 <itoa>:
    6ed4:	fb 01       	movw	r30, r22
    6ed6:	9f 01       	movw	r18, r30
    6ed8:	e8 94       	clt
    6eda:	42 30       	cpi	r20, 0x02	; 2
    6edc:	c4 f0       	brlt	.+48     	; 0x6f0e <itoa+0x3a>
    6ede:	45 32       	cpi	r20, 0x25	; 37
    6ee0:	b4 f4       	brge	.+44     	; 0x6f0e <itoa+0x3a>
    6ee2:	4a 30       	cpi	r20, 0x0A	; 10
    6ee4:	29 f4       	brne	.+10     	; 0x6ef0 <itoa+0x1c>
    6ee6:	97 fb       	bst	r25, 7
    6ee8:	1e f4       	brtc	.+6      	; 0x6ef0 <itoa+0x1c>
    6eea:	90 95       	com	r25
    6eec:	81 95       	neg	r24
    6eee:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef0:	64 2f       	mov	r22, r20
    6ef2:	77 27       	eor	r23, r23
    6ef4:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <__udivmodhi4>
    6ef8:	80 5d       	subi	r24, 0xD0	; 208
    6efa:	8a 33       	cpi	r24, 0x3A	; 58
    6efc:	0c f0       	brlt	.+2      	; 0x6f00 <itoa+0x2c>
    6efe:	89 5d       	subi	r24, 0xD9	; 217
    6f00:	81 93       	st	Z+, r24
    6f02:	cb 01       	movw	r24, r22
    6f04:	00 97       	sbiw	r24, 0x00	; 0
    6f06:	a1 f7       	brne	.-24     	; 0x6ef0 <itoa+0x1c>
    6f08:	16 f4       	brtc	.+4      	; 0x6f0e <itoa+0x3a>
    6f0a:	5d e2       	ldi	r21, 0x2D	; 45
    6f0c:	51 93       	st	Z+, r21
    6f0e:	10 82       	st	Z, r1
    6f10:	c9 01       	movw	r24, r18
    6f12:	0c 94 8b 37 	jmp	0x6f16	; 0x6f16 <strrev>

00006f16 <strrev>:
    6f16:	dc 01       	movw	r26, r24
    6f18:	fc 01       	movw	r30, r24
    6f1a:	67 2f       	mov	r22, r23
    6f1c:	71 91       	ld	r23, Z+
    6f1e:	77 23       	and	r23, r23
    6f20:	e1 f7       	brne	.-8      	; 0x6f1a <strrev+0x4>
    6f22:	32 97       	sbiw	r30, 0x02	; 2
    6f24:	04 c0       	rjmp	.+8      	; 0x6f2e <strrev+0x18>
    6f26:	7c 91       	ld	r23, X
    6f28:	6d 93       	st	X+, r22
    6f2a:	70 83       	st	Z, r23
    6f2c:	62 91       	ld	r22, -Z
    6f2e:	ae 17       	cp	r26, r30
    6f30:	bf 07       	cpc	r27, r31
    6f32:	c8 f3       	brcs	.-14     	; 0x6f26 <strrev+0x10>
    6f34:	08 95       	ret

00006f36 <__udivmodhi4>:
    6f36:	aa 1b       	sub	r26, r26
    6f38:	bb 1b       	sub	r27, r27
    6f3a:	51 e1       	ldi	r21, 0x11	; 17
    6f3c:	07 c0       	rjmp	.+14     	; 0x6f4c <__udivmodhi4_ep>

00006f3e <__udivmodhi4_loop>:
    6f3e:	aa 1f       	adc	r26, r26
    6f40:	bb 1f       	adc	r27, r27
    6f42:	a6 17       	cp	r26, r22
    6f44:	b7 07       	cpc	r27, r23
    6f46:	10 f0       	brcs	.+4      	; 0x6f4c <__udivmodhi4_ep>
    6f48:	a6 1b       	sub	r26, r22
    6f4a:	b7 0b       	sbc	r27, r23

00006f4c <__udivmodhi4_ep>:
    6f4c:	88 1f       	adc	r24, r24
    6f4e:	99 1f       	adc	r25, r25
    6f50:	5a 95       	dec	r21
    6f52:	a9 f7       	brne	.-22     	; 0x6f3e <__udivmodhi4_loop>
    6f54:	80 95       	com	r24
    6f56:	90 95       	com	r25
    6f58:	bc 01       	movw	r22, r24
    6f5a:	cd 01       	movw	r24, r26
    6f5c:	08 95       	ret

00006f5e <_exit>:
    6f5e:	f8 94       	cli

00006f60 <__stop_program>:
    6f60:	ff cf       	rjmp	.-2      	; 0x6f60 <__stop_program>
